
STM32F411CEUx_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000595c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a10  08005afc  08005afc  00006afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800650c  0800650c  00008078  2**0
                  CONTENTS
  4 .ARM          00000008  0800650c  0800650c  0000750c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006514  08006514  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006514  08006514  00007514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006518  08006518  00007518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800651c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a60  20000078  08006594  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad8  08006594  00008ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e325  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a7f  00000000  00000000  000163cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00018e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a40  00000000  00000000  00019b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f7e  00000000  00000000  0001a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110a6  00000000  00000000  00032556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aea7  00000000  00000000  000435fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce4a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d20  00000000  00000000  000ce4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d2208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ae4 	.word	0x08005ae4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005ae4 	.word	0x08005ae4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f001 fba3 	bl	8001cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f863 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f92b 	bl	80007d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000582:	f000 f8ff 	bl	8000784 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000586:	f000 f8c5 	bl	8000714 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	/* Initialization of ST7735 LCD SCREEN */
	ST7735_Init();
 800058a:	f001 fa15 	bl	80019b8 <ST7735_Init>
	ST7735_FillScreen(ST7735_COLOUR_BLACK);
 800058e:	2000      	movs	r0, #0
 8000590:	f001 fb16 	bl	8001bc0 <ST7735_FillScreen>
	printf("Bootloader:%d.%d\n",BL_Version[0],BL_Version[1]);
 8000594:	2301      	movs	r3, #1
 8000596:	2201      	movs	r2, #1
 8000598:	4619      	mov	r1, r3
 800059a:	4824      	ldr	r0, [pc, #144]	@ (800062c <main+0xbc>)
 800059c:	f004 fc84 	bl	8004ea8 <iprintf>
	/* Check the GPIO for 3 seconds */
	GPIO_PinState OTA_Pin_state;
	uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 80005a0:	f001 fc2a 	bl	8001df8 <HAL_GetTick>
 80005a4:	4603      	mov	r3, r0
 80005a6:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 80005aa:	60fb      	str	r3, [r7, #12]
	printf("PRESS BTN FOR FW UPD\n");
 80005ac:	4820      	ldr	r0, [pc, #128]	@ (8000630 <main+0xc0>)
 80005ae:	f004 fce3 	bl	8004f78 <puts>
	do
	{
		OTA_Pin_state = HAL_GPIO_ReadPin( BTN_OTA_GPIO_Port, BTN_OTA_Pin);
 80005b2:	2101      	movs	r1, #1
 80005b4:	481f      	ldr	r0, [pc, #124]	@ (8000634 <main+0xc4>)
 80005b6:	f002 fb8f 	bl	8002cd8 <HAL_GPIO_ReadPin>
 80005ba:	4603      	mov	r3, r0
 80005bc:	72fb      	strb	r3, [r7, #11]
		uint32_t current_tick = HAL_GetTick();
 80005be:	f001 fc1b 	bl	8001df8 <HAL_GetTick>
 80005c2:	6078      	str	r0, [r7, #4]

		/* Check the button is pressed or not for 3seconds */
		if( ( OTA_Pin_state != GPIO_PIN_RESET ) || ( current_tick > end_tick ) )
 80005c4:	7afb      	ldrb	r3, [r7, #11]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d104      	bne.n	80005d4 <main+0x64>
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d800      	bhi.n	80005d4 <main+0x64>
	{
 80005d2:	e7ee      	b.n	80005b2 <main+0x42>
			break;
		}
	}while( 1 );

	/*Start the Firmware or Application update */
	if( OTA_Pin_state == GPIO_PIN_SET )
 80005d4:	7afb      	ldrb	r3, [r7, #11]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d120      	bne.n	800061c <main+0xac>
	{
		printf("ENTERED OTA.\n");
 80005da:	4817      	ldr	r0, [pc, #92]	@ (8000638 <main+0xc8>)
 80005dc:	f004 fccc 	bl	8004f78 <puts>

		/* Also indicating overy BOOT LED, incasae LCD screen is not available */
		HAL_GPIO_WritePin(BOOTMODE_LED_GPIO_Port, BOOTMODE_LED_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2104      	movs	r1, #4
 80005e4:	4813      	ldr	r0, [pc, #76]	@ (8000634 <main+0xc4>)
 80005e6:	f002 fb8f 	bl	8002d08 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80005ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005ee:	f001 fc0f 	bl	8001e10 <HAL_Delay>
		HAL_GPIO_WritePin(BOOTMODE_LED_GPIO_Port, BOOTMODE_LED_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2104      	movs	r1, #4
 80005f6:	480f      	ldr	r0, [pc, #60]	@ (8000634 <main+0xc4>)
 80005f8:	f002 fb86 	bl	8002d08 <HAL_GPIO_WritePin>
		/* OTA Request. Receive the data from the UART4 and flash */
		if(ota_begin() != ENM_OTA_RET_OK)
 80005fc:	f000 fcb2 	bl	8000f64 <ota_begin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d001      	beq.n	800060a <main+0x9a>
		{
			/* Error. Don't process. */
			while(1)
 8000606:	bf00      	nop
 8000608:	e7fd      	b.n	8000606 <main+0x96>
			}
		}
		else
		{
			/* Reset to load the new application */
			printf("UPD SUCCESS.REBOOTING\n");
 800060a:	480c      	ldr	r0, [pc, #48]	@ (800063c <main+0xcc>)
 800060c:	f004 fcb4 	bl	8004f78 <puts>
			HAL_Delay(2000);
 8000610:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000614:	f001 fbfc 	bl	8001e10 <HAL_Delay>
			HAL_NVIC_SystemReset();
 8000618:	f001 fd6b 	bl	80020f2 <HAL_NVIC_SystemReset>
		}
	}

	// Jump to application
	goto_application();
 800061c:	f000 f95c 	bl	80008d8 <goto_application>
	printf("ENTERING BOOT WHILE!!\n");
 8000620:	4807      	ldr	r0, [pc, #28]	@ (8000640 <main+0xd0>)
 8000622:	f004 fca9 	bl	8004f78 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000626:	bf00      	nop
 8000628:	e7fd      	b.n	8000626 <main+0xb6>
 800062a:	bf00      	nop
 800062c:	08005afc 	.word	0x08005afc
 8000630:	08005b10 	.word	0x08005b10
 8000634:	40020000 	.word	0x40020000
 8000638:	08005b28 	.word	0x08005b28
 800063c:	08005b38 	.word	0x08005b38
 8000640:	08005b50 	.word	0x08005b50

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	@ 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fd70 	bl	8005138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b27      	ldr	r3, [pc, #156]	@ (800070c <SystemClock_Config+0xc8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a26      	ldr	r2, [pc, #152]	@ (800070c <SystemClock_Config+0xc8>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <SystemClock_Config+0xc8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a20      	ldr	r2, [pc, #128]	@ (8000710 <SystemClock_Config+0xcc>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <SystemClock_Config+0xcc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006b4:	2319      	movs	r3, #25
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006b8:	23c0      	movs	r3, #192	@ 0xc0
 80006ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 fb37 	bl	8002d3c <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f950 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2103      	movs	r1, #3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fd99 	bl	800322c <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000700:	f000 f93a 	bl	8000978 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3750      	adds	r7, #80	@ 0x50
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000718:	4b18      	ldr	r3, [pc, #96]	@ (800077c <MX_SPI1_Init+0x68>)
 800071a:	4a19      	ldr	r2, [pc, #100]	@ (8000780 <MX_SPI1_Init+0x6c>)
 800071c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071e:	4b17      	ldr	r3, [pc, #92]	@ (800077c <MX_SPI1_Init+0x68>)
 8000720:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000724:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <MX_SPI1_Init+0x68>)
 8000728:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800072c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800072e:	4b13      	ldr	r3, [pc, #76]	@ (800077c <MX_SPI1_Init+0x68>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_SPI1_Init+0x68>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_SPI1_Init+0x68>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_SPI1_Init+0x68>)
 8000742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000746:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_SPI1_Init+0x68>)
 800074a:	2208      	movs	r2, #8
 800074c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_SPI1_Init+0x68>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_SPI1_Init+0x68>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_SPI1_Init+0x68>)
 800075c:	2200      	movs	r2, #0
 800075e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_SPI1_Init+0x68>)
 8000762:	220a      	movs	r2, #10
 8000764:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_SPI1_Init+0x68>)
 8000768:	f003 f80e 	bl	8003788 <HAL_SPI_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000772:	f000 f901 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000094 	.word	0x20000094
 8000780:	40013000 	.word	0x40013000

08000784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000788:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <MX_USART1_UART_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 8000790:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007bc:	f003 fab4 	bl	8003d28 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007c6:	f000 f8d7 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000ec 	.word	0x200000ec
 80007d4:	40011000 	.word	0x40011000

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	@ 0x28
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b36      	ldr	r3, [pc, #216]	@ (80008cc <MX_GPIO_Init+0xf4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a35      	ldr	r2, [pc, #212]	@ (80008cc <MX_GPIO_Init+0xf4>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b33      	ldr	r3, [pc, #204]	@ (80008cc <MX_GPIO_Init+0xf4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b2f      	ldr	r3, [pc, #188]	@ (80008cc <MX_GPIO_Init+0xf4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a2e      	ldr	r2, [pc, #184]	@ (80008cc <MX_GPIO_Init+0xf4>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b2c      	ldr	r3, [pc, #176]	@ (80008cc <MX_GPIO_Init+0xf4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b28      	ldr	r3, [pc, #160]	@ (80008cc <MX_GPIO_Init+0xf4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a27      	ldr	r2, [pc, #156]	@ (80008cc <MX_GPIO_Init+0xf4>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b25      	ldr	r3, [pc, #148]	@ (80008cc <MX_GPIO_Init+0xf4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <MX_GPIO_Init+0xf4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a20      	ldr	r2, [pc, #128]	@ (80008cc <MX_GPIO_Init+0xf4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <MX_GPIO_Init+0xf4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, APPMODE_LED_Pin|BOOTMODE_LED_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2106      	movs	r1, #6
 8000862:	481b      	ldr	r0, [pc, #108]	@ (80008d0 <MX_GPIO_Init+0xf8>)
 8000864:	f002 fa50 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_DC_Pin|ST7735_RES_Pin|ST7735_CS_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2107      	movs	r1, #7
 800086c:	4819      	ldr	r0, [pc, #100]	@ (80008d4 <MX_GPIO_Init+0xfc>)
 800086e:	f002 fa4b 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_OTA_Pin */
  GPIO_InitStruct.Pin = BTN_OTA_Pin;
 8000872:	2301      	movs	r3, #1
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_OTA_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4812      	ldr	r0, [pc, #72]	@ (80008d0 <MX_GPIO_Init+0xf8>)
 8000886:	f001 ffbf 	bl	8002808 <HAL_GPIO_Init>

  /*Configure GPIO pins : APPMODE_LED_Pin BOOTMODE_LED_Pin */
  GPIO_InitStruct.Pin = APPMODE_LED_Pin|BOOTMODE_LED_Pin;
 800088a:	2306      	movs	r3, #6
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	480b      	ldr	r0, [pc, #44]	@ (80008d0 <MX_GPIO_Init+0xf8>)
 80008a2:	f001 ffb1 	bl	8002808 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_RES_Pin ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_RES_Pin|ST7735_CS_Pin;
 80008a6:	2307      	movs	r3, #7
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_GPIO_Init+0xfc>)
 80008be:	f001 ffa3 	bl	8002808 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	@ 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40020400 	.word	0x40020400

080008d8 <goto_application>:
/**
  * @brief Jump to application from the Bootloader
  * @retval None
  */
static void goto_application(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
	printf("ENTERING APPLICATION\n");
 80008de:	4817      	ldr	r0, [pc, #92]	@ (800093c <goto_application+0x64>)
 80008e0:	f004 fb4a 	bl	8004f78 <puts>

	//Defining the Address of RESET HANDLER of application.
	
  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (OTA_APP_FLASH_ADDR + 4U)));
 80008e4:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <goto_application+0x68>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	607b      	str	r3, [r7, #4]

  // Turn OFF the Green Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF
 80008ea:	2200      	movs	r2, #0
 80008ec:	2101      	movs	r1, #1
 80008ee:	4815      	ldr	r0, [pc, #84]	@ (8000944 <goto_application+0x6c>)
 80008f0:	f002 fa0a 	bl	8002d08 <HAL_GPIO_WritePin>

  /* De Initializing all the peripherals and clocks before switching*/
  HAL_RCC_DeInit();
 80008f4:	f002 fe7a 	bl	80035ec <HAL_RCC_DeInit>
  HAL_DeInit();
 80008f8:	f001 fa04 	bl	8001d04 <HAL_DeInit>
  HAL_UART_DeInit(&huart1);
 80008fc:	4812      	ldr	r0, [pc, #72]	@ (8000948 <goto_application+0x70>)
 80008fe:	f003 fa63 	bl	8003dc8 <HAL_UART_DeInit>
  HAL_SPI_DeInit(&hspi1);
 8000902:	4812      	ldr	r0, [pc, #72]	@ (800094c <goto_application+0x74>)
 8000904:	f002 ffc9 	bl	800389a <HAL_SPI_DeInit>


  // Set Stack pointer
  __set_MSP(*(volatile uint32_t*) OTA_APP_FLASH_ADDR);
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <goto_application+0x78>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	f383 8808 	msr	MSP, r3
}
 8000914:	bf00      	nop

  // clear SysTick timer
  SysTick->CTRL = 0;
 8000916:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <goto_application+0x7c>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 800091c:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <goto_application+0x7c>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8000922:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <goto_application+0x7c>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]

  // Set Interrupt Vector OFFSET
  SCB->VTOR = FLASH_BASE | OTA_APP_FLASH_ADDR;
 8000928:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <goto_application+0x80>)
 800092a:	4a09      	ldr	r2, [pc, #36]	@ (8000950 <goto_application+0x78>)
 800092c:	609a      	str	r2, [r3, #8]
  /* Jump to application */
  app_reset_handler();    //call the app reset handler
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4798      	blx	r3
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	08005b68 	.word	0x08005b68
 8000940:	08020004 	.word	0x08020004
 8000944:	40020400 	.word	0x40020400
 8000948:	200000ec 	.word	0x200000ec
 800094c:	20000094 	.word	0x20000094
 8000950:	08020000 	.word	0x08020000
 8000954:	e000e010 	.word	0xe000e010
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <_write>:
	return len;
}
#else

int _write(int file, char *ptr, int len)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
	ST7735_WriteDebugString(ptr);
 8000968:	68b8      	ldr	r0, [r7, #8]
 800096a:	f001 f93b 	bl	8001be4 <ST7735_WriteDebugString>

	return len;
 800096e:	687b      	ldr	r3, [r7, #4]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	4a0f      	ldr	r2, [pc, #60]	@ (80009d0 <HAL_MspInit+0x4c>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000998:	6453      	str	r3, [r2, #68]	@ 0x44
 800099a:	4b0d      	ldr	r3, [pc, #52]	@ (80009d0 <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	4a08      	ldr	r2, [pc, #32]	@ (80009d0 <HAL_MspInit+0x4c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	@ 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a19      	ldr	r2, [pc, #100]	@ (8000a58 <HAL_SPI_MspInit+0x84>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d12b      	bne.n	8000a4e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <HAL_SPI_MspInit+0x88>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	4a17      	ldr	r2, [pc, #92]	@ (8000a5c <HAL_SPI_MspInit+0x88>)
 8000a00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a06:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <HAL_SPI_MspInit+0x88>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <HAL_SPI_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a10      	ldr	r2, [pc, #64]	@ (8000a5c <HAL_SPI_MspInit+0x88>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <HAL_SPI_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a2e:	23a0      	movs	r3, #160	@ 0xa0
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a3e:	2305      	movs	r3, #5
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <HAL_SPI_MspInit+0x8c>)
 8000a4a:	f001 fedd 	bl	8002808 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	@ 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40013000 	.word	0x40013000
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020000 	.word	0x40020000

08000a64 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a08      	ldr	r2, [pc, #32]	@ (8000a94 <HAL_SPI_MspDeInit+0x30>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d109      	bne.n	8000a8a <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000a76:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <HAL_SPI_MspDeInit+0x34>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7a:	4a07      	ldr	r2, [pc, #28]	@ (8000a98 <HAL_SPI_MspDeInit+0x34>)
 8000a7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a80:	6453      	str	r3, [r2, #68]	@ 0x44

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 8000a82:	21a0      	movs	r1, #160	@ 0xa0
 8000a84:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <HAL_SPI_MspDeInit+0x38>)
 8000a86:	f002 f843 	bl	8002b10 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40013000 	.word	0x40013000
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b34 <HAL_UART_MspInit+0x94>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d134      	bne.n	8000b2c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <HAL_UART_MspInit+0x98>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	4a1b      	ldr	r2, [pc, #108]	@ (8000b38 <HAL_UART_MspInit+0x98>)
 8000acc:	f043 0310 	orr.w	r3, r3, #16
 8000ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad2:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <HAL_UART_MspInit+0x98>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	f003 0310 	and.w	r3, r3, #16
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <HAL_UART_MspInit+0x98>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a14      	ldr	r2, [pc, #80]	@ (8000b38 <HAL_UART_MspInit+0x98>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <HAL_UART_MspInit+0x98>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000afa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	4809      	ldr	r0, [pc, #36]	@ (8000b3c <HAL_UART_MspInit+0x9c>)
 8000b18:	f001 fe76 	bl	8002808 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2025      	movs	r0, #37	@ 0x25
 8000b22:	f001 faae 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b26:	2025      	movs	r0, #37	@ 0x25
 8000b28:	f001 fac7 	bl	80020ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	@ 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40011000 	.word	0x40011000
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000

08000b40 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <HAL_UART_MspDeInit+0x38>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d10d      	bne.n	8000b6e <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <HAL_UART_MspDeInit+0x3c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	4a09      	ldr	r2, [pc, #36]	@ (8000b7c <HAL_UART_MspDeInit+0x3c>)
 8000b58:	f023 0310 	bic.w	r3, r3, #16
 8000b5c:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000b5e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000b62:	4807      	ldr	r0, [pc, #28]	@ (8000b80 <HAL_UART_MspDeInit+0x40>)
 8000b64:	f001 ffd4 	bl	8002b10 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000b68:	2025      	movs	r0, #37	@ 0x25
 8000b6a:	f001 fab4 	bl	80020d6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40011000 	.word	0x40011000
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <NMI_Handler+0x4>

08000b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bda:	f001 f8f9 	bl	8001dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <USART1_IRQHandler+0x10>)
 8000bea:	f003 f91f 	bl	8003e2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200000ec 	.word	0x200000ec

08000bf8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	e00a      	b.n	8000c20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c0a:	f3af 8000 	nop.w
 8000c0e:	4601      	mov	r1, r0
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	60ba      	str	r2, [r7, #8]
 8000c16:	b2ca      	uxtb	r2, r1
 8000c18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf0      	blt.n	8000c0a <_read+0x12>
  }

  return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <_isatty>:

int _isatty(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	@ (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f004 fa92 	bl	80051f4 <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20020000 	.word	0x20020000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	20000134 	.word	0x20000134
 8000d04:	20000ad8 	.word	0x20000ad8

08000d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <SystemInit+0x20>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <SystemInit+0x20>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d30:	f7ff ffea 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	@ (8000d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	@ (8000d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f004 fa51 	bl	8005200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5e:	f7ff fc07 	bl	8000570 <main>
  bx  lr    
 8000d62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d70:	0800651c 	.word	0x0800651c
  ldr r2, =_sbss
 8000d74:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d78:	20000ad8 	.word	0x20000ad8

08000d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC_IRQHandler>
	...

08000d80 <crc32b>:
instructions, where n is the number of bytes in the input message. It
should be doable in 4 + 61n instructions.
   If the inner loop is strung out (approx. 5*8 = 40 instructions),
it would take about 6 + 46n instructions. */

uint32_t crc32b(unsigned char *message,uint16_t usDataLen) {
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
   uint16_t i;
   uint16_t j;
   uint32_t byte, crc, mask;

   i = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	82fb      	strh	r3, [r7, #22]
   crc = 0xFFFFFFFF;
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295
 8000d94:	613b      	str	r3, [r7, #16]
    while (usDataLen--) /* pass through message buffer  */
 8000d96:	e020      	b.n	8000dda <crc32b+0x5a>
    {
      byte = message[i];            // Get next byte.
 8000d98:	8afb      	ldrh	r3, [r7, #22]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
      crc = crc ^ byte;
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4053      	eors	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
      for (j = 0; j <=7; j++) {    // Do eight times.
 8000daa:	2300      	movs	r3, #0
 8000dac:	82bb      	strh	r3, [r7, #20]
 8000dae:	e00e      	b.n	8000dce <crc32b+0x4e>
         mask = -(crc & 1);
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	425b      	negs	r3, r3
 8000db8:	60bb      	str	r3, [r7, #8]
         crc = (crc >> 1) ^ (0xEDB88320 & mask);
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	085a      	lsrs	r2, r3, #1
 8000dbe:	68b9      	ldr	r1, [r7, #8]
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <crc32b+0x74>)
 8000dc2:	400b      	ands	r3, r1
 8000dc4:	4053      	eors	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
      for (j = 0; j <=7; j++) {    // Do eight times.
 8000dc8:	8abb      	ldrh	r3, [r7, #20]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	82bb      	strh	r3, [r7, #20]
 8000dce:	8abb      	ldrh	r3, [r7, #20]
 8000dd0:	2b07      	cmp	r3, #7
 8000dd2:	d9ed      	bls.n	8000db0 <crc32b+0x30>
      }
      i = i + 1;
 8000dd4:	8afb      	ldrh	r3, [r7, #22]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	82fb      	strh	r3, [r7, #22]
    while (usDataLen--) /* pass through message buffer  */
 8000dda:	887b      	ldrh	r3, [r7, #2]
 8000ddc:	1e5a      	subs	r2, r3, #1
 8000dde:	807a      	strh	r2, [r7, #2]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1d9      	bne.n	8000d98 <crc32b+0x18>
   }
   return ~crc;
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	43db      	mvns	r3, r3
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	371c      	adds	r7, #28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	edb88320 	.word	0xedb88320

08000df8 <receive_data>:
 * Finally after this basic check and collecting all the data from PC tool, length (variable index) is passed back.
 * CRC is not checked in this function so as NOT TO disturb the reception activity
 * In this version, TIMEOUT management of the communication line is not considered
 *****************************************************************/
uint16_t receive_data()		//return the length of packet
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
  uint16_t data_len=0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	807b      	strh	r3, [r7, #2]
  uint16_t index=0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	80fb      	strh	r3, [r7, #6]
  uint16_t i=0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	80bb      	strh	r3, [r7, #4]
  do	//need timeout management.
    {
      /*SOF - 1BYTE   */
      while( !( USART1->SR & USART_SR_RXNE )) {};
 8000e0a:	bf00      	nop
 8000e0c:	4b52      	ldr	r3, [pc, #328]	@ (8000f58 <receive_data+0x160>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0320 	and.w	r3, r3, #32
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f9      	beq.n	8000e0c <receive_data+0x14>
      Rx_Buffer[index++] = USART1->DR;
 8000e18:	4b4f      	ldr	r3, [pc, #316]	@ (8000f58 <receive_data+0x160>)
 8000e1a:	6859      	ldr	r1, [r3, #4]
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	1c5a      	adds	r2, r3, #1
 8000e20:	80fa      	strh	r2, [r7, #6]
 8000e22:	461a      	mov	r2, r3
 8000e24:	b2c9      	uxtb	r1, r1
 8000e26:	4b4d      	ldr	r3, [pc, #308]	@ (8000f5c <receive_data+0x164>)
 8000e28:	5499      	strb	r1, [r3, r2]
      if(Rx_Buffer[0] != DEF_OTA_SOF)
 8000e2a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f5c <receive_data+0x164>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2baa      	cmp	r3, #170	@ 0xaa
 8000e30:	d002      	beq.n	8000e38 <receive_data+0x40>
	{
	  index =0;/* SOF error */
 8000e32:	2300      	movs	r3, #0
 8000e34:	80fb      	strh	r3, [r7, #6]
	  break;
 8000e36:	e082      	b.n	8000f3e <receive_data+0x146>
	}

      /* Packet Type - 1 BYTE */
      while( !( USART1->SR & USART_SR_RXNE )) {};
 8000e38:	bf00      	nop
 8000e3a:	4b47      	ldr	r3, [pc, #284]	@ (8000f58 <receive_data+0x160>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0320 	and.w	r3, r3, #32
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f9      	beq.n	8000e3a <receive_data+0x42>
      Rx_Buffer[index++] = USART1->DR;
 8000e46:	4b44      	ldr	r3, [pc, #272]	@ (8000f58 <receive_data+0x160>)
 8000e48:	6859      	ldr	r1, [r3, #4]
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	80fa      	strh	r2, [r7, #6]
 8000e50:	461a      	mov	r2, r3
 8000e52:	b2c9      	uxtb	r1, r1
 8000e54:	4b41      	ldr	r3, [pc, #260]	@ (8000f5c <receive_data+0x164>)
 8000e56:	5499      	strb	r1, [r3, r2]

      /* PACKET LENGTH - 2 BYTE*/
      for(i =1; i<=2;i++)
 8000e58:	2301      	movs	r3, #1
 8000e5a:	80bb      	strh	r3, [r7, #4]
 8000e5c:	e012      	b.n	8000e84 <receive_data+0x8c>
	{

	  while( !( USART1->SR & USART_SR_RXNE )) {};
 8000e5e:	bf00      	nop
 8000e60:	4b3d      	ldr	r3, [pc, #244]	@ (8000f58 <receive_data+0x160>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0320 	and.w	r3, r3, #32
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0f9      	beq.n	8000e60 <receive_data+0x68>
	  Rx_Buffer[index++] = USART1->DR;
 8000e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f58 <receive_data+0x160>)
 8000e6e:	6859      	ldr	r1, [r3, #4]
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	80fa      	strh	r2, [r7, #6]
 8000e76:	461a      	mov	r2, r3
 8000e78:	b2c9      	uxtb	r1, r1
 8000e7a:	4b38      	ldr	r3, [pc, #224]	@ (8000f5c <receive_data+0x164>)
 8000e7c:	5499      	strb	r1, [r3, r2]
      for(i =1; i<=2;i++)
 8000e7e:	88bb      	ldrh	r3, [r7, #4]
 8000e80:	3301      	adds	r3, #1
 8000e82:	80bb      	strh	r3, [r7, #4]
 8000e84:	88bb      	ldrh	r3, [r7, #4]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d9e9      	bls.n	8000e5e <receive_data+0x66>

	}
      data_len = (Rx_Buffer[index-1] << 8) | (Rx_Buffer[index-2]);	//bitwise OR
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	4a33      	ldr	r2, [pc, #204]	@ (8000f5c <receive_data+0x164>)
 8000e90:	5cd3      	ldrb	r3, [r2, r3]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4930      	ldr	r1, [pc, #192]	@ (8000f5c <receive_data+0x164>)
 8000e9c:	5ccb      	ldrb	r3, [r1, r3]
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	807b      	strh	r3, [r7, #2]

      /* DATA or COMMAND */
      for(i =1; i<=data_len;i++)
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	80bb      	strh	r3, [r7, #4]
 8000eaa:	e012      	b.n	8000ed2 <receive_data+0xda>
	{
	  while( !( USART1->SR & USART_SR_RXNE )) {};
 8000eac:	bf00      	nop
 8000eae:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <receive_data+0x160>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0320 	and.w	r3, r3, #32
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f9      	beq.n	8000eae <receive_data+0xb6>
	  Rx_Buffer[index++] = USART1->DR;
 8000eba:	4b27      	ldr	r3, [pc, #156]	@ (8000f58 <receive_data+0x160>)
 8000ebc:	6859      	ldr	r1, [r3, #4]
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	80fa      	strh	r2, [r7, #6]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	b2c9      	uxtb	r1, r1
 8000ec8:	4b24      	ldr	r3, [pc, #144]	@ (8000f5c <receive_data+0x164>)
 8000eca:	5499      	strb	r1, [r3, r2]
      for(i =1; i<=data_len;i++)
 8000ecc:	88bb      	ldrh	r3, [r7, #4]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	80bb      	strh	r3, [r7, #4]
 8000ed2:	88ba      	ldrh	r2, [r7, #4]
 8000ed4:	887b      	ldrh	r3, [r7, #2]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d9e8      	bls.n	8000eac <receive_data+0xb4>
	}

      /* CRC 4 BYTES*/
      for(i =1; i<=4;i++)
 8000eda:	2301      	movs	r3, #1
 8000edc:	80bb      	strh	r3, [r7, #4]
 8000ede:	e012      	b.n	8000f06 <receive_data+0x10e>
	{
	  while( !( USART1->SR & USART_SR_RXNE )) {};
 8000ee0:	bf00      	nop
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <receive_data+0x160>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0320 	and.w	r3, r3, #32
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f9      	beq.n	8000ee2 <receive_data+0xea>
	  Rx_Buffer[index++] = USART1->DR;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <receive_data+0x160>)
 8000ef0:	6859      	ldr	r1, [r3, #4]
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	80fa      	strh	r2, [r7, #6]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	b2c9      	uxtb	r1, r1
 8000efc:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <receive_data+0x164>)
 8000efe:	5499      	strb	r1, [r3, r2]
      for(i =1; i<=4;i++)
 8000f00:	88bb      	ldrh	r3, [r7, #4]
 8000f02:	3301      	adds	r3, #1
 8000f04:	80bb      	strh	r3, [r7, #4]
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d9e9      	bls.n	8000ee0 <receive_data+0xe8>
	}

      /* EOF */
      while( !( USART1->SR & USART_SR_RXNE )) {};
 8000f0c:	bf00      	nop
 8000f0e:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <receive_data+0x160>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0320 	and.w	r3, r3, #32
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f9      	beq.n	8000f0e <receive_data+0x116>
      Rx_Buffer[index++] = USART1->DR;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <receive_data+0x160>)
 8000f1c:	6859      	ldr	r1, [r3, #4]
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	1c5a      	adds	r2, r3, #1
 8000f22:	80fa      	strh	r2, [r7, #6]
 8000f24:	461a      	mov	r2, r3
 8000f26:	b2c9      	uxtb	r1, r1
 8000f28:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <receive_data+0x164>)
 8000f2a:	5499      	strb	r1, [r3, r2]
      if(Rx_Buffer[index-1] != DEF_OTA_EOF)
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <receive_data+0x164>)
 8000f32:	5cd3      	ldrb	r3, [r2, r3]
 8000f34:	2bbb      	cmp	r3, #187	@ 0xbb
 8000f36:	d002      	beq.n	8000f3e <receive_data+0x146>
	{
	  index =0;/* EOF error */
 8000f38:	2300      	movs	r3, #0
 8000f3a:	80fb      	strh	r3, [r7, #6]
	  break;
 8000f3c:	bf00      	nop
	}
    }while (0);

  if(ota_state ==ENM_OTA_STATE_DATA)
 8000f3e:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <receive_data+0x168>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	d101      	bne.n	8000f4a <receive_data+0x152>
    {
      uint16_t myindex = index;
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	803b      	strh	r3, [r7, #0]
    }
  return index;
 8000f4a:	88fb      	ldrh	r3, [r7, #6]

}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	40011000 	.word	0x40011000
 8000f5c:	20000148 	.word	0x20000148
 8000f60:	20000004 	.word	0x20000004

08000f64 <ota_begin>:
 * CRC processing on the received data packet is performed before processing of data
 * Based on the return of ota_process_data, response is sent to PC Tool.
 * The expected change of states and their meanings are explained in function ota_process_data
 *****************************************************************/
ENM_OTA_RET_ ota_begin(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
  uint32_t crcvalue=0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
  ENM_OTA_RET_ ret = ENM_OTA_RET_ERR;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]

  //clear the buffer
  uint16_t PacketLength;

  /* Reset the variables */
  ota_fw_total_size    = 0u;
 8000f72:	4b2e      	ldr	r3, [pc, #184]	@ (800102c <ota_begin+0xc8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
  ota_fw_received_size = 0u;
 8000f78:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <ota_begin+0xcc>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
  ota_fw_crc           = 0u;
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001034 <ota_begin+0xd0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
  ota_state = ENM_OTA_STATE_START;
 8000f84:	4b2c      	ldr	r3, [pc, #176]	@ (8001038 <ota_begin+0xd4>)
 8000f86:	2202      	movs	r2, #2
 8000f88:	701a      	strb	r2, [r3, #0]
  do
    {
      memset( Rx_Buffer, 0, DEF_OTA_PACKET_MAX_SIZE );
 8000f8a:	f240 4209 	movw	r2, #1033	@ 0x409
 8000f8e:	2100      	movs	r1, #0
 8000f90:	482a      	ldr	r0, [pc, #168]	@ (800103c <ota_begin+0xd8>)
 8000f92:	f004 f8d1 	bl	8005138 <memset>
      PacketLength=receive_data();
 8000f96:	f7ff ff2f 	bl	8000df8 <receive_data>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
      if (PacketLength <= 0)
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d105      	bne.n	8000fb0 <ota_begin+0x4c>
	{
	  ret=ENM_OTA_RET_ERR;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]
	  printf("RECEIVE ERR!!\n");
 8000fa8:	4825      	ldr	r0, [pc, #148]	@ (8001040 <ota_begin+0xdc>)
 8000faa:	f003 ffe5 	bl	8004f78 <puts>
	  break;	//come out of while loop
 8000fae:	e038      	b.n	8001022 <ota_begin+0xbe>
	}
      uint32_t pktcrc = (Rx_Buffer[PacketLength-2]<<24) |
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	3b02      	subs	r3, #2
 8000fb4:	4a21      	ldr	r2, [pc, #132]	@ (800103c <ota_begin+0xd8>)
 8000fb6:	5cd3      	ldrb	r3, [r2, r3]
 8000fb8:	061a      	lsls	r2, r3, #24
	  (Rx_Buffer[PacketLength-3]<<16) |
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	491f      	ldr	r1, [pc, #124]	@ (800103c <ota_begin+0xd8>)
 8000fc0:	5ccb      	ldrb	r3, [r1, r3]
 8000fc2:	041b      	lsls	r3, r3, #16
      uint32_t pktcrc = (Rx_Buffer[PacketLength-2]<<24) |
 8000fc4:	431a      	orrs	r2, r3
	  (Rx_Buffer[PacketLength-4]<<8) |
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	3b04      	subs	r3, #4
 8000fca:	491c      	ldr	r1, [pc, #112]	@ (800103c <ota_begin+0xd8>)
 8000fcc:	5ccb      	ldrb	r3, [r1, r3]
 8000fce:	021b      	lsls	r3, r3, #8
	  (Rx_Buffer[PacketLength-3]<<16) |
 8000fd0:	4313      	orrs	r3, r2
	  (Rx_Buffer[PacketLength-5]);
 8000fd2:	88fa      	ldrh	r2, [r7, #6]
 8000fd4:	3a05      	subs	r2, #5
 8000fd6:	4919      	ldr	r1, [pc, #100]	@ (800103c <ota_begin+0xd8>)
 8000fd8:	5c8a      	ldrb	r2, [r1, r2]
	  (Rx_Buffer[PacketLength-4]<<8) |
 8000fda:	4313      	orrs	r3, r2
      uint32_t pktcrc = (Rx_Buffer[PacketLength-2]<<24) |
 8000fdc:	603b      	str	r3, [r7, #0]
      crcvalue= crc32b(Rx_Buffer,PacketLength-5);
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	3b05      	subs	r3, #5
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4815      	ldr	r0, [pc, #84]	@ (800103c <ota_begin+0xd8>)
 8000fe8:	f7ff feca 	bl	8000d80 <crc32b>
 8000fec:	60b8      	str	r0, [r7, #8]
      if (crcvalue != pktcrc)
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d005      	beq.n	8001002 <ota_begin+0x9e>
	{
	  printf("CRC error\n");
 8000ff6:	4813      	ldr	r0, [pc, #76]	@ (8001044 <ota_begin+0xe0>)
 8000ff8:	f003 ffbe 	bl	8004f78 <puts>
	  ret= ENM_OTA_RET_ERR;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
	  break;
 8001000:	e00f      	b.n	8001022 <ota_begin+0xbe>
	}

      //Else Proceed further
      ret =ota_process_data(Rx_Buffer, PacketLength);
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	4619      	mov	r1, r3
 8001006:	480d      	ldr	r0, [pc, #52]	@ (800103c <ota_begin+0xd8>)
 8001008:	f000 f81e 	bl	8001048 <ota_process_data>
 800100c:	4603      	mov	r3, r0
 800100e:	73fb      	strb	r3, [r7, #15]
      if(!ret)
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d004      	beq.n	8001020 <ota_begin+0xbc>
//	{
//	  ota_send_resp(DEF_OTA_NACK);
//	  ret = ENM_OTA_RET_ERR;
//	  break;
//	}
    }while(ota_state != ENM_OTA_STATE_IDLE);
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <ota_begin+0xd4>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d1b5      	bne.n	8000f8a <ota_begin+0x26>
 800101e:	e000      	b.n	8001022 <ota_begin+0xbe>
	  break;
 8001020:	bf00      	nop
  return ret;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000138 	.word	0x20000138
 8001030:	20000140 	.word	0x20000140
 8001034:	2000013c 	.word	0x2000013c
 8001038:	20000004 	.word	0x20000004
 800103c:	20000148 	.word	0x20000148
 8001040:	08005b80 	.word	0x08005b80
 8001044:	08005b90 	.word	0x08005b90

08001048 <ota_process_data>:
 *	- Received data is checked if a start command is received,
 * 	- On verification, STATE is changed to OTA_STATE_IDLE and breaks out of this function with return OK, else Error.
 *
 *****************************************************************/
static ENM_OTA_RET_ ota_process_data( uint8_t *buf, uint16_t len )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08e      	sub	sp, #56	@ 0x38
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
  //	uint32_t crcvalue=0;
  ENM_OTA_RET_ ret = ENM_OTA_RET_ERR;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  do
    {
      if( ( buf == NULL ) || ( len == 0u) )
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <ota_process_data+0x1e>
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d103      	bne.n	800106e <ota_process_data+0x26>
	{
	  printf("BUFFER EMPTY!!\n");
 8001066:	4895      	ldr	r0, [pc, #596]	@ (80012bc <ota_process_data+0x274>)
 8001068:	f003 ff86 	bl	8004f78 <puts>
	  break;
 800106c:	e120      	b.n	80012b0 <ota_process_data+0x268>
	}

      //Check we received OTA Abort command
      STU_OTA_COMMAND_ *cmd = (STU_OTA_COMMAND_*)buf;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	633b      	str	r3, [r7, #48]	@ 0x30
      if( (cmd->packet_type == ENM_OTA_PKT_TYP_CMD) &&
 8001072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001074:	785b      	ldrb	r3, [r3, #1]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d107      	bne.n	800108a <ota_process_data+0x42>
	  cmd->cmd == ENM_OTA_CMD_ABORT )
 800107a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800107c:	791b      	ldrb	r3, [r3, #4]
      if( (cmd->packet_type == ENM_OTA_PKT_TYP_CMD) &&
 800107e:	2b03      	cmp	r3, #3
 8001080:	d103      	bne.n	800108a <ota_process_data+0x42>
	{
	  //received OTA Abort command. Stop the process
	  printf("ABORT CMD!!\n");
 8001082:	488f      	ldr	r0, [pc, #572]	@ (80012c0 <ota_process_data+0x278>)
 8001084:	f003 ff78 	bl	8004f78 <puts>
	  break;
 8001088:	e112      	b.n	80012b0 <ota_process_data+0x268>
	}

      switch( ota_state )
 800108a:	4b8e      	ldr	r3, [pc, #568]	@ (80012c4 <ota_process_data+0x27c>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	3b01      	subs	r3, #1
 8001090:	2b0b      	cmp	r3, #11
 8001092:	f200 8104 	bhi.w	800129e <ota_process_data+0x256>
 8001096:	a201      	add	r2, pc, #4	@ (adr r2, 800109c <ota_process_data+0x54>)
 8001098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109c:	080010cd 	.word	0x080010cd
 80010a0:	080010db 	.word	0x080010db
 80010a4:	0800110d 	.word	0x0800110d
 80010a8:	0800129f 	.word	0x0800129f
 80010ac:	0800129f 	.word	0x0800129f
 80010b0:	0800129f 	.word	0x0800129f
 80010b4:	080011eb 	.word	0x080011eb
 80010b8:	08001277 	.word	0x08001277
 80010bc:	0800129f 	.word	0x0800129f
 80010c0:	0800129f 	.word	0x0800129f
 80010c4:	08001145 	.word	0x08001145
 80010c8:	080011c9 	.word	0x080011c9
      {
	case ENM_OTA_STATE_IDLE:
	  {
	    printf("STATE=IDLE!!\n");
 80010cc:	487e      	ldr	r0, [pc, #504]	@ (80012c8 <ota_process_data+0x280>)
 80010ce:	f003 ff53 	bl	8004f78 <puts>
	    ret = ENM_OTA_RET_OK;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  }
	  break;
 80010d8:	e0ea      	b.n	80012b0 <ota_process_data+0x268>

	case ENM_OTA_STATE_START:
	  {
	    STU_OTA_COMMAND_ *cmd = (STU_OTA_COMMAND_*)buf;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60fb      	str	r3, [r7, #12]
	    if( (cmd->packet_type == ENM_OTA_PKT_TYP_CMD) &&
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d10c      	bne.n	8001100 <ota_process_data+0xb8>
		(cmd->cmd == ENM_OTA_CMD_START) )
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	791b      	ldrb	r3, [r3, #4]
	    if( (cmd->packet_type == ENM_OTA_PKT_TYP_CMD) &&
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d108      	bne.n	8001100 <ota_process_data+0xb8>
	      {
		printf("STATE=START!!\n");
 80010ee:	4877      	ldr	r0, [pc, #476]	@ (80012cc <ota_process_data+0x284>)
 80010f0:	f003 ff42 	bl	8004f78 <puts>
		ota_state = ENM_OTA_STATE_HEADER;
 80010f4:	4b73      	ldr	r3, [pc, #460]	@ (80012c4 <ota_process_data+0x27c>)
 80010f6:	2203      	movs	r2, #3
 80010f8:	701a      	strb	r2, [r3, #0]
		ret = ENM_OTA_RET_OK;
 80010fa:	2301      	movs	r3, #1
 80010fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	      }
	    ota_send_resp(ret);
 8001100:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f8fb 	bl	8001300 <ota_send_resp>
	  }
	  break;
 800110a:	e0d1      	b.n	80012b0 <ota_process_data+0x268>

	case ENM_OTA_STATE_HEADER:
	  {
	    STU_OTA_HEADER_ *header = (STU_OTA_HEADER_*)buf;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	613b      	str	r3, [r7, #16]
	    if( header->packet_type == ENM_OTA_PKT_TYP_HEADER )
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	785b      	ldrb	r3, [r3, #1]
 8001114:	2b03      	cmp	r3, #3
 8001116:	d10f      	bne.n	8001138 <ota_process_data+0xf0>
	      {
		/* Store FW details */
		ota_fw_total_size = header->package_size;
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4a6c      	ldr	r2, [pc, #432]	@ (80012d0 <ota_process_data+0x288>)
 800111e:	6013      	str	r3, [r2, #0]
		//ota_fw_crc        = header->meta_data.package_crc;
		printf("FW size= %ld\n",ota_fw_total_size);
 8001120:	4b6b      	ldr	r3, [pc, #428]	@ (80012d0 <ota_process_data+0x288>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	486b      	ldr	r0, [pc, #428]	@ (80012d4 <ota_process_data+0x28c>)
 8001128:	f003 febe 	bl	8004ea8 <iprintf>
		ota_state = ENM_OTA_STATE_BKP_HDR;
 800112c:	4b65      	ldr	r3, [pc, #404]	@ (80012c4 <ota_process_data+0x27c>)
 800112e:	220b      	movs	r2, #11
 8001130:	701a      	strb	r2, [r3, #0]
		ret = ENM_OTA_RET_OK;
 8001132:	2301      	movs	r3, #1
 8001134:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	      }
	    ota_send_resp(ret);
 8001138:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800113c:	4618      	mov	r0, r3
 800113e:	f000 f8df 	bl	8001300 <ota_send_resp>
	    break;
 8001142:	e0b5      	b.n	80012b0 <ota_process_data+0x268>

	case ENM_OTA_STATE_BKP_HDR:
	  /*
	   * PC application will send me a command to send backup
	   */
	  STU_OTA_COMMAND_ *cmd = (STU_OTA_COMMAND_*)buf;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	62bb      	str	r3, [r7, #40]	@ 0x28
	  if( (cmd->packet_type == ENM_OTA_PKT_TYP_CMD) &&
 8001148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800114a:	785b      	ldrb	r3, [r3, #1]
 800114c:	2b01      	cmp	r3, #1
 800114e:	f040 80aa 	bne.w	80012a6 <ota_process_data+0x25e>
	      (cmd->cmd == ENM_OTA_CMD_RQST_FW_HDR) )
 8001152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001154:	791b      	ldrb	r3, [r3, #4]
	  if( (cmd->packet_type == ENM_OTA_PKT_TYP_CMD) &&
 8001156:	2b04      	cmp	r3, #4
 8001158:	f040 80a5 	bne.w	80012a6 <ota_process_data+0x25e>
	    {
	      printf("STATE=APP_HDR!!\n");
 800115c:	485e      	ldr	r0, [pc, #376]	@ (80012d8 <ota_process_data+0x290>)
 800115e:	f003 ff0b 	bl	8004f78 <puts>
	      volatile uint32_t *checkAPP = (uint32_t *)(OTA_APP_FLASH_ADDR);
 8001162:	4b5e      	ldr	r3, [pc, #376]	@ (80012dc <ota_process_data+0x294>)
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
	      volatile uint32_t *checkEnd = (uint32_t *)(OTA_APP_CONFIG_END_ADDR);
 8001166:	4b5e      	ldr	r3, [pc, #376]	@ (80012e0 <ota_process_data+0x298>)
 8001168:	623b      	str	r3, [r7, #32]

	      if(*checkAPP == (uint32_t) (&_estack))
 800116a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a5d      	ldr	r2, [pc, #372]	@ (80012e4 <ota_process_data+0x29c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d107      	bne.n	8001184 <ota_process_data+0x13c>
		{
		  //APPLICATION IS PRESENT, SO GET PC ACK AND TRANSFER APPLICATION TO PC
		  App_pakage_size = (*checkEnd - OTA_APP_FLASH_ADDR);
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f103 4377 	add.w	r3, r3, #4143972352	@ 0xf7000000
 800117c:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 8001180:	4a59      	ldr	r2, [pc, #356]	@ (80012e8 <ota_process_data+0x2a0>)
 8001182:	6013      	str	r3, [r2, #0]
		}
	      ret = send_ota_fw_header(App_pakage_size);
 8001184:	4b58      	ldr	r3, [pc, #352]	@ (80012e8 <ota_process_data+0x2a0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fa03 	bl	8001594 <send_ota_fw_header>
 800118e:	4603      	mov	r3, r0
 8001190:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	      if (!ret)
 8001194:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001198:	2b00      	cmp	r3, #0
 800119a:	d106      	bne.n	80011aa <ota_process_data+0x162>
		{
		  printf("send_ota_fw_header Err\n");
 800119c:	4853      	ldr	r0, [pc, #332]	@ (80012ec <ota_process_data+0x2a4>)
 800119e:	f003 feeb 	bl	8004f78 <puts>
		  ret = ENM_OTA_RET_ERR;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		  break;
 80011a8:	e082      	b.n	80012b0 <ota_process_data+0x268>
		}
	      ret = ENM_OTA_RET_OK;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	      if (App_pakage_size==0)
 80011b0:	4b4d      	ldr	r3, [pc, #308]	@ (80012e8 <ota_process_data+0x2a0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <ota_process_data+0x178>
		{
		  ota_state = ENM_OTA_STATE_DATA;
 80011b8:	4b42      	ldr	r3, [pc, #264]	@ (80012c4 <ota_process_data+0x27c>)
 80011ba:	2207      	movs	r2, #7
 80011bc:	701a      	strb	r2, [r3, #0]
		}
	      else
		ota_state = ENM_OTA_STATE_BKP_DATA;
	    }
	  break;
 80011be:	e072      	b.n	80012a6 <ota_process_data+0x25e>
		ota_state = ENM_OTA_STATE_BKP_DATA;
 80011c0:	4b40      	ldr	r3, [pc, #256]	@ (80012c4 <ota_process_data+0x27c>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	701a      	strb	r2, [r3, #0]
	  break;
 80011c6:	e06e      	b.n	80012a6 <ota_process_data+0x25e>

	case ENM_OTA_STATE_BKP_DATA:
	  {
	    STU_OTA_COMMAND_ *cmd = (STU_OTA_COMMAND_*)buf;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    if( (cmd->packet_type == ENM_OTA_PKT_TYP_CMD) &&
 80011cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ce:	785b      	ldrb	r3, [r3, #1]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d16a      	bne.n	80012aa <ota_process_data+0x262>
		(cmd->cmd == ENM_OTA_CMD_RQST_FW_DATA) )
 80011d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d6:	791b      	ldrb	r3, [r3, #4]
	    if( (cmd->packet_type == ENM_OTA_PKT_TYP_CMD) &&
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d166      	bne.n	80012aa <ota_process_data+0x262>
	      {
		ret = Backup_APP(&App_pakage_size);
 80011dc:	4842      	ldr	r0, [pc, #264]	@ (80012e8 <ota_process_data+0x2a0>)
 80011de:	f000 fa1d 	bl	800161c <Backup_APP>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	      }

	  }
	  break;
 80011e8:	e05f      	b.n	80012aa <ota_process_data+0x262>

	case ENM_OTA_STATE_DATA:
	  {
	    STU_OTA_DATA_     *data     = (STU_OTA_DATA_*)buf;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	61bb      	str	r3, [r7, #24]
	    uint16_t          data_len = data->data_len;
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	789a      	ldrb	r2, [r3, #2]
 80011f2:	78db      	ldrb	r3, [r3, #3]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	4313      	orrs	r3, r2
 80011f8:	82fb      	strh	r3, [r7, #22]
	    HAL_StatusTypeDef ex;

	    printf("OTA STATE=DATA\n");
 80011fa:	483d      	ldr	r0, [pc, #244]	@ (80012f0 <ota_process_data+0x2a8>)
 80011fc:	f003 febc 	bl	8004f78 <puts>
	    if( data->packet_type == ENM_OTA_PKT_TYP_DATA )
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	785b      	ldrb	r3, [r3, #1]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d130      	bne.n	800126a <ota_process_data+0x222>
	      {
		/* write the chunk to the Flash (App location) */
		ex = write_data_to_flash_app( buf+4, data_len, ( ota_fw_received_size == 0) );
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	1d18      	adds	r0, r3, #4
 800120c:	4b39      	ldr	r3, [pc, #228]	@ (80012f4 <ota_process_data+0x2ac>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	bf0c      	ite	eq
 8001214:	2301      	moveq	r3, #1
 8001216:	2300      	movne	r3, #0
 8001218:	b2da      	uxtb	r2, r3
 800121a:	8afb      	ldrh	r3, [r7, #22]
 800121c:	4619      	mov	r1, r3
 800121e:	f000 f8d1 	bl	80013c4 <write_data_to_flash_app>
 8001222:	4603      	mov	r3, r0
 8001224:	757b      	strb	r3, [r7, #21]
		if( ex == HAL_OK )
 8001226:	7d7b      	ldrb	r3, [r7, #21]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d11e      	bne.n	800126a <ota_process_data+0x222>
		  {
		    printf("RCVD [%ld/%ld]",ota_fw_received_size/DEF_OTA_DATA_MAX_SIZE, ota_fw_total_size/DEF_OTA_DATA_MAX_SIZE);
 800122c:	4b31      	ldr	r3, [pc, #196]	@ (80012f4 <ota_process_data+0x2ac>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	0a99      	lsrs	r1, r3, #10
 8001232:	4b27      	ldr	r3, [pc, #156]	@ (80012d0 <ota_process_data+0x288>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	0a9b      	lsrs	r3, r3, #10
 8001238:	461a      	mov	r2, r3
 800123a:	482f      	ldr	r0, [pc, #188]	@ (80012f8 <ota_process_data+0x2b0>)
 800123c:	f003 fe34 	bl	8004ea8 <iprintf>
		    if( ota_fw_received_size >= ota_fw_total_size )
 8001240:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <ota_process_data+0x2ac>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b22      	ldr	r3, [pc, #136]	@ (80012d0 <ota_process_data+0x288>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	d30b      	bcc.n	8001264 <ota_process_data+0x21c>
		      {
			// before moving to END state, write the end of application at the address location
			Write_APP_End_Address(((uint32_t) OTA_APP_FLASH_ADDR) + ota_fw_total_size);
 800124c:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <ota_process_data+0x288>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001254:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8001258:	4618      	mov	r0, r3
 800125a:	f000 f92d 	bl	80014b8 <Write_APP_End_Address>
			//received the full data. So, move to end
			ota_state = ENM_OTA_STATE_END;
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <ota_process_data+0x27c>)
 8001260:	2208      	movs	r2, #8
 8001262:	701a      	strb	r2, [r3, #0]

		      }
		    ret = ENM_OTA_RET_OK;
 8001264:	2301      	movs	r3, #1
 8001266:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		  }
	      }
	    ota_send_resp(ret);
 800126a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f846 	bl	8001300 <ota_send_resp>
	  }
	  break;
 8001274:	e01c      	b.n	80012b0 <ota_process_data+0x268>

	case ENM_OTA_STATE_END:
	  {

	    STU_OTA_COMMAND_ *cmd = (STU_OTA_COMMAND_*)buf;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	61fb      	str	r3, [r7, #28]

	    if( (cmd->packet_type == ENM_OTA_PKT_TYP_CMD) && (cmd->cmd == ENM_OTA_CMD_END) )
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	785b      	ldrb	r3, [r3, #1]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d115      	bne.n	80012ae <ota_process_data+0x266>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	791b      	ldrb	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d111      	bne.n	80012ae <ota_process_data+0x266>
	      {

		printf("\nSTATE=END\n");
 800128a:	481c      	ldr	r0, [pc, #112]	@ (80012fc <ota_process_data+0x2b4>)
 800128c:	f003 fe74 	bl	8004f78 <puts>
		ota_state = ENM_OTA_STATE_IDLE;
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <ota_process_data+0x27c>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
		ret = ENM_OTA_RET_OK;
 8001296:	2301      	movs	r3, #1
 8001298:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	      }
	  }
	  break;
 800129c:	e007      	b.n	80012ae <ota_process_data+0x266>

	default:
	  {
	    /* Should not come here */
	    ret = ENM_OTA_RET_ERR;
 800129e:	2300      	movs	r3, #0
 80012a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  }
	  break;
 80012a4:	e004      	b.n	80012b0 <ota_process_data+0x268>
	  break;
 80012a6:	bf00      	nop
 80012a8:	e002      	b.n	80012b0 <ota_process_data+0x268>
	  break;
 80012aa:	bf00      	nop
 80012ac:	e000      	b.n	80012b0 <ota_process_data+0x268>
	  break;
 80012ae:	bf00      	nop
      };
    }while( false );

  return ret;
 80012b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3738      	adds	r7, #56	@ 0x38
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	08005b9c 	.word	0x08005b9c
 80012c0:	08005bac 	.word	0x08005bac
 80012c4:	20000004 	.word	0x20000004
 80012c8:	08005bb8 	.word	0x08005bb8
 80012cc:	08005bc8 	.word	0x08005bc8
 80012d0:	20000138 	.word	0x20000138
 80012d4:	08005bd8 	.word	0x08005bd8
 80012d8:	08005be8 	.word	0x08005be8
 80012dc:	08020000 	.word	0x08020000
 80012e0:	08008000 	.word	0x08008000
 80012e4:	20020000 	.word	0x20020000
 80012e8:	20000144 	.word	0x20000144
 80012ec:	08005bf8 	.word	0x08005bf8
 80012f0:	08005c10 	.word	0x08005c10
 80012f4:	20000140 	.word	0x20000140
 80012f8:	08005c20 	.word	0x08005c20
 80012fc:	08005c30 	.word	0x08005c30

08001300 <ota_send_resp>:
/****************************************************************
 * Function to send response to PC tool
 *
 *****************************************************************/
static void ota_send_resp( ENM_OTA_RET_ returnvalue)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  STU_OTA_RESP_ *rsp = (STU_OTA_RESP_*)Tx_Buffer;
 800130a:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <ota_send_resp+0x74>)
 800130c:	60fb      	str	r3, [r7, #12]
  memset( Tx_Buffer, 0, sizeof(STU_OTA_RESP_) );		//INSETAD OF CLEARING ENTIRE 1033 BYTES, NOW WE CLEAR ONLY REQUIRED BYTES
 800130e:	220a      	movs	r2, #10
 8001310:	2100      	movs	r1, #0
 8001312:	4818      	ldr	r0, [pc, #96]	@ (8001374 <ota_send_resp+0x74>)
 8001314:	f003 ff10 	bl	8005138 <memset>
  rsp->sof 			=DEF_OTA_SOF;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	22aa      	movs	r2, #170	@ 0xaa
 800131c:	701a      	strb	r2, [r3, #0]
  rsp->packet_type 		=ENM_OTA_PKT_TYP_RESPONSE;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2204      	movs	r2, #4
 8001322:	705a      	strb	r2, [r3, #1]
  rsp->data_len 		= sizeof(STU_OTA_RESP_);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2200      	movs	r2, #0
 8001328:	f042 020a 	orr.w	r2, r2, #10
 800132c:	709a      	strb	r2, [r3, #2]
 800132e:	2200      	movs	r2, #0
 8001330:	70da      	strb	r2, [r3, #3]
  rsp->status			= (returnvalue == ENM_OTA_RET_OK)? DEF_OTA_ACK : DEF_OTA_NACK;
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b01      	cmp	r3, #1
 8001336:	bf14      	ite	ne
 8001338:	2301      	movne	r3, #1
 800133a:	2300      	moveq	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	711a      	strb	r2, [r3, #4]
  rsp-> crc 			= 0;		/* TODO  */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	715a      	strb	r2, [r3, #5]
 800134a:	2200      	movs	r2, #0
 800134c:	719a      	strb	r2, [r3, #6]
 800134e:	2200      	movs	r2, #0
 8001350:	71da      	strb	r2, [r3, #7]
 8001352:	2200      	movs	r2, #0
 8001354:	721a      	strb	r2, [r3, #8]
  rsp->eof			= DEF_OTA_EOF;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	22bb      	movs	r2, #187	@ 0xbb
 800135a:	725a      	strb	r2, [r3, #9]

  //send response
  ota_send_chars(rsp->data_len,Tx_Buffer);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	885b      	ldrh	r3, [r3, #2]
 8001360:	b29b      	uxth	r3, r3
 8001362:	4904      	ldr	r1, [pc, #16]	@ (8001374 <ota_send_resp+0x74>)
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f807 	bl	8001378 <ota_send_chars>
//  for (unsigned char c=0; c<(rsp->data_len);c++)
//    {
//      while( !( USART1->SR & USART_SR_TXE) ) {};	//wait till transmit buffer is empty
//      USART1->DR = Rx_Buffer[c];
//    }
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000554 	.word	0x20000554

08001378 <ota_send_chars>:

static void ota_send_chars(uint16_t len, uint8_t *buf)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	80fb      	strh	r3, [r7, #6]
  //send response
    for (uint16_t c=0; c<(len);c++)
 8001384:	2300      	movs	r3, #0
 8001386:	81fb      	strh	r3, [r7, #14]
 8001388:	e00f      	b.n	80013aa <ota_send_chars+0x32>
      {
        while( !( USART1->SR & USART_SR_TXE) ) {};	//wait till transmit buffer is empty
 800138a:	bf00      	nop
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <ota_send_chars+0x48>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f9      	beq.n	800138c <ota_send_chars+0x14>
        USART1->DR = buf[c];
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	4413      	add	r3, r2
 800139e:	781a      	ldrb	r2, [r3, #0]
 80013a0:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <ota_send_chars+0x48>)
 80013a2:	605a      	str	r2, [r3, #4]
    for (uint16_t c=0; c<(len);c++)
 80013a4:	89fb      	ldrh	r3, [r7, #14]
 80013a6:	3301      	adds	r3, #1
 80013a8:	81fb      	strh	r3, [r7, #14]
 80013aa:	89fa      	ldrh	r2, [r7, #14]
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d3eb      	bcc.n	800138a <ota_send_chars+0x12>
      }
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	40011000 	.word	0x40011000

080013c4 <write_data_to_flash_app>:
 * Write data to the Application's actual flash location.
 *
 *****************************************************************/
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
						  uint16_t data_len, bool is_first_block )
{
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b08a      	sub	sp, #40	@ 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	4613      	mov	r3, r2
 80013d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;

  do
    {
      ret = HAL_FLASH_Unlock();
 80013d4:	f000 ff84 	bl	80022e0 <HAL_FLASH_Unlock>
 80013d8:	4603      	mov	r3, r0
 80013da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if( ret != HAL_OK )
 80013de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d157      	bne.n	8001496 <write_data_to_flash_app+0xd2>
	{
	  break;
	}

      //No need to erase every time. Erase only the first time.
      if( is_first_block )
 80013e6:	787b      	ldrb	r3, [r7, #1]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d019      	beq.n	8001420 <write_data_to_flash_app+0x5c>
	{

	  printf("Erasing Flash...\n");
 80013ec:	482f      	ldr	r0, [pc, #188]	@ (80014ac <write_data_to_flash_app+0xe8>)
 80013ee:	f003 fdc3 	bl	8004f78 <puts>

	  //Erase the Flash
	  FLASH_EraseInitTypeDef EraseInitStruct;
	  uint32_t SectorError;

	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
	  EraseInitStruct.Sector        = FLASH_SECTOR_5;
 80013f6:	2305      	movs	r3, #5
 80013f8:	617b      	str	r3, [r7, #20]
	  EraseInitStruct.NbSectors     = 1;                    //erase 2 sectors(5,6)
 80013fa:	2301      	movs	r3, #1
 80013fc:	61bb      	str	r3, [r7, #24]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80013fe:	2302      	movs	r3, #2
 8001400:	61fb      	str	r3, [r7, #28]

	  ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8001402:	f107 0208 	add.w	r2, r7, #8
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f001 f8d9 	bl	80025c4 <HAL_FLASHEx_Erase>
 8001412:	4603      	mov	r3, r0
 8001414:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  if( ret != HAL_OK )
 8001418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800141c:	2b00      	cmp	r3, #0
 800141e:	d13c      	bne.n	800149a <write_data_to_flash_app+0xd6>
	    {
	      break;
	    }
	}

      for(int i = 0; i < data_len; i++ )
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
 8001424:	e026      	b.n	8001474 <write_data_to_flash_app+0xb0>
	{
	  ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8001426:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <write_data_to_flash_app+0xec>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 800142e:	f501 3100 	add.w	r1, r1, #131072	@ 0x20000
				   (OTA_APP_FLASH_ADDR + ota_fw_received_size),
				   data[i]
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	4413      	add	r3, r2
 8001438:	781b      	ldrb	r3, [r3, #0]
	  ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2200      	movs	r2, #0
 800143e:	461c      	mov	r4, r3
 8001440:	4615      	mov	r5, r2
 8001442:	4622      	mov	r2, r4
 8001444:	462b      	mov	r3, r5
 8001446:	2000      	movs	r0, #0
 8001448:	f000 fef6 	bl	8002238 <HAL_FLASH_Program>
 800144c:	4603      	mov	r3, r0
 800144e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  );
	  if( ret == HAL_OK )
 8001452:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001456:	2b00      	cmp	r3, #0
 8001458:	d105      	bne.n	8001466 <write_data_to_flash_app+0xa2>
	    {
	      //update the data count
	      ota_fw_received_size += 1;
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <write_data_to_flash_app+0xec>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <write_data_to_flash_app+0xec>)
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	e003      	b.n	800146e <write_data_to_flash_app+0xaa>
	    }
	  else
	    {

	      printf("FLASH ERROR!\n");
 8001466:	4813      	ldr	r0, [pc, #76]	@ (80014b4 <write_data_to_flash_app+0xf0>)
 8001468:	f003 fd86 	bl	8004f78 <puts>
	      break;
 800146c:	e006      	b.n	800147c <write_data_to_flash_app+0xb8>
      for(int i = 0; i < data_len; i++ )
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	3301      	adds	r3, #1
 8001472:	623b      	str	r3, [r7, #32]
 8001474:	887b      	ldrh	r3, [r7, #2]
 8001476:	6a3a      	ldr	r2, [r7, #32]
 8001478:	429a      	cmp	r2, r3
 800147a:	dbd4      	blt.n	8001426 <write_data_to_flash_app+0x62>
	    }
	}

      if( ret != HAL_OK )
 800147c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10c      	bne.n	800149e <write_data_to_flash_app+0xda>
	{
	  break;
	}

      ret = HAL_FLASH_Lock();
 8001484:	f000 ff4e 	bl	8002324 <HAL_FLASH_Lock>
 8001488:	4603      	mov	r3, r0
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if( ret != HAL_OK )
 800148e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001492:	2b00      	cmp	r3, #0
 8001494:	e004      	b.n	80014a0 <write_data_to_flash_app+0xdc>
	  break;
 8001496:	bf00      	nop
 8001498:	e002      	b.n	80014a0 <write_data_to_flash_app+0xdc>
	      break;
 800149a:	bf00      	nop
 800149c:	e000      	b.n	80014a0 <write_data_to_flash_app+0xdc>
	  break;
 800149e:	bf00      	nop
	{
	  break;
	}
    }while( false );

  return ret;
 80014a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3728      	adds	r7, #40	@ 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bdb0      	pop	{r4, r5, r7, pc}
 80014ac:	08005c3c 	.word	0x08005c3c
 80014b0:	20000140 	.word	0x20000140
 80014b4:	08005c50 	.word	0x08005c50

080014b8 <Write_APP_End_Address>:

static HAL_StatusTypeDef Write_APP_End_Address(uint32_t end_of_application)
{
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	b08a      	sub	sp, #40	@ 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  do
    {
      ret = HAL_FLASH_Unlock();
 80014c0:	f000 ff0e 	bl	80022e0 <HAL_FLASH_Unlock>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if( ret != HAL_OK )
 80014ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d133      	bne.n	800153a <Write_APP_End_Address+0x82>

      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
      EraseInitStruct.Sector        = FLASH_SECTOR_2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.NbSectors     = 1;                    //erase 1 SECTOR
 80014da:	2301      	movs	r3, #1
 80014dc:	61fb      	str	r3, [r7, #28]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80014de:	2302      	movs	r3, #2
 80014e0:	623b      	str	r3, [r7, #32]
      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80014e2:	f107 020c 	add.w	r2, r7, #12
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 f869 	bl	80025c4 <HAL_FLASHEx_Erase>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if( ret != HAL_OK )
 80014f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d11e      	bne.n	800153e <Write_APP_End_Address+0x86>
	{
	  break;
	}

      ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	461c      	mov	r4, r3
 8001506:	4615      	mov	r5, r2
 8001508:	4622      	mov	r2, r4
 800150a:	462b      	mov	r3, r5
 800150c:	490f      	ldr	r1, [pc, #60]	@ (800154c <Write_APP_End_Address+0x94>)
 800150e:	2002      	movs	r0, #2
 8001510:	f000 fe92 	bl	8002238 <HAL_FLASH_Program>
 8001514:	4603      	mov	r3, r0
 8001516:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			      0x08008000,end_of_application);
      if( ret != HAL_OK )
 800151a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <Write_APP_End_Address+0x70>
	{
	  printf("END WRITE FAILED.");
 8001522:	480b      	ldr	r0, [pc, #44]	@ (8001550 <Write_APP_End_Address+0x98>)
 8001524:	f003 fcc0 	bl	8004ea8 <iprintf>
	}
      ret = HAL_FLASH_Lock();
 8001528:	f000 fefc 	bl	8002324 <HAL_FLASH_Lock>
 800152c:	4603      	mov	r3, r0
 800152e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if( ret != HAL_OK )
 8001532:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001536:	2b00      	cmp	r3, #0
 8001538:	e002      	b.n	8001540 <Write_APP_End_Address+0x88>
	  break;
 800153a:	bf00      	nop
 800153c:	e000      	b.n	8001540 <Write_APP_End_Address+0x88>
	  break;
 800153e:	bf00      	nop
	  break;
	}

    }while(0);

  return ret;
 8001540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001544:	4618      	mov	r0, r3
 8001546:	3728      	adds	r7, #40	@ 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bdb0      	pop	{r4, r5, r7, pc}
 800154c:	08008000 	.word	0x08008000
 8001550:	08005c60 	.word	0x08005c60

08001554 <Check_PC_response>:

static ENM_OTA_RET_ Check_PC_response()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
  ENM_OTA_RET_ ret = ENM_OTA_RET_ERR;
 800155a:	2300      	movs	r3, #0
 800155c:	71fb      	strb	r3, [r7, #7]
  uint16_t pktlen = receive_data();	//get data
 800155e:	f7ff fc4b 	bl	8000df8 <receive_data>
 8001562:	4603      	mov	r3, r0
 8001564:	80bb      	strh	r3, [r7, #4]
  if(pktlen>0)
 8001566:	88bb      	ldrh	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00b      	beq.n	8001584 <Check_PC_response+0x30>
    {
      STU_OTA_RESP_ *rsp = (STU_OTA_RESP_*)Rx_Buffer;
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <Check_PC_response+0x3c>)
 800156e:	603b      	str	r3, [r7, #0]
      if(rsp->packet_type == ENM_OTA_PKT_TYP_RESPONSE && rsp->status== DEF_OTA_ACK)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	785b      	ldrb	r3, [r3, #1]
 8001574:	2b04      	cmp	r3, #4
 8001576:	d105      	bne.n	8001584 <Check_PC_response+0x30>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	791b      	ldrb	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <Check_PC_response+0x30>
	{
	  return ENM_OTA_RET_OK;
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <Check_PC_response+0x32>
	}
    }
  return ret;
 8001584:	79fb      	ldrb	r3, [r7, #7]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000148 	.word	0x20000148

08001594 <send_ota_fw_header>:

ENM_OTA_RET_ send_ota_fw_header(uint32_t fwsize)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    memset(Tx_Buffer, 0, DEF_OTA_PACKET_MAX_SIZE);
 800159c:	f240 4209 	movw	r2, #1033	@ 0x409
 80015a0:	2100      	movs	r1, #0
 80015a2:	481c      	ldr	r0, [pc, #112]	@ (8001614 <send_ota_fw_header+0x80>)
 80015a4:	f003 fdc8 	bl	8005138 <memset>
    STU_OTA_HEADER_ *ota_header = (STU_OTA_HEADER_ *)Tx_Buffer;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <send_ota_fw_header+0x80>)
 80015aa:	60fb      	str	r3, [r7, #12]
    ENM_OTA_RET_ ret = ENM_OTA_RET_OK;
 80015ac:	2301      	movs	r3, #1
 80015ae:	72fb      	strb	r3, [r7, #11]
    uint16_t len = sizeof(STU_OTA_HEADER_);
 80015b0:	230d      	movs	r3, #13
 80015b2:	813b      	strh	r3, [r7, #8]


    ota_header->sof = DEF_OTA_SOF;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	22aa      	movs	r2, #170	@ 0xaa
 80015b8:	701a      	strb	r2, [r3, #0]
    ota_header->packet_type = ENM_OTA_PKT_TYP_HEADER;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2203      	movs	r2, #3
 80015be:	705a      	strb	r2, [r3, #1]
    ota_header->data_len = sizeof(fwsize); // changed from meta data to ota header
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f042 0204 	orr.w	r2, r2, #4
 80015c8:	709a      	strb	r2, [r3, #2]
 80015ca:	2200      	movs	r2, #0
 80015cc:	70da      	strb	r2, [r3, #3]
    ota_header->package_size = fwsize;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	605a      	str	r2, [r3, #4]
    ota_header->crc = crc32b(Tx_Buffer, len - 5);
 80015d4:	893b      	ldrh	r3, [r7, #8]
 80015d6:	3b05      	subs	r3, #5
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4619      	mov	r1, r3
 80015dc:	480d      	ldr	r0, [pc, #52]	@ (8001614 <send_ota_fw_header+0x80>)
 80015de:	f7ff fbcf 	bl	8000d80 <crc32b>
 80015e2:	4602      	mov	r2, r0
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	609a      	str	r2, [r3, #8]
    ota_header->eof = DEF_OTA_EOF;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	22bb      	movs	r2, #187	@ 0xbb
 80015ec:	731a      	strb	r2, [r3, #12]

    // send OTA Header
    ota_send_chars(len, Tx_Buffer);
 80015ee:	893b      	ldrh	r3, [r7, #8]
 80015f0:	4908      	ldr	r1, [pc, #32]	@ (8001614 <send_ota_fw_header+0x80>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fec0 	bl	8001378 <ota_send_chars>

    ret = Check_PC_response();
 80015f8:	f7ff ffac 	bl	8001554 <Check_PC_response>
 80015fc:	4603      	mov	r3, r0
 80015fe:	72fb      	strb	r3, [r7, #11]
    printf("OTA HDR - ack[ret=%d]\n", ret);
 8001600:	7afb      	ldrb	r3, [r7, #11]
 8001602:	4619      	mov	r1, r3
 8001604:	4804      	ldr	r0, [pc, #16]	@ (8001618 <send_ota_fw_header+0x84>)
 8001606:	f003 fc4f 	bl	8004ea8 <iprintf>
    return ret;
 800160a:	7afb      	ldrb	r3, [r7, #11]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000554 	.word	0x20000554
 8001618:	08005c74 	.word	0x08005c74

0800161c <Backup_APP>:


ENM_OTA_RET_ Backup_APP(uint32_t *app_size)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint16_t len=0;
 8001624:	2300      	movs	r3, #0
 8001626:	83fb      	strh	r3, [r7, #30]
  uint16_t dataIndex=0;
 8001628:	2300      	movs	r3, #0
 800162a:	83bb      	strh	r3, [r7, #28]
  ENM_OTA_RET_ ret = ENM_OTA_RET_ERR;
 800162c:	2300      	movs	r3, #0
 800162e:	76fb      	strb	r3, [r7, #27]
  uint32_t size = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  volatile uint32_t *memptr = (uint32_t *)(OTA_APP_FLASH_ADDR);
 8001634:	4b58      	ldr	r3, [pc, #352]	@ (8001798 <Backup_APP+0x17c>)
 8001636:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 0; i < *app_size;)
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	e0a0      	b.n	8001780 <Backup_APP+0x164>
    {
      len=0;
 800163e:	2300      	movs	r3, #0
 8001640:	83fb      	strh	r3, [r7, #30]
      dataIndex=0;
 8001642:	2300      	movs	r3, #0
 8001644:	83bb      	strh	r3, [r7, #28]
      if ((*app_size - i) >= DEF_OTA_DATA_MAX_SIZE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001652:	d303      	bcc.n	800165c <Backup_APP+0x40>
	{
	  size = DEF_OTA_DATA_MAX_SIZE;
 8001654:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e004      	b.n	8001666 <Backup_APP+0x4a>
	}
      else
	{
	  size = *app_size - i;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	617b      	str	r3, [r7, #20]
	}
      memset( Tx_Buffer, 0, DEF_OTA_PACKET_MAX_SIZE );
 8001666:	f240 4209 	movw	r2, #1033	@ 0x409
 800166a:	2100      	movs	r1, #0
 800166c:	484b      	ldr	r0, [pc, #300]	@ (800179c <Backup_APP+0x180>)
 800166e:	f003 fd63 	bl	8005138 <memset>
      STU_OTA_DATA_ *ota_data = (STU_OTA_DATA_ *)Tx_Buffer;
 8001672:	4b4a      	ldr	r3, [pc, #296]	@ (800179c <Backup_APP+0x180>)
 8001674:	60bb      	str	r3, [r7, #8]
      ota_data->sof = DEF_OTA_SOF;
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	22aa      	movs	r2, #170	@ 0xaa
 800167a:	701a      	strb	r2, [r3, #0]
      ota_data->packet_type = ENM_OTA_PKT_TYP_DATA;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2202      	movs	r2, #2
 8001680:	705a      	strb	r2, [r3, #1]
      ota_data->data_len = size;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	b29a      	uxth	r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	805a      	strh	r2, [r3, #2]
      // crc and eof are added in the packet below*/
      len=4;
 800168a:	2304      	movs	r3, #4
 800168c:	83fb      	strh	r3, [r7, #30]

      while(dataIndex<size)
 800168e:	e028      	b.n	80016e2 <Backup_APP+0xc6>
	{
	  flashmem_data.data_word = *memptr++;
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1d1a      	adds	r2, r3, #4
 8001694:	613a      	str	r2, [r7, #16]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a41      	ldr	r2, [pc, #260]	@ (80017a0 <Backup_APP+0x184>)
 800169a:	6013      	str	r3, [r2, #0]
	  Tx_Buffer[len++] = flashmem_data.data_bytes[0];
 800169c:	8bfb      	ldrh	r3, [r7, #30]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	83fa      	strh	r2, [r7, #30]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b3e      	ldr	r3, [pc, #248]	@ (80017a0 <Backup_APP+0x184>)
 80016a6:	7819      	ldrb	r1, [r3, #0]
 80016a8:	4b3c      	ldr	r3, [pc, #240]	@ (800179c <Backup_APP+0x180>)
 80016aa:	5499      	strb	r1, [r3, r2]
	  Tx_Buffer[len++] = flashmem_data.data_bytes[1];
 80016ac:	8bfb      	ldrh	r3, [r7, #30]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	83fa      	strh	r2, [r7, #30]
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b3a      	ldr	r3, [pc, #232]	@ (80017a0 <Backup_APP+0x184>)
 80016b6:	7859      	ldrb	r1, [r3, #1]
 80016b8:	4b38      	ldr	r3, [pc, #224]	@ (800179c <Backup_APP+0x180>)
 80016ba:	5499      	strb	r1, [r3, r2]
	  Tx_Buffer[len++] = flashmem_data.data_bytes[2];
 80016bc:	8bfb      	ldrh	r3, [r7, #30]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	83fa      	strh	r2, [r7, #30]
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b36      	ldr	r3, [pc, #216]	@ (80017a0 <Backup_APP+0x184>)
 80016c6:	7899      	ldrb	r1, [r3, #2]
 80016c8:	4b34      	ldr	r3, [pc, #208]	@ (800179c <Backup_APP+0x180>)
 80016ca:	5499      	strb	r1, [r3, r2]
	  Tx_Buffer[len++] = flashmem_data.data_bytes[3];
 80016cc:	8bfb      	ldrh	r3, [r7, #30]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	83fa      	strh	r2, [r7, #30]
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b32      	ldr	r3, [pc, #200]	@ (80017a0 <Backup_APP+0x184>)
 80016d6:	78d9      	ldrb	r1, [r3, #3]
 80016d8:	4b30      	ldr	r3, [pc, #192]	@ (800179c <Backup_APP+0x180>)
 80016da:	5499      	strb	r1, [r3, r2]
	  dataIndex +=4;
 80016dc:	8bbb      	ldrh	r3, [r7, #28]
 80016de:	3304      	adds	r3, #4
 80016e0:	83bb      	strh	r3, [r7, #28]
      while(dataIndex<size)
 80016e2:	8bbb      	ldrh	r3, [r7, #28]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d8d2      	bhi.n	8001690 <Backup_APP+0x74>
	}
      //len += size;

      //Adding CRC
      crc_data.data_word = crc32b(Tx_Buffer, len); // Add CRC
 80016ea:	8bfb      	ldrh	r3, [r7, #30]
 80016ec:	4619      	mov	r1, r3
 80016ee:	482b      	ldr	r0, [pc, #172]	@ (800179c <Backup_APP+0x180>)
 80016f0:	f7ff fb46 	bl	8000d80 <crc32b>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a2b      	ldr	r2, [pc, #172]	@ (80017a4 <Backup_APP+0x188>)
 80016f8:	6013      	str	r3, [r2, #0]
      Tx_Buffer[len++] = crc_data.data_bytes[0];
 80016fa:	8bfb      	ldrh	r3, [r7, #30]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	83fa      	strh	r2, [r7, #30]
 8001700:	461a      	mov	r2, r3
 8001702:	4b28      	ldr	r3, [pc, #160]	@ (80017a4 <Backup_APP+0x188>)
 8001704:	7819      	ldrb	r1, [r3, #0]
 8001706:	4b25      	ldr	r3, [pc, #148]	@ (800179c <Backup_APP+0x180>)
 8001708:	5499      	strb	r1, [r3, r2]
      Tx_Buffer[len++] = crc_data.data_bytes[1];
 800170a:	8bfb      	ldrh	r3, [r7, #30]
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	83fa      	strh	r2, [r7, #30]
 8001710:	461a      	mov	r2, r3
 8001712:	4b24      	ldr	r3, [pc, #144]	@ (80017a4 <Backup_APP+0x188>)
 8001714:	7859      	ldrb	r1, [r3, #1]
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <Backup_APP+0x180>)
 8001718:	5499      	strb	r1, [r3, r2]
      Tx_Buffer[len++] = crc_data.data_bytes[2];
 800171a:	8bfb      	ldrh	r3, [r7, #30]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	83fa      	strh	r2, [r7, #30]
 8001720:	461a      	mov	r2, r3
 8001722:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <Backup_APP+0x188>)
 8001724:	7899      	ldrb	r1, [r3, #2]
 8001726:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <Backup_APP+0x180>)
 8001728:	5499      	strb	r1, [r3, r2]
      Tx_Buffer[len++] = crc_data.data_bytes[3];
 800172a:	8bfb      	ldrh	r3, [r7, #30]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	83fa      	strh	r2, [r7, #30]
 8001730:	461a      	mov	r2, r3
 8001732:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <Backup_APP+0x188>)
 8001734:	78d9      	ldrb	r1, [r3, #3]
 8001736:	4b19      	ldr	r3, [pc, #100]	@ (800179c <Backup_APP+0x180>)
 8001738:	5499      	strb	r1, [r3, r2]

      //END OF FLAG
      Tx_Buffer[len++] = DEF_OTA_EOF;
 800173a:	8bfb      	ldrh	r3, [r7, #30]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	83fa      	strh	r2, [r7, #30]
 8001740:	461a      	mov	r2, r3
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <Backup_APP+0x180>)
 8001744:	21bb      	movs	r1, #187	@ 0xbb
 8001746:	5499      	strb	r1, [r3, r2]


      //SEND THIS DATA
      ret = ota_send_APP_Data(len, Tx_Buffer);
 8001748:	8bfb      	ldrh	r3, [r7, #30]
 800174a:	4914      	ldr	r1, [pc, #80]	@ (800179c <Backup_APP+0x180>)
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f82f 	bl	80017b0 <ota_send_APP_Data>
 8001752:	4603      	mov	r3, r0
 8001754:	76fb      	strb	r3, [r7, #27]
      if (!ret)
 8001756:	7efb      	ldrb	r3, [r7, #27]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d104      	bne.n	8001766 <Backup_APP+0x14a>
	{
	  printf("send_ota_data Err [i=%ld]\n", i);
 800175c:	68f9      	ldr	r1, [r7, #12]
 800175e:	4812      	ldr	r0, [pc, #72]	@ (80017a8 <Backup_APP+0x18c>)
 8001760:	f003 fba2 	bl	8004ea8 <iprintf>
	  break;
 8001764:	e012      	b.n	800178c <Backup_APP+0x170>
	}

      printf("[%ld/%ld]\r\n", i / DEF_OTA_DATA_MAX_SIZE, *app_size / DEF_OTA_DATA_MAX_SIZE);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	0a99      	lsrs	r1, r3, #10
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	0a9b      	lsrs	r3, r3, #10
 8001770:	461a      	mov	r2, r3
 8001772:	480e      	ldr	r0, [pc, #56]	@ (80017ac <Backup_APP+0x190>)
 8001774:	f003 fb98 	bl	8004ea8 <iprintf>

      //ret = ota_send_chars(size, Tx_Buffer); send_ota_data(myserialport.comport, &APP_BIN[i], size);

      i += size;
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	4413      	add	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
  for (uint32_t i = 0; i < *app_size;)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	429a      	cmp	r2, r3
 8001788:	f4ff af59 	bcc.w	800163e <Backup_APP+0x22>
    }
  return ret;
 800178c:	7efb      	ldrb	r3, [r7, #27]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	08020000 	.word	0x08020000
 800179c:	20000554 	.word	0x20000554
 80017a0:	20000960 	.word	0x20000960
 80017a4:	20000964 	.word	0x20000964
 80017a8:	08005c8c 	.word	0x08005c8c
 80017ac:	08005ca8 	.word	0x08005ca8

080017b0 <ota_send_APP_Data>:

ENM_OTA_RET_ ota_send_APP_Data(uint16_t data_len, uint8_t *buf)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	80fb      	strh	r3, [r7, #6]
  ENM_OTA_RET_ ret = ENM_OTA_RET_ERR;
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]
  ota_send_chars(data_len, buf);
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	6839      	ldr	r1, [r7, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fdd7 	bl	8001378 <ota_send_chars>

  ret = Check_PC_response();
 80017ca:	f7ff fec3 	bl	8001554 <Check_PC_response>
 80017ce:	4603      	mov	r3, r0
 80017d0:	73fb      	strb	r3, [r7, #15]
  printf("OTA HEADER - ack received[ret = %d]\n", ret);
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	4619      	mov	r1, r3
 80017d6:	4804      	ldr	r0, [pc, #16]	@ (80017e8 <ota_send_APP_Data+0x38>)
 80017d8:	f003 fb66 	bl	8004ea8 <iprintf>

  return ret;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	08005cb4 	.word	0x08005cb4

080017ec <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2104      	movs	r1, #4
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <ST7735_Select+0x14>)
 80017f6:	f001 fa87 	bl	8002d08 <HAL_GPIO_WritePin>
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40020400 	.word	0x40020400

08001804 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001808:	2201      	movs	r2, #1
 800180a:	2104      	movs	r1, #4
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <ST7735_Unselect+0x14>)
 800180e:	f001 fa7b 	bl	8002d08 <HAL_GPIO_WritePin>
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40020400 	.word	0x40020400

0800181c <ST7735_Reset>:

static void ST7735_Reset() {
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	2102      	movs	r1, #2
 8001824:	4806      	ldr	r0, [pc, #24]	@ (8001840 <ST7735_Reset+0x24>)
 8001826:	f001 fa6f 	bl	8002d08 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800182a:	2005      	movs	r0, #5
 800182c:	f000 faf0 	bl	8001e10 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001830:	2201      	movs	r2, #1
 8001832:	2102      	movs	r1, #2
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <ST7735_Reset+0x24>)
 8001836:	f001 fa67 	bl	8002d08 <HAL_GPIO_WritePin>
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40020400 	.word	0x40020400

08001844 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	2101      	movs	r1, #1
 8001852:	4807      	ldr	r0, [pc, #28]	@ (8001870 <ST7735_WriteCommand+0x2c>)
 8001854:	f001 fa58 	bl	8002d08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001858:	1df9      	adds	r1, r7, #7
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	2201      	movs	r2, #1
 8001860:	4804      	ldr	r0, [pc, #16]	@ (8001874 <ST7735_WriteCommand+0x30>)
 8001862:	f002 f842 	bl	80038ea <HAL_SPI_Transmit>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40020400 	.word	0x40020400
 8001874:	20000094 	.word	0x20000094

08001878 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001882:	2201      	movs	r2, #1
 8001884:	2101      	movs	r1, #1
 8001886:	4807      	ldr	r0, [pc, #28]	@ (80018a4 <ST7735_WriteData+0x2c>)
 8001888:	f001 fa3e 	bl	8002d08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	b29a      	uxth	r2, r3
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4804      	ldr	r0, [pc, #16]	@ (80018a8 <ST7735_WriteData+0x30>)
 8001898:	f002 f827 	bl	80038ea <HAL_SPI_Transmit>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40020400 	.word	0x40020400
 80018a8:	20000094 	.word	0x20000094

080018ac <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80018be:	e034      	b.n	800192a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80018ca:	7afb      	ldrb	r3, [r7, #11]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ffb9 	bl	8001844 <ST7735_WriteCommand>

        numArgs = *addr++;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80018dc:	7abb      	ldrb	r3, [r7, #10]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018e4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80018e6:	7abb      	ldrb	r3, [r7, #10]
 80018e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018ec:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80018ee:	7abb      	ldrb	r3, [r7, #10]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d008      	beq.n	8001906 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80018f4:	7abb      	ldrb	r3, [r7, #10]
 80018f6:	4619      	mov	r1, r3
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ffbd 	bl	8001878 <ST7735_WriteData>
            addr += numArgs;
 80018fe:	7abb      	ldrb	r3, [r7, #10]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	4413      	add	r3, r2
 8001904:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001906:	89bb      	ldrh	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00e      	beq.n	800192a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001916:	89bb      	ldrh	r3, [r7, #12]
 8001918:	2bff      	cmp	r3, #255	@ 0xff
 800191a:	d102      	bne.n	8001922 <ST7735_ExecuteCommandList+0x76>
 800191c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001920:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001922:	89bb      	ldrh	r3, [r7, #12]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fa73 	bl	8001e10 <HAL_Delay>
    while(numCommands--) {
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	1e5a      	subs	r2, r3, #1
 800192e:	73fa      	strb	r2, [r7, #15]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1c5      	bne.n	80018c0 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800193e:	b590      	push	{r4, r7, lr}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	4604      	mov	r4, r0
 8001946:	4608      	mov	r0, r1
 8001948:	4611      	mov	r1, r2
 800194a:	461a      	mov	r2, r3
 800194c:	4623      	mov	r3, r4
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	4603      	mov	r3, r0
 8001952:	71bb      	strb	r3, [r7, #6]
 8001954:	460b      	mov	r3, r1
 8001956:	717b      	strb	r3, [r7, #5]
 8001958:	4613      	mov	r3, r2
 800195a:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800195c:	202a      	movs	r0, #42	@ 0x2a
 800195e:	f7ff ff71 	bl	8001844 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001962:	2300      	movs	r3, #0
 8001964:	733b      	strb	r3, [r7, #12]
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	3301      	adds	r3, #1
 800196a:	b2db      	uxtb	r3, r3
 800196c:	737b      	strb	r3, [r7, #13]
 800196e:	2300      	movs	r3, #0
 8001970:	73bb      	strb	r3, [r7, #14]
 8001972:	797b      	ldrb	r3, [r7, #5]
 8001974:	3301      	adds	r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	2104      	movs	r1, #4
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff79 	bl	8001878 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001986:	202b      	movs	r0, #43	@ 0x2b
 8001988:	f7ff ff5c 	bl	8001844 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800198c:	79bb      	ldrb	r3, [r7, #6]
 800198e:	3302      	adds	r3, #2
 8001990:	b2db      	uxtb	r3, r3
 8001992:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001994:	793b      	ldrb	r3, [r7, #4]
 8001996:	3302      	adds	r3, #2
 8001998:	b2db      	uxtb	r3, r3
 800199a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	2104      	movs	r1, #4
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ff68 	bl	8001878 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80019a8:	202c      	movs	r0, #44	@ 0x2c
 80019aa:	f7ff ff4b 	bl	8001844 <ST7735_WriteCommand>
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd90      	pop	{r4, r7, pc}
	...

080019b8 <ST7735_Init>:

void ST7735_Init() {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
    ST7735_Select();
 80019bc:	f7ff ff16 	bl	80017ec <ST7735_Select>
    ST7735_Reset();
 80019c0:	f7ff ff2c 	bl	800181c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80019c4:	4806      	ldr	r0, [pc, #24]	@ (80019e0 <ST7735_Init+0x28>)
 80019c6:	f7ff ff71 	bl	80018ac <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80019ca:	4806      	ldr	r0, [pc, #24]	@ (80019e4 <ST7735_Init+0x2c>)
 80019cc:	f7ff ff6e 	bl	80018ac <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80019d0:	4805      	ldr	r0, [pc, #20]	@ (80019e8 <ST7735_Init+0x30>)
 80019d2:	f7ff ff6b 	bl	80018ac <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80019d6:	f7ff ff15 	bl	8001804 <ST7735_Unselect>
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	08006460 	.word	0x08006460
 80019e4:	0800649c 	.word	0x0800649c
 80019e8:	080064ac 	.word	0x080064ac

080019ec <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80019ec:	b082      	sub	sp, #8
 80019ee:	b590      	push	{r4, r7, lr}
 80019f0:	b089      	sub	sp, #36	@ 0x24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80019f6:	4603      	mov	r3, r0
 80019f8:	80fb      	strh	r3, [r7, #6]
 80019fa:	460b      	mov	r3, r1
 80019fc:	80bb      	strh	r3, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	b2d8      	uxtb	r0, r3
 8001a06:	88bb      	ldrh	r3, [r7, #4]
 8001a08:	b2d9      	uxtb	r1, r3
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001a12:	4413      	add	r3, r2
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b2dc      	uxtb	r4, r3
 8001a1a:	88bb      	ldrh	r3, [r7, #4]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001a22:	4413      	add	r3, r2
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4622      	mov	r2, r4
 8001a2c:	f7ff ff87 	bl	800193e <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
 8001a34:	e043      	b.n	8001abe <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001a36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	3b20      	subs	r3, #32
 8001a3c:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8001a40:	fb01 f303 	mul.w	r3, r1, r3
 8001a44:	4619      	mov	r1, r3
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	440b      	add	r3, r1
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	e029      	b.n	8001aac <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00e      	beq.n	8001a86 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001a68:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	743b      	strb	r3, [r7, #16]
 8001a72:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fefa 	bl	8001878 <ST7735_WriteData>
 8001a84:	e00f      	b.n	8001aa6 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001a86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001a8a:	0a1b      	lsrs	r3, r3, #8
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	733b      	strb	r3, [r7, #12]
 8001a92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fee9 	bl	8001878 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d3cf      	bcc.n	8001a58 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	3301      	adds	r3, #1
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d3b5      	bcc.n	8001a36 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
 8001ace:	3724      	adds	r7, #36	@ 0x24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001ad6:	b002      	add	sp, #8
 8001ad8:	4770      	bx	lr
	...

08001adc <ST7735_FillRectangle>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001adc:	b590      	push	{r4, r7, lr}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4623      	mov	r3, r4
 8001aec:	80fb      	strh	r3, [r7, #6]
 8001aee:	4603      	mov	r3, r0
 8001af0:	80bb      	strh	r3, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	807b      	strh	r3, [r7, #2]
 8001af6:	4613      	mov	r3, r2
 8001af8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_LCD_WIDTH) || (y >= ST7735_LCD_HEIGHT)) return;
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	2b9f      	cmp	r3, #159	@ 0x9f
 8001afe:	d857      	bhi.n	8001bb0 <ST7735_FillRectangle+0xd4>
 8001b00:	88bb      	ldrh	r3, [r7, #4]
 8001b02:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b04:	d854      	bhi.n	8001bb0 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_LCD_WIDTH) w = ST7735_LCD_WIDTH - x;
 8001b06:	88fa      	ldrh	r2, [r7, #6]
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b0e:	dd03      	ble.n	8001b18 <ST7735_FillRectangle+0x3c>
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8001b16:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_LCD_HEIGHT) h = ST7735_LCD_HEIGHT - y;
 8001b18:	88ba      	ldrh	r2, [r7, #4]
 8001b1a:	883b      	ldrh	r3, [r7, #0]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	2b80      	cmp	r3, #128	@ 0x80
 8001b20:	dd03      	ble.n	8001b2a <ST7735_FillRectangle+0x4e>
 8001b22:	88bb      	ldrh	r3, [r7, #4]
 8001b24:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001b28:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001b2a:	f7ff fe5f 	bl	80017ec <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	b2d8      	uxtb	r0, r3
 8001b32:	88bb      	ldrh	r3, [r7, #4]
 8001b34:	b2d9      	uxtb	r1, r3
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	3b01      	subs	r3, #1
 8001b44:	b2dc      	uxtb	r4, r3
 8001b46:	88bb      	ldrh	r3, [r7, #4]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	883b      	ldrh	r3, [r7, #0]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4622      	mov	r2, r4
 8001b58:	f7ff fef1 	bl	800193e <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001b5c:	8c3b      	ldrh	r3, [r7, #32]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	733b      	strb	r3, [r7, #12]
 8001b66:	8c3b      	ldrh	r3, [r7, #32]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2101      	movs	r1, #1
 8001b70:	4811      	ldr	r0, [pc, #68]	@ (8001bb8 <ST7735_FillRectangle+0xdc>)
 8001b72:	f001 f8c9 	bl	8002d08 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001b76:	883b      	ldrh	r3, [r7, #0]
 8001b78:	80bb      	strh	r3, [r7, #4]
 8001b7a:	e013      	b.n	8001ba4 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8001b7c:	887b      	ldrh	r3, [r7, #2]
 8001b7e:	80fb      	strh	r3, [r7, #6]
 8001b80:	e00a      	b.n	8001b98 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001b82:	f107 010c 	add.w	r1, r7, #12
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	480b      	ldr	r0, [pc, #44]	@ (8001bbc <ST7735_FillRectangle+0xe0>)
 8001b8e:	f001 feac 	bl	80038ea <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	80fb      	strh	r3, [r7, #6]
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f1      	bne.n	8001b82 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8001b9e:	88bb      	ldrh	r3, [r7, #4]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	80bb      	strh	r3, [r7, #4]
 8001ba4:	88bb      	ldrh	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1e8      	bne.n	8001b7c <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8001baa:	f7ff fe2b 	bl	8001804 <ST7735_Unselect>
 8001bae:	e000      	b.n	8001bb2 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_LCD_WIDTH) || (y >= ST7735_LCD_HEIGHT)) return;
 8001bb0:	bf00      	nop
}
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	20000094 	.word	0x20000094

08001bc0 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_LCD_WIDTH, ST7735_LCD_HEIGHT, color);
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2380      	movs	r3, #128	@ 0x80
 8001bd0:	22a0      	movs	r2, #160	@ 0xa0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f7ff ff81 	bl	8001adc <ST7735_FillRectangle>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <ST7735_WriteDebugString>:
	ST7735_TestFilledRoundRectangles();
}

uint16_t _currentX=ST7735_XSTART, _currentY=ST7735_YSTART, _currentLineNum=1;

void ST7735_WriteDebugString(char* str) {
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af04      	add	r7, sp, #16
 8001bea:	6078      	str	r0, [r7, #4]
	_currentX=ST7735_XSTART;
 8001bec:	4b31      	ldr	r3, [pc, #196]	@ (8001cb4 <ST7735_WriteDebugString+0xd0>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(_currentX, _currentY, ST7735_LCD_WIDTH, Font_7x10.height, ST7735_COLOUR_BLACK);
 8001bf2:	4b30      	ldr	r3, [pc, #192]	@ (8001cb4 <ST7735_WriteDebugString+0xd0>)
 8001bf4:	8818      	ldrh	r0, [r3, #0]
 8001bf6:	4b30      	ldr	r3, [pc, #192]	@ (8001cb8 <ST7735_WriteDebugString+0xd4>)
 8001bf8:	8819      	ldrh	r1, [r3, #0]
 8001bfa:	4b30      	ldr	r3, [pc, #192]	@ (8001cbc <ST7735_WriteDebugString+0xd8>)
 8001bfc:	785b      	ldrb	r3, [r3, #1]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	2300      	movs	r3, #0
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	4613      	mov	r3, r2
 8001c06:	22a0      	movs	r2, #160	@ 0xa0
 8001c08:	f7ff ff68 	bl	8001adc <ST7735_FillRectangle>


	ST7735_Select();
 8001c0c:	f7ff fdee 	bl	80017ec <ST7735_Select>

    while(*str)
 8001c10:	e044      	b.n	8001c9c <ST7735_WriteDebugString+0xb8>
    {
        if(_currentY + Font_7x10.height >= ST7735_LCD_HEIGHT)
 8001c12:	4b29      	ldr	r3, [pc, #164]	@ (8001cb8 <ST7735_WriteDebugString+0xd4>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b28      	ldr	r3, [pc, #160]	@ (8001cbc <ST7735_WriteDebugString+0xd8>)
 8001c1a:	785b      	ldrb	r3, [r3, #1]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c20:	dd05      	ble.n	8001c2e <ST7735_WriteDebugString+0x4a>
        {
        	ST7735_FillScreen(ST7735_COLOUR_BLACK);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f7ff ffcc 	bl	8001bc0 <ST7735_FillScreen>
        	_currentY=ST7735_YSTART;
 8001c28:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <ST7735_WriteDebugString+0xd4>)
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	801a      	strh	r2, [r3, #0]
        }
        if(_currentX + Font_7x10.width >= ST7735_LCD_WIDTH)
 8001c2e:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <ST7735_WriteDebugString+0xd0>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b21      	ldr	r3, [pc, #132]	@ (8001cbc <ST7735_WriteDebugString+0xd8>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4413      	add	r3, r2
 8001c3a:	2b9f      	cmp	r3, #159	@ 0x9f
 8001c3c:	dc33      	bgt.n	8001ca6 <ST7735_WriteDebugString+0xc2>
        {
        	break;
        	//_currentX = 0;
        }
        if(*str == '\n')
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b0a      	cmp	r3, #10
 8001c44:	d10c      	bne.n	8001c60 <ST7735_WriteDebugString+0x7c>
        {
        	_currentY = (_currentY ) + (Font_7x10.height);
 8001c46:	4b1d      	ldr	r3, [pc, #116]	@ (8001cbc <ST7735_WriteDebugString+0xd8>)
 8001c48:	785b      	ldrb	r3, [r3, #1]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb8 <ST7735_WriteDebugString+0xd4>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	4413      	add	r3, r2
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <ST7735_WriteDebugString+0xd4>)
 8001c56:	801a      	strh	r2, [r3, #0]
        	_currentX=ST7735_XSTART;
 8001c58:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <ST7735_WriteDebugString+0xd0>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	801a      	strh	r2, [r3, #0]
        	break;
 8001c5e:	e023      	b.n	8001ca8 <ST7735_WriteDebugString+0xc4>
//        	str++;
//        	continue;
        }

        ST7735_WriteChar(_currentX, _currentY, *str, Font_7x10, ST7735_COLOUR_WHITE, ST7735_COLOUR_BLACK);
 8001c60:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <ST7735_WriteDebugString+0xd0>)
 8001c62:	8818      	ldrh	r0, [r3, #0]
 8001c64:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <ST7735_WriteDebugString+0xd4>)
 8001c66:	8819      	ldrh	r1, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	781c      	ldrb	r4, [r3, #0]
 8001c6c:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <ST7735_WriteDebugString+0xd8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	9202      	str	r2, [sp, #8]
 8001c72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c76:	9201      	str	r2, [sp, #4]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	9200      	str	r2, [sp, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4622      	mov	r2, r4
 8001c80:	f7ff feb4 	bl	80019ec <ST7735_WriteChar>
        _currentX += Font_7x10.width;
 8001c84:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <ST7735_WriteDebugString+0xd8>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <ST7735_WriteDebugString+0xd0>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <ST7735_WriteDebugString+0xd0>)
 8001c94:	801a      	strh	r2, [r3, #0]
        str++;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	607b      	str	r3, [r7, #4]
    while(*str)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1b6      	bne.n	8001c12 <ST7735_WriteDebugString+0x2e>
 8001ca4:	e000      	b.n	8001ca8 <ST7735_WriteDebugString+0xc4>
        	break;
 8001ca6:	bf00      	nop
    }

    //_currentY = (_currentY ) + (Font_7x10.height);
    ST7735_Unselect();
 8001ca8:	f7ff fdac 	bl	8001804 <ST7735_Unselect>
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}
 8001cb4:	20000010 	.word	0x20000010
 8001cb8:	20000012 	.word	0x20000012
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <HAL_Init+0x40>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d00 <HAL_Init+0x40>)
 8001cca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_Init+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <HAL_Init+0x40>)
 8001cd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <HAL_Init+0x40>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a07      	ldr	r2, [pc, #28]	@ (8001d00 <HAL_Init+0x40>)
 8001ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f000 f9bf 	bl	800206c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cee:	200f      	movs	r0, #15
 8001cf0:	f000 f83e 	bl	8001d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf4:	f7fe fe46 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023c00 	.word	0x40023c00

08001d04 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <HAL_DeInit+0x4c>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	@ (8001d54 <HAL_DeInit+0x50>)
 8001d0c:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <HAL_DeInit+0x4c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001d14:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <HAL_DeInit+0x4c>)
 8001d16:	4a10      	ldr	r2, [pc, #64]	@ (8001d58 <HAL_DeInit+0x54>)
 8001d18:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <HAL_DeInit+0x4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001d20:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <HAL_DeInit+0x4c>)
 8001d22:	4a0e      	ldr	r2, [pc, #56]	@ (8001d5c <HAL_DeInit+0x58>)
 8001d24:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001d26:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <HAL_DeInit+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001d2c:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <HAL_DeInit+0x4c>)
 8001d2e:	2280      	movs	r2, #128	@ 0x80
 8001d30:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001d32:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <HAL_DeInit+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001d38:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <HAL_DeInit+0x4c>)
 8001d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001d40:	4b03      	ldr	r3, [pc, #12]	@ (8001d50 <HAL_DeInit+0x4c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001d46:	f000 f80b 	bl	8001d60 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	10e2c80f 	.word	0x10e2c80f
 8001d58:	00177931 	.word	0x00177931
 8001d5c:	0060109f 	.word	0x0060109f

08001d60 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d78:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_InitTick+0x54>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <HAL_InitTick+0x58>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 f9b3 	bl	80020fa <HAL_SYSTICK_Config>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00e      	b.n	8001dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	d80a      	bhi.n	8001dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da4:	2200      	movs	r2, #0
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	f000 f969 	bl	8002082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db0:	4a06      	ldr	r2, [pc, #24]	@ (8001dcc <HAL_InitTick+0x5c>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e000      	b.n	8001dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	20000018 	.word	0x20000018
 8001dcc:	20000014 	.word	0x20000014

08001dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_IncTick+0x20>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <HAL_IncTick+0x24>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	4a04      	ldr	r2, [pc, #16]	@ (8001df4 <HAL_IncTick+0x24>)
 8001de2:	6013      	str	r3, [r2, #0]
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000018 	.word	0x20000018
 8001df4:	20000968 	.word	0x20000968

08001df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	@ (8001e0c <HAL_GetTick+0x14>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000968 	.word	0x20000968

08001e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e18:	f7ff ffee 	bl	8001df8 <HAL_GetTick>
 8001e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e28:	d005      	beq.n	8001e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <HAL_Delay+0x44>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4413      	add	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e36:	bf00      	nop
 8001e38:	f7ff ffde 	bl	8001df8 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d8f7      	bhi.n	8001e38 <HAL_Delay+0x28>
  {
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000018 	.word	0x20000018

08001e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e68:	4b0c      	ldr	r3, [pc, #48]	@ (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e74:	4013      	ands	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8a:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	60d3      	str	r3, [r2, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea4:	4b04      	ldr	r3, [pc, #16]	@ (8001eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	f003 0307 	and.w	r3, r3, #7
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	db0b      	blt.n	8001ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	f003 021f 	and.w	r2, r3, #31
 8001ed4:	4907      	ldr	r1, [pc, #28]	@ (8001ef4 <__NVIC_EnableIRQ+0x38>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	2001      	movs	r0, #1
 8001ede:	fa00 f202 	lsl.w	r2, r0, r2
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000e100 	.word	0xe000e100

08001ef8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db12      	blt.n	8001f30 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	490a      	ldr	r1, [pc, #40]	@ (8001f3c <__NVIC_DisableIRQ+0x44>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	3320      	adds	r3, #32
 8001f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f24:	f3bf 8f4f 	dsb	sy
}
 8001f28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f2a:	f3bf 8f6f 	isb	sy
}
 8001f2e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	@ (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	@ (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	@ 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
         );
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	@ 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002000:	f3bf 8f4f 	dsb	sy
}
 8002004:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <__NVIC_SystemReset+0x24>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800200e:	4904      	ldr	r1, [pc, #16]	@ (8002020 <__NVIC_SystemReset+0x24>)
 8002010:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <__NVIC_SystemReset+0x28>)
 8002012:	4313      	orrs	r3, r2
 8002014:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002016:	f3bf 8f4f 	dsb	sy
}
 800201a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <__NVIC_SystemReset+0x20>
 8002020:	e000ed00 	.word	0xe000ed00
 8002024:	05fa0004 	.word	0x05fa0004

08002028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002038:	d301      	bcc.n	800203e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203a:	2301      	movs	r3, #1
 800203c:	e00f      	b.n	800205e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203e:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <SysTick_Config+0x40>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002046:	210f      	movs	r1, #15
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f7ff ff78 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <SysTick_Config+0x40>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002056:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <SysTick_Config+0x40>)
 8002058:	2207      	movs	r2, #7
 800205a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	e000e010 	.word	0xe000e010

0800206c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff feef 	bl	8001e58 <__NVIC_SetPriorityGrouping>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002094:	f7ff ff04 	bl	8001ea0 <__NVIC_GetPriorityGrouping>
 8002098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	6978      	ldr	r0, [r7, #20]
 80020a0:	f7ff ff78 	bl	8001f94 <NVIC_EncodePriority>
 80020a4:	4602      	mov	r2, r0
 80020a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff47 	bl	8001f40 <__NVIC_SetPriority>
}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fef7 	bl	8001ebc <__NVIC_EnableIRQ>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff07 	bl	8001ef8 <__NVIC_DisableIRQ>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80020f6:	f7ff ff81 	bl	8001ffc <__NVIC_SystemReset>

080020fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff90 	bl	8002028 <SysTick_Config>
 8002108:	4603      	mov	r3, r0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff fe6a 	bl	8001df8 <HAL_GetTick>
 8002124:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d008      	beq.n	8002144 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2280      	movs	r2, #128	@ 0x80
 8002136:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e052      	b.n	80021ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0216 	bic.w	r2, r2, #22
 8002152:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002162:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	2b00      	cmp	r3, #0
 800216a:	d103      	bne.n	8002174 <HAL_DMA_Abort+0x62>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0208 	bic.w	r2, r2, #8
 8002182:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002194:	e013      	b.n	80021be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002196:	f7ff fe2f 	bl	8001df8 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	d90c      	bls.n	80021be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2220      	movs	r2, #32
 80021a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2203      	movs	r2, #3
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e015      	b.n	80021ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e4      	bne.n	8002196 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d0:	223f      	movs	r2, #63	@ 0x3f
 80021d2:	409a      	lsls	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d004      	beq.n	8002210 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2280      	movs	r2, #128	@ 0x80
 800220a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e00c      	b.n	800222a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2205      	movs	r2, #5
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800224a:	4b23      	ldr	r3, [pc, #140]	@ (80022d8 <HAL_FLASH_Program+0xa0>)
 800224c:	7e1b      	ldrb	r3, [r3, #24]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_FLASH_Program+0x1e>
 8002252:	2302      	movs	r3, #2
 8002254:	e03b      	b.n	80022ce <HAL_FLASH_Program+0x96>
 8002256:	4b20      	ldr	r3, [pc, #128]	@ (80022d8 <HAL_FLASH_Program+0xa0>)
 8002258:	2201      	movs	r2, #1
 800225a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800225c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002260:	f000 f870 	bl	8002344 <FLASH_WaitForLastOperation>
 8002264:	4603      	mov	r3, r0
 8002266:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d12b      	bne.n	80022c6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d105      	bne.n	8002280 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002274:	783b      	ldrb	r3, [r7, #0]
 8002276:	4619      	mov	r1, r3
 8002278:	68b8      	ldr	r0, [r7, #8]
 800227a:	f000 f91b 	bl	80024b4 <FLASH_Program_Byte>
 800227e:	e016      	b.n	80022ae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d105      	bne.n	8002292 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002286:	883b      	ldrh	r3, [r7, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	68b8      	ldr	r0, [r7, #8]
 800228c:	f000 f8ee 	bl	800246c <FLASH_Program_HalfWord>
 8002290:	e00d      	b.n	80022ae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b02      	cmp	r3, #2
 8002296:	d105      	bne.n	80022a4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4619      	mov	r1, r3
 800229c:	68b8      	ldr	r0, [r7, #8]
 800229e:	f000 f8c3 	bl	8002428 <FLASH_Program_Word>
 80022a2:	e004      	b.n	80022ae <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80022a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022a8:	68b8      	ldr	r0, [r7, #8]
 80022aa:	f000 f88b 	bl	80023c4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022ae:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80022b2:	f000 f847 	bl	8002344 <FLASH_WaitForLastOperation>
 80022b6:	4603      	mov	r3, r0
 80022b8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80022ba:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <HAL_FLASH_Program+0xa4>)
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	4a07      	ldr	r2, [pc, #28]	@ (80022dc <HAL_FLASH_Program+0xa4>)
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022c6:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <HAL_FLASH_Program+0xa0>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	761a      	strb	r2, [r3, #24]
  
  return status;
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000096c 	.word	0x2000096c
 80022dc:	40023c00 	.word	0x40023c00

080022e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80022ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <HAL_FLASH_Unlock+0x38>)
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	da0b      	bge.n	800230a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80022f2:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <HAL_FLASH_Unlock+0x38>)
 80022f4:	4a09      	ldr	r2, [pc, #36]	@ (800231c <HAL_FLASH_Unlock+0x3c>)
 80022f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80022f8:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <HAL_FLASH_Unlock+0x38>)
 80022fa:	4a09      	ldr	r2, [pc, #36]	@ (8002320 <HAL_FLASH_Unlock+0x40>)
 80022fc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80022fe:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <HAL_FLASH_Unlock+0x38>)
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	da01      	bge.n	800230a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800230a:	79fb      	ldrb	r3, [r7, #7]
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	40023c00 	.word	0x40023c00
 800231c:	45670123 	.word	0x45670123
 8002320:	cdef89ab 	.word	0xcdef89ab

08002324 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002328:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <HAL_FLASH_Lock+0x1c>)
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	4a04      	ldr	r2, [pc, #16]	@ (8002340 <HAL_FLASH_Lock+0x1c>)
 800232e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002332:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40023c00 	.word	0x40023c00

08002344 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002350:	4b1a      	ldr	r3, [pc, #104]	@ (80023bc <FLASH_WaitForLastOperation+0x78>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002356:	f7ff fd4f 	bl	8001df8 <HAL_GetTick>
 800235a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800235c:	e010      	b.n	8002380 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d00c      	beq.n	8002380 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <FLASH_WaitForLastOperation+0x38>
 800236c:	f7ff fd44 	bl	8001df8 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	d201      	bcs.n	8002380 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e019      	b.n	80023b4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002380:	4b0f      	ldr	r3, [pc, #60]	@ (80023c0 <FLASH_WaitForLastOperation+0x7c>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1e8      	bne.n	800235e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800238c:	4b0c      	ldr	r3, [pc, #48]	@ (80023c0 <FLASH_WaitForLastOperation+0x7c>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002398:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <FLASH_WaitForLastOperation+0x7c>)
 800239a:	2201      	movs	r2, #1
 800239c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800239e:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <FLASH_WaitForLastOperation+0x7c>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80023aa:	f000 f8a5 	bl	80024f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
  
}  
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	2000096c 	.word	0x2000096c
 80023c0:	40023c00 	.word	0x40023c00

080023c4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023d0:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <FLASH_Program_DoubleWord+0x60>)
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	4a13      	ldr	r2, [pc, #76]	@ (8002424 <FLASH_Program_DoubleWord+0x60>)
 80023d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <FLASH_Program_DoubleWord+0x60>)
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	4a10      	ldr	r2, [pc, #64]	@ (8002424 <FLASH_Program_DoubleWord+0x60>)
 80023e2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80023e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002424 <FLASH_Program_DoubleWord+0x60>)
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002424 <FLASH_Program_DoubleWord+0x60>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80023fa:	f3bf 8f6f 	isb	sy
}
 80023fe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002400:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	000a      	movs	r2, r1
 800240e:	2300      	movs	r3, #0
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	3104      	adds	r1, #4
 8002414:	4613      	mov	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40023c00 	.word	0x40023c00

08002428 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002432:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <FLASH_Program_Word+0x40>)
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	4a0c      	ldr	r2, [pc, #48]	@ (8002468 <FLASH_Program_Word+0x40>)
 8002438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800243c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800243e:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <FLASH_Program_Word+0x40>)
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	4a09      	ldr	r2, [pc, #36]	@ (8002468 <FLASH_Program_Word+0x40>)
 8002444:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002448:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800244a:	4b07      	ldr	r3, [pc, #28]	@ (8002468 <FLASH_Program_Word+0x40>)
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	4a06      	ldr	r2, [pc, #24]	@ (8002468 <FLASH_Program_Word+0x40>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	601a      	str	r2, [r3, #0]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40023c00 	.word	0x40023c00

0800246c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002478:	4b0d      	ldr	r3, [pc, #52]	@ (80024b0 <FLASH_Program_HalfWord+0x44>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	4a0c      	ldr	r2, [pc, #48]	@ (80024b0 <FLASH_Program_HalfWord+0x44>)
 800247e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002482:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002484:	4b0a      	ldr	r3, [pc, #40]	@ (80024b0 <FLASH_Program_HalfWord+0x44>)
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	4a09      	ldr	r2, [pc, #36]	@ (80024b0 <FLASH_Program_HalfWord+0x44>)
 800248a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800248e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002490:	4b07      	ldr	r3, [pc, #28]	@ (80024b0 <FLASH_Program_HalfWord+0x44>)
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	4a06      	ldr	r2, [pc, #24]	@ (80024b0 <FLASH_Program_HalfWord+0x44>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	801a      	strh	r2, [r3, #0]
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40023c00 	.word	0x40023c00

080024b4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024c0:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <FLASH_Program_Byte+0x40>)
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	4a0b      	ldr	r2, [pc, #44]	@ (80024f4 <FLASH_Program_Byte+0x40>)
 80024c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80024cc:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <FLASH_Program_Byte+0x40>)
 80024ce:	4a09      	ldr	r2, [pc, #36]	@ (80024f4 <FLASH_Program_Byte+0x40>)
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80024d4:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <FLASH_Program_Byte+0x40>)
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	4a06      	ldr	r2, [pc, #24]	@ (80024f4 <FLASH_Program_Byte+0x40>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	701a      	strb	r2, [r3, #0]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40023c00 	.word	0x40023c00

080024f8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80024fc:	4b2f      	ldr	r3, [pc, #188]	@ (80025bc <FLASH_SetErrorCode+0xc4>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002508:	4b2d      	ldr	r3, [pc, #180]	@ (80025c0 <FLASH_SetErrorCode+0xc8>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f043 0310 	orr.w	r3, r3, #16
 8002510:	4a2b      	ldr	r2, [pc, #172]	@ (80025c0 <FLASH_SetErrorCode+0xc8>)
 8002512:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002514:	4b29      	ldr	r3, [pc, #164]	@ (80025bc <FLASH_SetErrorCode+0xc4>)
 8002516:	2210      	movs	r2, #16
 8002518:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800251a:	4b28      	ldr	r3, [pc, #160]	@ (80025bc <FLASH_SetErrorCode+0xc4>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002526:	4b26      	ldr	r3, [pc, #152]	@ (80025c0 <FLASH_SetErrorCode+0xc8>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f043 0308 	orr.w	r3, r3, #8
 800252e:	4a24      	ldr	r2, [pc, #144]	@ (80025c0 <FLASH_SetErrorCode+0xc8>)
 8002530:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002532:	4b22      	ldr	r3, [pc, #136]	@ (80025bc <FLASH_SetErrorCode+0xc4>)
 8002534:	2220      	movs	r2, #32
 8002536:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002538:	4b20      	ldr	r3, [pc, #128]	@ (80025bc <FLASH_SetErrorCode+0xc4>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002544:	4b1e      	ldr	r3, [pc, #120]	@ (80025c0 <FLASH_SetErrorCode+0xc8>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	f043 0304 	orr.w	r3, r3, #4
 800254c:	4a1c      	ldr	r2, [pc, #112]	@ (80025c0 <FLASH_SetErrorCode+0xc8>)
 800254e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002550:	4b1a      	ldr	r3, [pc, #104]	@ (80025bc <FLASH_SetErrorCode+0xc4>)
 8002552:	2240      	movs	r2, #64	@ 0x40
 8002554:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002556:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <FLASH_SetErrorCode+0xc4>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002562:	4b17      	ldr	r3, [pc, #92]	@ (80025c0 <FLASH_SetErrorCode+0xc8>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f043 0302 	orr.w	r3, r3, #2
 800256a:	4a15      	ldr	r2, [pc, #84]	@ (80025c0 <FLASH_SetErrorCode+0xc8>)
 800256c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800256e:	4b13      	ldr	r3, [pc, #76]	@ (80025bc <FLASH_SetErrorCode+0xc4>)
 8002570:	2280      	movs	r2, #128	@ 0x80
 8002572:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <FLASH_SetErrorCode+0xc4>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d009      	beq.n	8002594 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002580:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <FLASH_SetErrorCode+0xc8>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	4a0d      	ldr	r2, [pc, #52]	@ (80025c0 <FLASH_SetErrorCode+0xc8>)
 800258a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800258c:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <FLASH_SetErrorCode+0xc4>)
 800258e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002592:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002594:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <FLASH_SetErrorCode+0xc4>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80025a0:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <FLASH_SetErrorCode+0xc8>)
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	f043 0320 	orr.w	r3, r3, #32
 80025a8:	4a05      	ldr	r2, [pc, #20]	@ (80025c0 <FLASH_SetErrorCode+0xc8>)
 80025aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80025ac:	4b03      	ldr	r3, [pc, #12]	@ (80025bc <FLASH_SetErrorCode+0xc4>)
 80025ae:	2202      	movs	r2, #2
 80025b0:	60da      	str	r2, [r3, #12]
  }
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	40023c00 	.word	0x40023c00
 80025c0:	2000096c 	.word	0x2000096c

080025c4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025d6:	4b31      	ldr	r3, [pc, #196]	@ (800269c <HAL_FLASHEx_Erase+0xd8>)
 80025d8:	7e1b      	ldrb	r3, [r3, #24]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_FLASHEx_Erase+0x1e>
 80025de:	2302      	movs	r3, #2
 80025e0:	e058      	b.n	8002694 <HAL_FLASHEx_Erase+0xd0>
 80025e2:	4b2e      	ldr	r3, [pc, #184]	@ (800269c <HAL_FLASHEx_Erase+0xd8>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025e8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80025ec:	f7ff feaa 	bl	8002344 <FLASH_WaitForLastOperation>
 80025f0:	4603      	mov	r3, r0
 80025f2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d148      	bne.n	800268c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002600:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d115      	bne.n	8002636 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4619      	mov	r1, r3
 8002616:	4610      	mov	r0, r2
 8002618:	f000 f844 	bl	80026a4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800261c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002620:	f7ff fe90 	bl	8002344 <FLASH_WaitForLastOperation>
 8002624:	4603      	mov	r3, r0
 8002626:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002628:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <HAL_FLASHEx_Erase+0xdc>)
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	4a1c      	ldr	r2, [pc, #112]	@ (80026a0 <HAL_FLASHEx_Erase+0xdc>)
 800262e:	f023 0304 	bic.w	r3, r3, #4
 8002632:	6113      	str	r3, [r2, #16]
 8002634:	e028      	b.n	8002688 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	e01c      	b.n	8002678 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	4619      	mov	r1, r3
 8002646:	68b8      	ldr	r0, [r7, #8]
 8002648:	f000 f850 	bl	80026ec <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800264c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002650:	f7ff fe78 	bl	8002344 <FLASH_WaitForLastOperation>
 8002654:	4603      	mov	r3, r0
 8002656:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002658:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <HAL_FLASHEx_Erase+0xdc>)
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	4a10      	ldr	r2, [pc, #64]	@ (80026a0 <HAL_FLASHEx_Erase+0xdc>)
 800265e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002662:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	601a      	str	r2, [r3, #0]
          break;
 8002670:	e00a      	b.n	8002688 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	3301      	adds	r3, #1
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4413      	add	r3, r2
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	429a      	cmp	r2, r3
 8002686:	d3da      	bcc.n	800263e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002688:	f000 f878 	bl	800277c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800268c:	4b03      	ldr	r3, [pc, #12]	@ (800269c <HAL_FLASHEx_Erase+0xd8>)
 800268e:	2200      	movs	r2, #0
 8002690:	761a      	strb	r2, [r3, #24]

  return status;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	2000096c 	.word	0x2000096c
 80026a0:	40023c00 	.word	0x40023c00

080026a4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026b0:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <FLASH_MassErase+0x44>)
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	4a0c      	ldr	r2, [pc, #48]	@ (80026e8 <FLASH_MassErase+0x44>)
 80026b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80026bc:	4b0a      	ldr	r3, [pc, #40]	@ (80026e8 <FLASH_MassErase+0x44>)
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	4a09      	ldr	r2, [pc, #36]	@ (80026e8 <FLASH_MassErase+0x44>)
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80026c8:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <FLASH_MassErase+0x44>)
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	4313      	orrs	r3, r2
 80026d2:	4a05      	ldr	r2, [pc, #20]	@ (80026e8 <FLASH_MassErase+0x44>)
 80026d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d8:	6113      	str	r3, [r2, #16]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40023c00 	.word	0x40023c00

080026ec <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d102      	bne.n	8002708 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	e010      	b.n	800272a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d103      	bne.n	8002716 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800270e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e009      	b.n	800272a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d103      	bne.n	8002724 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800271c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	e002      	b.n	800272a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002724:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002728:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800272a:	4b13      	ldr	r3, [pc, #76]	@ (8002778 <FLASH_Erase_Sector+0x8c>)
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	4a12      	ldr	r2, [pc, #72]	@ (8002778 <FLASH_Erase_Sector+0x8c>)
 8002730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002734:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002736:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <FLASH_Erase_Sector+0x8c>)
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	490f      	ldr	r1, [pc, #60]	@ (8002778 <FLASH_Erase_Sector+0x8c>)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002742:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <FLASH_Erase_Sector+0x8c>)
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	4a0c      	ldr	r2, [pc, #48]	@ (8002778 <FLASH_Erase_Sector+0x8c>)
 8002748:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800274c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800274e:	4b0a      	ldr	r3, [pc, #40]	@ (8002778 <FLASH_Erase_Sector+0x8c>)
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4313      	orrs	r3, r2
 8002758:	4a07      	ldr	r2, [pc, #28]	@ (8002778 <FLASH_Erase_Sector+0x8c>)
 800275a:	f043 0302 	orr.w	r3, r3, #2
 800275e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <FLASH_Erase_Sector+0x8c>)
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	4a04      	ldr	r2, [pc, #16]	@ (8002778 <FLASH_Erase_Sector+0x8c>)
 8002766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276a:	6113      	str	r3, [r2, #16]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40023c00 	.word	0x40023c00

0800277c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002780:	4b20      	ldr	r3, [pc, #128]	@ (8002804 <FLASH_FlushCaches+0x88>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002788:	2b00      	cmp	r3, #0
 800278a:	d017      	beq.n	80027bc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800278c:	4b1d      	ldr	r3, [pc, #116]	@ (8002804 <FLASH_FlushCaches+0x88>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1c      	ldr	r2, [pc, #112]	@ (8002804 <FLASH_FlushCaches+0x88>)
 8002792:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002796:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002798:	4b1a      	ldr	r3, [pc, #104]	@ (8002804 <FLASH_FlushCaches+0x88>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a19      	ldr	r2, [pc, #100]	@ (8002804 <FLASH_FlushCaches+0x88>)
 800279e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	4b17      	ldr	r3, [pc, #92]	@ (8002804 <FLASH_FlushCaches+0x88>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a16      	ldr	r2, [pc, #88]	@ (8002804 <FLASH_FlushCaches+0x88>)
 80027aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027ae:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027b0:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <FLASH_FlushCaches+0x88>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a13      	ldr	r2, [pc, #76]	@ (8002804 <FLASH_FlushCaches+0x88>)
 80027b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ba:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80027bc:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <FLASH_FlushCaches+0x88>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d017      	beq.n	80027f8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80027c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <FLASH_FlushCaches+0x88>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002804 <FLASH_FlushCaches+0x88>)
 80027ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027d2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80027d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <FLASH_FlushCaches+0x88>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002804 <FLASH_FlushCaches+0x88>)
 80027da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <FLASH_FlushCaches+0x88>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a07      	ldr	r2, [pc, #28]	@ (8002804 <FLASH_FlushCaches+0x88>)
 80027e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027ea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80027ec:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <FLASH_FlushCaches+0x88>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a04      	ldr	r2, [pc, #16]	@ (8002804 <FLASH_FlushCaches+0x88>)
 80027f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027f6:	6013      	str	r3, [r2, #0]
  }
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40023c00 	.word	0x40023c00

08002808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	@ 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	e159      	b.n	8002ad8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002824:	2201      	movs	r2, #1
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	429a      	cmp	r2, r3
 800283e:	f040 8148 	bne.w	8002ad2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b01      	cmp	r3, #1
 800284c:	d005      	beq.n	800285a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002856:	2b02      	cmp	r3, #2
 8002858:	d130      	bne.n	80028bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	2203      	movs	r2, #3
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002890:	2201      	movs	r2, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 0201 	and.w	r2, r3, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d017      	beq.n	80028f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d123      	bne.n	800294c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	08da      	lsrs	r2, r3, #3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3208      	adds	r2, #8
 800290c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	220f      	movs	r2, #15
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	08da      	lsrs	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3208      	adds	r2, #8
 8002946:	69b9      	ldr	r1, [r7, #24]
 8002948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	2203      	movs	r2, #3
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0203 	and.w	r2, r3, #3
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 80a2 	beq.w	8002ad2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b57      	ldr	r3, [pc, #348]	@ (8002af0 <HAL_GPIO_Init+0x2e8>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	4a56      	ldr	r2, [pc, #344]	@ (8002af0 <HAL_GPIO_Init+0x2e8>)
 8002998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800299c:	6453      	str	r3, [r2, #68]	@ 0x44
 800299e:	4b54      	ldr	r3, [pc, #336]	@ (8002af0 <HAL_GPIO_Init+0x2e8>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029aa:	4a52      	ldr	r2, [pc, #328]	@ (8002af4 <HAL_GPIO_Init+0x2ec>)
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	3302      	adds	r3, #2
 80029b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	220f      	movs	r2, #15
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a49      	ldr	r2, [pc, #292]	@ (8002af8 <HAL_GPIO_Init+0x2f0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d019      	beq.n	8002a0a <HAL_GPIO_Init+0x202>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a48      	ldr	r2, [pc, #288]	@ (8002afc <HAL_GPIO_Init+0x2f4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_GPIO_Init+0x1fe>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a47      	ldr	r2, [pc, #284]	@ (8002b00 <HAL_GPIO_Init+0x2f8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00d      	beq.n	8002a02 <HAL_GPIO_Init+0x1fa>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a46      	ldr	r2, [pc, #280]	@ (8002b04 <HAL_GPIO_Init+0x2fc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <HAL_GPIO_Init+0x1f6>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a45      	ldr	r2, [pc, #276]	@ (8002b08 <HAL_GPIO_Init+0x300>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d101      	bne.n	80029fa <HAL_GPIO_Init+0x1f2>
 80029f6:	2304      	movs	r3, #4
 80029f8:	e008      	b.n	8002a0c <HAL_GPIO_Init+0x204>
 80029fa:	2307      	movs	r3, #7
 80029fc:	e006      	b.n	8002a0c <HAL_GPIO_Init+0x204>
 80029fe:	2303      	movs	r3, #3
 8002a00:	e004      	b.n	8002a0c <HAL_GPIO_Init+0x204>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e002      	b.n	8002a0c <HAL_GPIO_Init+0x204>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_GPIO_Init+0x204>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	f002 0203 	and.w	r2, r2, #3
 8002a12:	0092      	lsls	r2, r2, #2
 8002a14:	4093      	lsls	r3, r2
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a1c:	4935      	ldr	r1, [pc, #212]	@ (8002af4 <HAL_GPIO_Init+0x2ec>)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	3302      	adds	r3, #2
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a2a:	4b38      	ldr	r3, [pc, #224]	@ (8002b0c <HAL_GPIO_Init+0x304>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8002b0c <HAL_GPIO_Init+0x304>)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a54:	4b2d      	ldr	r3, [pc, #180]	@ (8002b0c <HAL_GPIO_Init+0x304>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a78:	4a24      	ldr	r2, [pc, #144]	@ (8002b0c <HAL_GPIO_Init+0x304>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a7e:	4b23      	ldr	r3, [pc, #140]	@ (8002b0c <HAL_GPIO_Init+0x304>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b0c <HAL_GPIO_Init+0x304>)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aa8:	4b18      	ldr	r3, [pc, #96]	@ (8002b0c <HAL_GPIO_Init+0x304>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002acc:	4a0f      	ldr	r2, [pc, #60]	@ (8002b0c <HAL_GPIO_Init+0x304>)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b0f      	cmp	r3, #15
 8002adc:	f67f aea2 	bls.w	8002824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3724      	adds	r7, #36	@ 0x24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40013800 	.word	0x40013800
 8002af8:	40020000 	.word	0x40020000
 8002afc:	40020400 	.word	0x40020400
 8002b00:	40020800 	.word	0x40020800
 8002b04:	40020c00 	.word	0x40020c00
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40013c00 	.word	0x40013c00

08002b10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	e0bb      	b.n	8002ca4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	f040 80ab 	bne.w	8002c9e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002b48:	4a5c      	ldr	r2, [pc, #368]	@ (8002cbc <HAL_GPIO_DeInit+0x1ac>)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	3302      	adds	r3, #2
 8002b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b54:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	220f      	movs	r2, #15
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	4013      	ands	r3, r2
 8002b68:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a54      	ldr	r2, [pc, #336]	@ (8002cc0 <HAL_GPIO_DeInit+0x1b0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d019      	beq.n	8002ba6 <HAL_GPIO_DeInit+0x96>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a53      	ldr	r2, [pc, #332]	@ (8002cc4 <HAL_GPIO_DeInit+0x1b4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_GPIO_DeInit+0x92>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a52      	ldr	r2, [pc, #328]	@ (8002cc8 <HAL_GPIO_DeInit+0x1b8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00d      	beq.n	8002b9e <HAL_GPIO_DeInit+0x8e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a51      	ldr	r2, [pc, #324]	@ (8002ccc <HAL_GPIO_DeInit+0x1bc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d007      	beq.n	8002b9a <HAL_GPIO_DeInit+0x8a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a50      	ldr	r2, [pc, #320]	@ (8002cd0 <HAL_GPIO_DeInit+0x1c0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <HAL_GPIO_DeInit+0x86>
 8002b92:	2304      	movs	r3, #4
 8002b94:	e008      	b.n	8002ba8 <HAL_GPIO_DeInit+0x98>
 8002b96:	2307      	movs	r3, #7
 8002b98:	e006      	b.n	8002ba8 <HAL_GPIO_DeInit+0x98>
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e004      	b.n	8002ba8 <HAL_GPIO_DeInit+0x98>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e002      	b.n	8002ba8 <HAL_GPIO_DeInit+0x98>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_GPIO_DeInit+0x98>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	f002 0203 	and.w	r2, r2, #3
 8002bae:	0092      	lsls	r2, r2, #2
 8002bb0:	4093      	lsls	r3, r2
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d132      	bne.n	8002c1e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002bb8:	4b46      	ldr	r3, [pc, #280]	@ (8002cd4 <HAL_GPIO_DeInit+0x1c4>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	4944      	ldr	r1, [pc, #272]	@ (8002cd4 <HAL_GPIO_DeInit+0x1c4>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002bc6:	4b43      	ldr	r3, [pc, #268]	@ (8002cd4 <HAL_GPIO_DeInit+0x1c4>)
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	4941      	ldr	r1, [pc, #260]	@ (8002cd4 <HAL_GPIO_DeInit+0x1c4>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd4 <HAL_GPIO_DeInit+0x1c4>)
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	493d      	ldr	r1, [pc, #244]	@ (8002cd4 <HAL_GPIO_DeInit+0x1c4>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002be2:	4b3c      	ldr	r3, [pc, #240]	@ (8002cd4 <HAL_GPIO_DeInit+0x1c4>)
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	493a      	ldr	r1, [pc, #232]	@ (8002cd4 <HAL_GPIO_DeInit+0x1c4>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	220f      	movs	r2, #15
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002c00:	4a2e      	ldr	r2, [pc, #184]	@ (8002cbc <HAL_GPIO_DeInit+0x1ac>)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	3302      	adds	r3, #2
 8002c08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	482a      	ldr	r0, [pc, #168]	@ (8002cbc <HAL_GPIO_DeInit+0x1ac>)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	400a      	ands	r2, r1
 8002c18:	3302      	adds	r3, #2
 8002c1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2103      	movs	r1, #3
 8002c28:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	401a      	ands	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	08da      	lsrs	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3208      	adds	r2, #8
 8002c3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	220f      	movs	r2, #15
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	08d2      	lsrs	r2, r2, #3
 8002c54:	4019      	ands	r1, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3208      	adds	r2, #8
 8002c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	2103      	movs	r1, #3
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	401a      	ands	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	2101      	movs	r1, #1
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	401a      	ands	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	2103      	movs	r1, #3
 8002c92:	fa01 f303 	lsl.w	r3, r1, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	401a      	ands	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b0f      	cmp	r3, #15
 8002ca8:	f67f af40 	bls.w	8002b2c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40013800 	.word	0x40013800
 8002cc0:	40020000 	.word	0x40020000
 8002cc4:	40020400 	.word	0x40020400
 8002cc8:	40020800 	.word	0x40020800
 8002ccc:	40020c00 	.word	0x40020c00
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40013c00 	.word	0x40013c00

08002cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	e001      	b.n	8002cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	807b      	strh	r3, [r7, #2]
 8002d14:	4613      	mov	r3, r2
 8002d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d18:	787b      	ldrb	r3, [r7, #1]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d1e:	887a      	ldrh	r2, [r7, #2]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d24:	e003      	b.n	8002d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d26:	887b      	ldrh	r3, [r7, #2]
 8002d28:	041a      	lsls	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	619a      	str	r2, [r3, #24]
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e267      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d075      	beq.n	8002e46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d5a:	4b88      	ldr	r3, [pc, #544]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d00c      	beq.n	8002d80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d66:	4b85      	ldr	r3, [pc, #532]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d112      	bne.n	8002d98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d72:	4b82      	ldr	r3, [pc, #520]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d7e:	d10b      	bne.n	8002d98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d80:	4b7e      	ldr	r3, [pc, #504]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d05b      	beq.n	8002e44 <HAL_RCC_OscConfig+0x108>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d157      	bne.n	8002e44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e242      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da0:	d106      	bne.n	8002db0 <HAL_RCC_OscConfig+0x74>
 8002da2:	4b76      	ldr	r3, [pc, #472]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a75      	ldr	r2, [pc, #468]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e01d      	b.n	8002dec <HAL_RCC_OscConfig+0xb0>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x98>
 8002dba:	4b70      	ldr	r3, [pc, #448]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6f      	ldr	r2, [pc, #444]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a6c      	ldr	r2, [pc, #432]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	e00b      	b.n	8002dec <HAL_RCC_OscConfig+0xb0>
 8002dd4:	4b69      	ldr	r3, [pc, #420]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a68      	ldr	r2, [pc, #416]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	4b66      	ldr	r3, [pc, #408]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a65      	ldr	r2, [pc, #404]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002de6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d013      	beq.n	8002e1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7ff f800 	bl	8001df8 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7fe fffc 	bl	8001df8 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	@ 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e207      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0xc0>
 8002e1a:	e014      	b.n	8002e46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7fe ffec 	bl	8001df8 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e24:	f7fe ffe8 	bl	8001df8 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	@ 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e1f3      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e36:	4b51      	ldr	r3, [pc, #324]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0xe8>
 8002e42:	e000      	b.n	8002e46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d063      	beq.n	8002f1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e52:	4b4a      	ldr	r3, [pc, #296]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00b      	beq.n	8002e76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e5e:	4b47      	ldr	r3, [pc, #284]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d11c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e6a:	4b44      	ldr	r3, [pc, #272]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d116      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	4b41      	ldr	r3, [pc, #260]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <HAL_RCC_OscConfig+0x152>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d001      	beq.n	8002e8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e1c7      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4937      	ldr	r1, [pc, #220]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea2:	e03a      	b.n	8002f1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d020      	beq.n	8002eee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eac:	4b34      	ldr	r3, [pc, #208]	@ (8002f80 <HAL_RCC_OscConfig+0x244>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb2:	f7fe ffa1 	bl	8001df8 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eba:	f7fe ff9d 	bl	8001df8 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e1a8      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed8:	4b28      	ldr	r3, [pc, #160]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4925      	ldr	r1, [pc, #148]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	600b      	str	r3, [r1, #0]
 8002eec:	e015      	b.n	8002f1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eee:	4b24      	ldr	r3, [pc, #144]	@ (8002f80 <HAL_RCC_OscConfig+0x244>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fe ff80 	bl	8001df8 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efc:	f7fe ff7c 	bl	8001df8 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e187      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d036      	beq.n	8002f94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d016      	beq.n	8002f5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2e:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <HAL_RCC_OscConfig+0x248>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7fe ff60 	bl	8001df8 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f3c:	f7fe ff5c 	bl	8001df8 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e167      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <HAL_RCC_OscConfig+0x240>)
 8002f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x200>
 8002f5a:	e01b      	b.n	8002f94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5c:	4b09      	ldr	r3, [pc, #36]	@ (8002f84 <HAL_RCC_OscConfig+0x248>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f62:	f7fe ff49 	bl	8001df8 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	e00e      	b.n	8002f88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6a:	f7fe ff45 	bl	8001df8 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d907      	bls.n	8002f88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e150      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	42470000 	.word	0x42470000
 8002f84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f88:	4b88      	ldr	r3, [pc, #544]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 8002f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1ea      	bne.n	8002f6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8097 	beq.w	80030d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa6:	4b81      	ldr	r3, [pc, #516]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10f      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	4b7d      	ldr	r3, [pc, #500]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	4a7c      	ldr	r2, [pc, #496]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 8002fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fc2:	4b7a      	ldr	r3, [pc, #488]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd2:	4b77      	ldr	r3, [pc, #476]	@ (80031b0 <HAL_RCC_OscConfig+0x474>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d118      	bne.n	8003010 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fde:	4b74      	ldr	r3, [pc, #464]	@ (80031b0 <HAL_RCC_OscConfig+0x474>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a73      	ldr	r2, [pc, #460]	@ (80031b0 <HAL_RCC_OscConfig+0x474>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fea:	f7fe ff05 	bl	8001df8 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff2:	f7fe ff01 	bl	8001df8 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e10c      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003004:	4b6a      	ldr	r3, [pc, #424]	@ (80031b0 <HAL_RCC_OscConfig+0x474>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d106      	bne.n	8003026 <HAL_RCC_OscConfig+0x2ea>
 8003018:	4b64      	ldr	r3, [pc, #400]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 800301a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301c:	4a63      	ldr	r2, [pc, #396]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6713      	str	r3, [r2, #112]	@ 0x70
 8003024:	e01c      	b.n	8003060 <HAL_RCC_OscConfig+0x324>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b05      	cmp	r3, #5
 800302c:	d10c      	bne.n	8003048 <HAL_RCC_OscConfig+0x30c>
 800302e:	4b5f      	ldr	r3, [pc, #380]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003032:	4a5e      	ldr	r2, [pc, #376]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	6713      	str	r3, [r2, #112]	@ 0x70
 800303a:	4b5c      	ldr	r3, [pc, #368]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303e:	4a5b      	ldr	r2, [pc, #364]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6713      	str	r3, [r2, #112]	@ 0x70
 8003046:	e00b      	b.n	8003060 <HAL_RCC_OscConfig+0x324>
 8003048:	4b58      	ldr	r3, [pc, #352]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304c:	4a57      	ldr	r2, [pc, #348]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	6713      	str	r3, [r2, #112]	@ 0x70
 8003054:	4b55      	ldr	r3, [pc, #340]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003058:	4a54      	ldr	r2, [pc, #336]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 800305a:	f023 0304 	bic.w	r3, r3, #4
 800305e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d015      	beq.n	8003094 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003068:	f7fe fec6 	bl	8001df8 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306e:	e00a      	b.n	8003086 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003070:	f7fe fec2 	bl	8001df8 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e0cb      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003086:	4b49      	ldr	r3, [pc, #292]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0ee      	beq.n	8003070 <HAL_RCC_OscConfig+0x334>
 8003092:	e014      	b.n	80030be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003094:	f7fe feb0 	bl	8001df8 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309a:	e00a      	b.n	80030b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309c:	f7fe feac 	bl	8001df8 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e0b5      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b2:	4b3e      	ldr	r3, [pc, #248]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 80030b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1ee      	bne.n	800309c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030be:	7dfb      	ldrb	r3, [r7, #23]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d105      	bne.n	80030d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c4:	4b39      	ldr	r3, [pc, #228]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	4a38      	ldr	r2, [pc, #224]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 80030ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80a1 	beq.w	800321c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030da:	4b34      	ldr	r3, [pc, #208]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d05c      	beq.n	80031a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d141      	bne.n	8003172 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ee:	4b31      	ldr	r3, [pc, #196]	@ (80031b4 <HAL_RCC_OscConfig+0x478>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7fe fe80 	bl	8001df8 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fe fe7c 	bl	8001df8 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e087      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310e:	4b27      	ldr	r3, [pc, #156]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69da      	ldr	r2, [r3, #28]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	019b      	lsls	r3, r3, #6
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	3b01      	subs	r3, #1
 8003134:	041b      	lsls	r3, r3, #16
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313c:	061b      	lsls	r3, r3, #24
 800313e:	491b      	ldr	r1, [pc, #108]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 8003140:	4313      	orrs	r3, r2
 8003142:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003144:	4b1b      	ldr	r3, [pc, #108]	@ (80031b4 <HAL_RCC_OscConfig+0x478>)
 8003146:	2201      	movs	r2, #1
 8003148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314a:	f7fe fe55 	bl	8001df8 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003152:	f7fe fe51 	bl	8001df8 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e05c      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003164:	4b11      	ldr	r3, [pc, #68]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x416>
 8003170:	e054      	b.n	800321c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003172:	4b10      	ldr	r3, [pc, #64]	@ (80031b4 <HAL_RCC_OscConfig+0x478>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fe fe3e 	bl	8001df8 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003180:	f7fe fe3a 	bl	8001df8 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e045      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003192:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <HAL_RCC_OscConfig+0x470>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x444>
 800319e:	e03d      	b.n	800321c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d107      	bne.n	80031b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e038      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40007000 	.word	0x40007000
 80031b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003228 <HAL_RCC_OscConfig+0x4ec>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d028      	beq.n	8003218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d121      	bne.n	8003218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	429a      	cmp	r2, r3
 80031e0:	d11a      	bne.n	8003218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031e8:	4013      	ands	r3, r2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d111      	bne.n	8003218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fe:	085b      	lsrs	r3, r3, #1
 8003200:	3b01      	subs	r3, #1
 8003202:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d107      	bne.n	8003218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003212:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800

0800322c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0cc      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003240:	4b68      	ldr	r3, [pc, #416]	@ (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d90c      	bls.n	8003268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4b65      	ldr	r3, [pc, #404]	@ (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b63      	ldr	r3, [pc, #396]	@ (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0b8      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d020      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003280:	4b59      	ldr	r3, [pc, #356]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4a58      	ldr	r2, [pc, #352]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800328a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003298:	4b53      	ldr	r3, [pc, #332]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	4a52      	ldr	r2, [pc, #328]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a4:	4b50      	ldr	r3, [pc, #320]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	494d      	ldr	r1, [pc, #308]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d044      	beq.n	800334c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	4b47      	ldr	r3, [pc, #284]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d119      	bne.n	800330a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e07f      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d003      	beq.n	80032ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ea:	4b3f      	ldr	r3, [pc, #252]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e06f      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fa:	4b3b      	ldr	r3, [pc, #236]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e067      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800330a:	4b37      	ldr	r3, [pc, #220]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f023 0203 	bic.w	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4934      	ldr	r1, [pc, #208]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	4313      	orrs	r3, r2
 800331a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800331c:	f7fe fd6c 	bl	8001df8 <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003322:	e00a      	b.n	800333a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003324:	f7fe fd68 	bl	8001df8 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e04f      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	4b2b      	ldr	r3, [pc, #172]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 020c 	and.w	r2, r3, #12
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	429a      	cmp	r2, r3
 800334a:	d1eb      	bne.n	8003324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800334c:	4b25      	ldr	r3, [pc, #148]	@ (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d20c      	bcs.n	8003374 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335a:	4b22      	ldr	r3, [pc, #136]	@ (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b20      	ldr	r3, [pc, #128]	@ (80033e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e032      	b.n	80033da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003380:	4b19      	ldr	r3, [pc, #100]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4916      	ldr	r1, [pc, #88]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800339e:	4b12      	ldr	r3, [pc, #72]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	490e      	ldr	r1, [pc, #56]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033b2:	f000 f821 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 80033b6:	4602      	mov	r2, r0
 80033b8:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	490a      	ldr	r1, [pc, #40]	@ (80033ec <HAL_RCC_ClockConfig+0x1c0>)
 80033c4:	5ccb      	ldrb	r3, [r1, r3]
 80033c6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ca:	4a09      	ldr	r2, [pc, #36]	@ (80033f0 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ce:	4b09      	ldr	r3, [pc, #36]	@ (80033f4 <HAL_RCC_ClockConfig+0x1c8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fccc 	bl	8001d70 <HAL_InitTick>

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40023c00 	.word	0x40023c00
 80033e8:	40023800 	.word	0x40023800
 80033ec:	08005cdc 	.word	0x08005cdc
 80033f0:	20000000 	.word	0x20000000
 80033f4:	20000014 	.word	0x20000014

080033f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033fc:	b090      	sub	sp, #64	@ 0x40
 80033fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	637b      	str	r3, [r7, #52]	@ 0x34
 8003404:	2300      	movs	r3, #0
 8003406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003408:	2300      	movs	r3, #0
 800340a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003410:	4b59      	ldr	r3, [pc, #356]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x180>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 030c 	and.w	r3, r3, #12
 8003418:	2b08      	cmp	r3, #8
 800341a:	d00d      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0x40>
 800341c:	2b08      	cmp	r3, #8
 800341e:	f200 80a1 	bhi.w	8003564 <HAL_RCC_GetSysClockFreq+0x16c>
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x34>
 8003426:	2b04      	cmp	r3, #4
 8003428:	d003      	beq.n	8003432 <HAL_RCC_GetSysClockFreq+0x3a>
 800342a:	e09b      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800342c:	4b53      	ldr	r3, [pc, #332]	@ (800357c <HAL_RCC_GetSysClockFreq+0x184>)
 800342e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003430:	e09b      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003432:	4b53      	ldr	r3, [pc, #332]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x188>)
 8003434:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003436:	e098      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003438:	4b4f      	ldr	r3, [pc, #316]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x180>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003440:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003442:	4b4d      	ldr	r3, [pc, #308]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x180>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d028      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800344e:	4b4a      	ldr	r3, [pc, #296]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x180>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	099b      	lsrs	r3, r3, #6
 8003454:	2200      	movs	r2, #0
 8003456:	623b      	str	r3, [r7, #32]
 8003458:	627a      	str	r2, [r7, #36]	@ 0x24
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003460:	2100      	movs	r1, #0
 8003462:	4b47      	ldr	r3, [pc, #284]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x188>)
 8003464:	fb03 f201 	mul.w	r2, r3, r1
 8003468:	2300      	movs	r3, #0
 800346a:	fb00 f303 	mul.w	r3, r0, r3
 800346e:	4413      	add	r3, r2
 8003470:	4a43      	ldr	r2, [pc, #268]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x188>)
 8003472:	fba0 1202 	umull	r1, r2, r0, r2
 8003476:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003478:	460a      	mov	r2, r1
 800347a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800347c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800347e:	4413      	add	r3, r2
 8003480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003484:	2200      	movs	r2, #0
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	61fa      	str	r2, [r7, #28]
 800348a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800348e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003492:	f7fc fef5 	bl	8000280 <__aeabi_uldivmod>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4613      	mov	r3, r2
 800349c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800349e:	e053      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a0:	4b35      	ldr	r3, [pc, #212]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x180>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	099b      	lsrs	r3, r3, #6
 80034a6:	2200      	movs	r2, #0
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	617a      	str	r2, [r7, #20]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034b2:	f04f 0b00 	mov.w	fp, #0
 80034b6:	4652      	mov	r2, sl
 80034b8:	465b      	mov	r3, fp
 80034ba:	f04f 0000 	mov.w	r0, #0
 80034be:	f04f 0100 	mov.w	r1, #0
 80034c2:	0159      	lsls	r1, r3, #5
 80034c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c8:	0150      	lsls	r0, r2, #5
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	ebb2 080a 	subs.w	r8, r2, sl
 80034d2:	eb63 090b 	sbc.w	r9, r3, fp
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034ea:	ebb2 0408 	subs.w	r4, r2, r8
 80034ee:	eb63 0509 	sbc.w	r5, r3, r9
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	00eb      	lsls	r3, r5, #3
 80034fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003500:	00e2      	lsls	r2, r4, #3
 8003502:	4614      	mov	r4, r2
 8003504:	461d      	mov	r5, r3
 8003506:	eb14 030a 	adds.w	r3, r4, sl
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	eb45 030b 	adc.w	r3, r5, fp
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800351e:	4629      	mov	r1, r5
 8003520:	028b      	lsls	r3, r1, #10
 8003522:	4621      	mov	r1, r4
 8003524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003528:	4621      	mov	r1, r4
 800352a:	028a      	lsls	r2, r1, #10
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003532:	2200      	movs	r2, #0
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	60fa      	str	r2, [r7, #12]
 8003538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800353c:	f7fc fea0 	bl	8000280 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4613      	mov	r3, r2
 8003546:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x180>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	3301      	adds	r3, #1
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003558:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003562:	e002      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003564:	4b05      	ldr	r3, [pc, #20]	@ (800357c <HAL_RCC_GetSysClockFreq+0x184>)
 8003566:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800356c:	4618      	mov	r0, r3
 800356e:	3740      	adds	r7, #64	@ 0x40
 8003570:	46bd      	mov	sp, r7
 8003572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800
 800357c:	00f42400 	.word	0x00f42400
 8003580:	017d7840 	.word	0x017d7840

08003584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003588:	4b03      	ldr	r3, [pc, #12]	@ (8003598 <HAL_RCC_GetHCLKFreq+0x14>)
 800358a:	681b      	ldr	r3, [r3, #0]
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000000 	.word	0x20000000

0800359c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035a0:	f7ff fff0 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	0a9b      	lsrs	r3, r3, #10
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4903      	ldr	r1, [pc, #12]	@ (80035c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b2:	5ccb      	ldrb	r3, [r1, r3]
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40023800 	.word	0x40023800
 80035c0:	08005cec 	.word	0x08005cec

080035c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035c8:	f7ff ffdc 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	0b5b      	lsrs	r3, r3, #13
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4903      	ldr	r1, [pc, #12]	@ (80035e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40023800 	.word	0x40023800
 80035e8:	08005cec 	.word	0x08005cec

080035ec <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80035f2:	f7fe fc01 	bl	8001df8 <HAL_GetTick>
 80035f6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80035f8:	4b5d      	ldr	r3, [pc, #372]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a5c      	ldr	r2, [pc, #368]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003606:	f7fe fbf7 	bl	8001df8 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e0a7      	b.n	8003768 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003618:	4b55      	ldr	r3, [pc, #340]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003624:	4b52      	ldr	r3, [pc, #328]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a51      	ldr	r2, [pc, #324]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 800362a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800362e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003630:	f7fe fbe2 	bl	8001df8 <HAL_GetTick>
 8003634:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003636:	4b4e      	ldr	r3, [pc, #312]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 8003638:	2200      	movs	r2, #0
 800363a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800363c:	e00a      	b.n	8003654 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363e:	f7fe fbdb 	bl	8001df8 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364c:	4293      	cmp	r3, r2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e089      	b.n	8003768 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003654:	4b46      	ldr	r3, [pc, #280]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1ee      	bne.n	800363e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003660:	f7fe fbca 	bl	8001df8 <HAL_GetTick>
 8003664:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003666:	4b42      	ldr	r3, [pc, #264]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a41      	ldr	r2, [pc, #260]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 800366c:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8003670:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003674:	f7fe fbc0 	bl	8001df8 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	@ 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e070      	b.n	8003768 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003686:	4b3a      	ldr	r3, [pc, #232]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003692:	f7fe fbb1 	bl	8001df8 <HAL_GetTick>
 8003696:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003698:	4b35      	ldr	r3, [pc, #212]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a34      	ldr	r2, [pc, #208]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 800369e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036a2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a6:	f7fe fba7 	bl	8001df8 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e057      	b.n	8003768 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80036b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f0      	bne.n	80036a6 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80036c4:	f7fe fb98 	bl	8001df8 <HAL_GetTick>
 80036c8:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80036ca:	4b29      	ldr	r3, [pc, #164]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a28      	ldr	r2, [pc, #160]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 80036d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036d4:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036d8:	f7fe fb8e 	bl	8001df8 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e03e      	b.n	8003768 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80036ea:	4b21      	ldr	r3, [pc, #132]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80036f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 80036f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003774 <HAL_RCC_DeInit+0x188>)
 80036fa:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80036fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 80036fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003778 <HAL_RCC_DeInit+0x18c>)
 8003700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003704:	4b1a      	ldr	r3, [pc, #104]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a19      	ldr	r2, [pc, #100]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 800370a:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800370e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003710:	4b17      	ldr	r3, [pc, #92]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4a16      	ldr	r2, [pc, #88]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 8003716:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800371a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 800371c:	4b14      	ldr	r3, [pc, #80]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4a13      	ldr	r2, [pc, #76]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 8003722:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8003726:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003728:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4a10      	ldr	r2, [pc, #64]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 800372e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003732:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003734:	4b0e      	ldr	r3, [pc, #56]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 8003736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003738:	4a0d      	ldr	r2, [pc, #52]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003740:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 8003742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003744:	4a0a      	ldr	r2, [pc, #40]	@ (8003770 <HAL_RCC_DeInit+0x184>)
 8003746:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800374a:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800374c:	4b0b      	ldr	r3, [pc, #44]	@ (800377c <HAL_RCC_DeInit+0x190>)
 800374e:	4a0c      	ldr	r2, [pc, #48]	@ (8003780 <HAL_RCC_DeInit+0x194>)
 8003750:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003752:	4b0c      	ldr	r3, [pc, #48]	@ (8003784 <HAL_RCC_DeInit+0x198>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe fb0a 	bl	8001d70 <HAL_InitTick>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8003766:	2300      	movs	r3, #0
  }
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40023800 	.word	0x40023800
 8003774:	04003010 	.word	0x04003010
 8003778:	20003010 	.word	0x20003010
 800377c:	20000000 	.word	0x20000000
 8003780:	00f42400 	.word	0x00f42400
 8003784:	20000014 	.word	0x20000014

08003788 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e07b      	b.n	8003892 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d108      	bne.n	80037b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037aa:	d009      	beq.n	80037c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	61da      	str	r2, [r3, #28]
 80037b2:	e005      	b.n	80037c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd f8fa 	bl	80009d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003844:	ea42 0103 	orr.w	r1, r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	f003 0104 	and.w	r1, r3, #4
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	f003 0210 	and.w	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003880:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e01a      	b.n	80038e2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038c2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7fd f8cd 	bl	8000a64 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b088      	sub	sp, #32
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	603b      	str	r3, [r7, #0]
 80038f6:	4613      	mov	r3, r2
 80038f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_SPI_Transmit+0x22>
 8003908:	2302      	movs	r3, #2
 800390a:	e12d      	b.n	8003b68 <HAL_SPI_Transmit+0x27e>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003914:	f7fe fa70 	bl	8001df8 <HAL_GetTick>
 8003918:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d002      	beq.n	8003930 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800392a:	2302      	movs	r3, #2
 800392c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800392e:	e116      	b.n	8003b5e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_SPI_Transmit+0x52>
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003940:	e10d      	b.n	8003b5e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2203      	movs	r2, #3
 8003946:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	88fa      	ldrh	r2, [r7, #6]
 800395a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003988:	d10f      	bne.n	80039aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003998:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b4:	2b40      	cmp	r3, #64	@ 0x40
 80039b6:	d007      	beq.n	80039c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039d0:	d14f      	bne.n	8003a72 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_SPI_Transmit+0xf6>
 80039da:	8afb      	ldrh	r3, [r7, #22]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d142      	bne.n	8003a66 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e4:	881a      	ldrh	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f0:	1c9a      	adds	r2, r3, #2
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a04:	e02f      	b.n	8003a66 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d112      	bne.n	8003a3a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	881a      	ldrh	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a24:	1c9a      	adds	r2, r3, #2
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a38:	e015      	b.n	8003a66 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a3a:	f7fe f9dd 	bl	8001df8 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d803      	bhi.n	8003a52 <HAL_SPI_Transmit+0x168>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a50:	d102      	bne.n	8003a58 <HAL_SPI_Transmit+0x16e>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003a64:	e07b      	b.n	8003b5e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1ca      	bne.n	8003a06 <HAL_SPI_Transmit+0x11c>
 8003a70:	e050      	b.n	8003b14 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_SPI_Transmit+0x196>
 8003a7a:	8afb      	ldrh	r3, [r7, #22]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d144      	bne.n	8003b0a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	7812      	ldrb	r2, [r2, #0]
 8003a8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003aa6:	e030      	b.n	8003b0a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d113      	bne.n	8003ade <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	330c      	adds	r3, #12
 8003ac0:	7812      	ldrb	r2, [r2, #0]
 8003ac2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003adc:	e015      	b.n	8003b0a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ade:	f7fe f98b 	bl	8001df8 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d803      	bhi.n	8003af6 <HAL_SPI_Transmit+0x20c>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d102      	bne.n	8003afc <HAL_SPI_Transmit+0x212>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003b08:	e029      	b.n	8003b5e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1c9      	bne.n	8003aa8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	6839      	ldr	r1, [r7, #0]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f8b1 	bl	8003c80 <SPI_EndRxTxTransaction>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e003      	b.n	8003b5e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003b66:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3720      	adds	r7, #32
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b80:	f7fe f93a 	bl	8001df8 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b90:	f7fe f932 	bl	8001df8 <HAL_GetTick>
 8003b94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b96:	4b39      	ldr	r3, [pc, #228]	@ (8003c7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	015b      	lsls	r3, r3, #5
 8003b9c:	0d1b      	lsrs	r3, r3, #20
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	fb02 f303 	mul.w	r3, r2, r3
 8003ba4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ba6:	e054      	b.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d050      	beq.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bb0:	f7fe f922 	bl	8001df8 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d902      	bls.n	8003bc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d13d      	bne.n	8003c42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bde:	d111      	bne.n	8003c04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003be8:	d004      	beq.n	8003bf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf2:	d107      	bne.n	8003c04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c0c:	d10f      	bne.n	8003c2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e017      	b.n	8003c72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	bf0c      	ite	eq
 8003c62:	2301      	moveq	r3, #1
 8003c64:	2300      	movne	r3, #0
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d19b      	bne.n	8003ba8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000000 	.word	0x20000000

08003c80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2201      	movs	r2, #1
 8003c94:	2102      	movs	r1, #2
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7ff ff6a 	bl	8003b70 <SPI_WaitFlagStateUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca6:	f043 0220 	orr.w	r2, r3, #32
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e032      	b.n	8003d18 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d20 <SPI_EndRxTxTransaction+0xa0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d24 <SPI_EndRxTxTransaction+0xa4>)
 8003cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbc:	0d5b      	lsrs	r3, r3, #21
 8003cbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cd0:	d112      	bne.n	8003cf8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2180      	movs	r1, #128	@ 0x80
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f7ff ff47 	bl	8003b70 <SPI_WaitFlagStateUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d016      	beq.n	8003d16 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cec:	f043 0220 	orr.w	r2, r3, #32
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e00f      	b.n	8003d18 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0e:	2b80      	cmp	r3, #128	@ 0x80
 8003d10:	d0f2      	beq.n	8003cf8 <SPI_EndRxTxTransaction+0x78>
 8003d12:	e000      	b.n	8003d16 <SPI_EndRxTxTransaction+0x96>
        break;
 8003d14:	bf00      	nop
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20000000 	.word	0x20000000
 8003d24:	165e9f81 	.word	0x165e9f81

08003d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e042      	b.n	8003dc0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fc fea6 	bl	8000aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2224      	movs	r2, #36	@ 0x24
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fcb7 	bl	80046e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e024      	b.n	8003e24 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2224      	movs	r2, #36	@ 0x24
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003df0:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fc fea4 	bl	8000b40 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b0ba      	sub	sp, #232	@ 0xe8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10f      	bne.n	8003e92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <HAL_UART_IRQHandler+0x66>
 8003e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fb69 	bl	8004562 <UART_Receive_IT>
      return;
 8003e90:	e25b      	b.n	800434a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 80de 	beq.w	8004058 <HAL_UART_IRQHandler+0x22c>
 8003e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d106      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80d1 	beq.w	8004058 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00b      	beq.n	8003eda <HAL_UART_IRQHandler+0xae>
 8003ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed2:	f043 0201 	orr.w	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <HAL_UART_IRQHandler+0xd2>
 8003ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef6:	f043 0202 	orr.w	r2, r3, #2
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_UART_IRQHandler+0xf6>
 8003f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1a:	f043 0204 	orr.w	r2, r3, #4
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d011      	beq.n	8003f52 <HAL_UART_IRQHandler+0x126>
 8003f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d105      	bne.n	8003f46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	f043 0208 	orr.w	r2, r3, #8
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 81f2 	beq.w	8004340 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_UART_IRQHandler+0x14e>
 8003f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 faf4 	bl	8004562 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f84:	2b40      	cmp	r3, #64	@ 0x40
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d103      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x17a>
 8003f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d04f      	beq.n	8004046 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f9fc 	bl	80043a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb6:	2b40      	cmp	r3, #64	@ 0x40
 8003fb8:	d141      	bne.n	800403e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3314      	adds	r3, #20
 8003fc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3314      	adds	r3, #20
 8003fe2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003fe6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003fea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ff2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1d9      	bne.n	8003fba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400a:	2b00      	cmp	r3, #0
 800400c:	d013      	beq.n	8004036 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004012:	4a7e      	ldr	r2, [pc, #504]	@ (800420c <HAL_UART_IRQHandler+0x3e0>)
 8004014:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401a:	4618      	mov	r0, r3
 800401c:	f7fe f8e9 	bl	80021f2 <HAL_DMA_Abort_IT>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d016      	beq.n	8004054 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004030:	4610      	mov	r0, r2
 8004032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004034:	e00e      	b.n	8004054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f99e 	bl	8004378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	e00a      	b.n	8004054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f99a 	bl	8004378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004044:	e006      	b.n	8004054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f996 	bl	8004378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004052:	e175      	b.n	8004340 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004054:	bf00      	nop
    return;
 8004056:	e173      	b.n	8004340 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405c:	2b01      	cmp	r3, #1
 800405e:	f040 814f 	bne.w	8004300 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 8148 	beq.w	8004300 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8141 	beq.w	8004300 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800407e:	2300      	movs	r3, #0
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409e:	2b40      	cmp	r3, #64	@ 0x40
 80040a0:	f040 80b6 	bne.w	8004210 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8145 	beq.w	8004344 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040c2:	429a      	cmp	r2, r3
 80040c4:	f080 813e 	bcs.w	8004344 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040da:	f000 8088 	beq.w	80041ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	330c      	adds	r3, #12
 80040e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040ec:	e853 3f00 	ldrex	r3, [r3]
 80040f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80040f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800410a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800410e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004116:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004122:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1d9      	bne.n	80040de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3314      	adds	r3, #20
 8004130:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800413a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3314      	adds	r3, #20
 800414a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800414e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004152:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004156:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004160:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e1      	bne.n	800412a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3314      	adds	r3, #20
 800416c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800417c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3314      	adds	r3, #20
 8004186:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800418a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800418c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004190:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e3      	bne.n	8004166 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041be:	f023 0310 	bic.w	r3, r3, #16
 80041c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	330c      	adds	r3, #12
 80041cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80041d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e3      	bne.n	80041ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fd ff92 	bl	8002112 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2202      	movs	r2, #2
 80041f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	b29b      	uxth	r3, r3
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f8c1 	bl	800438c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800420a:	e09b      	b.n	8004344 <HAL_UART_IRQHandler+0x518>
 800420c:	0800446b 	.word	0x0800446b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004218:	b29b      	uxth	r3, r3
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 808e 	beq.w	8004348 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800422c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8089 	beq.w	8004348 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	330c      	adds	r3, #12
 800423c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004248:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800424c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	330c      	adds	r3, #12
 8004256:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800425a:	647a      	str	r2, [r7, #68]	@ 0x44
 800425c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004260:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004262:	e841 2300 	strex	r3, r2, [r1]
 8004266:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1e3      	bne.n	8004236 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3314      	adds	r3, #20
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	623b      	str	r3, [r7, #32]
   return(result);
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	f023 0301 	bic.w	r3, r3, #1
 8004284:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3314      	adds	r3, #20
 800428e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004292:	633a      	str	r2, [r7, #48]	@ 0x30
 8004294:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e3      	bne.n	800426e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0310 	bic.w	r3, r3, #16
 80042ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	330c      	adds	r3, #12
 80042d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80042d8:	61fa      	str	r2, [r7, #28]
 80042da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	69b9      	ldr	r1, [r7, #24]
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	617b      	str	r3, [r7, #20]
   return(result);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e3      	bne.n	80042b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042f6:	4619      	mov	r1, r3
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f847 	bl	800438c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042fe:	e023      	b.n	8004348 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004308:	2b00      	cmp	r3, #0
 800430a:	d009      	beq.n	8004320 <HAL_UART_IRQHandler+0x4f4>
 800430c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f8ba 	bl	8004492 <UART_Transmit_IT>
    return;
 800431e:	e014      	b.n	800434a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00e      	beq.n	800434a <HAL_UART_IRQHandler+0x51e>
 800432c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f8fa 	bl	8004532 <UART_EndTransmit_IT>
    return;
 800433e:	e004      	b.n	800434a <HAL_UART_IRQHandler+0x51e>
    return;
 8004340:	bf00      	nop
 8004342:	e002      	b.n	800434a <HAL_UART_IRQHandler+0x51e>
      return;
 8004344:	bf00      	nop
 8004346:	e000      	b.n	800434a <HAL_UART_IRQHandler+0x51e>
      return;
 8004348:	bf00      	nop
  }
}
 800434a:	37e8      	adds	r7, #232	@ 0xe8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b095      	sub	sp, #84	@ 0x54
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80043ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e5      	bne.n	80043ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3314      	adds	r3, #20
 80043e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3314      	adds	r3, #20
 80043fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004400:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004402:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e5      	bne.n	80043e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004418:	2b01      	cmp	r3, #1
 800441a:	d119      	bne.n	8004450 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	60bb      	str	r3, [r7, #8]
   return(result);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f023 0310 	bic.w	r3, r3, #16
 8004432:	647b      	str	r3, [r7, #68]	@ 0x44
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800443c:	61ba      	str	r2, [r7, #24]
 800443e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	6979      	ldr	r1, [r7, #20]
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	613b      	str	r3, [r7, #16]
   return(result);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e5      	bne.n	800441c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800445e:	bf00      	nop
 8004460:	3754      	adds	r7, #84	@ 0x54
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004476:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f7ff ff77 	bl	8004378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b21      	cmp	r3, #33	@ 0x21
 80044a4:	d13e      	bne.n	8004524 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ae:	d114      	bne.n	80044da <UART_Transmit_IT+0x48>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d110      	bne.n	80044da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	461a      	mov	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	1c9a      	adds	r2, r3, #2
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	621a      	str	r2, [r3, #32]
 80044d8:	e008      	b.n	80044ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	1c59      	adds	r1, r3, #1
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6211      	str	r1, [r2, #32]
 80044e4:	781a      	ldrb	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	4619      	mov	r1, r3
 80044fa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10f      	bne.n	8004520 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800450e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800451e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004548:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff fefc 	bl	8004350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b08c      	sub	sp, #48	@ 0x30
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b22      	cmp	r3, #34	@ 0x22
 8004574:	f040 80ae 	bne.w	80046d4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004580:	d117      	bne.n	80045b2 <UART_Receive_IT+0x50>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d113      	bne.n	80045b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004592:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045aa:	1c9a      	adds	r2, r3, #2
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80045b0:	e026      	b.n	8004600 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045c4:	d007      	beq.n	80045d6 <UART_Receive_IT+0x74>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <UART_Receive_IT+0x82>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	e008      	b.n	80045f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29b      	uxth	r3, r3
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4619      	mov	r1, r3
 800460e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004610:	2b00      	cmp	r3, #0
 8004612:	d15d      	bne.n	80046d0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0220 	bic.w	r2, r2, #32
 8004622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0201 	bic.w	r2, r2, #1
 8004642:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004656:	2b01      	cmp	r3, #1
 8004658:	d135      	bne.n	80046c6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	613b      	str	r3, [r7, #16]
   return(result);
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f023 0310 	bic.w	r3, r3, #16
 8004676:	627b      	str	r3, [r7, #36]	@ 0x24
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004680:	623a      	str	r2, [r7, #32]
 8004682:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	69f9      	ldr	r1, [r7, #28]
 8004686:	6a3a      	ldr	r2, [r7, #32]
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	61bb      	str	r3, [r7, #24]
   return(result);
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e5      	bne.n	8004660 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b10      	cmp	r3, #16
 80046a0:	d10a      	bne.n	80046b8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046bc:	4619      	mov	r1, r3
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff fe64 	bl	800438c <HAL_UARTEx_RxEventCallback>
 80046c4:	e002      	b.n	80046cc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff fe4c 	bl	8004364 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e002      	b.n	80046d6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e000      	b.n	80046d6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046d4:	2302      	movs	r3, #2
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3730      	adds	r7, #48	@ 0x30
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046e4:	b0c0      	sub	sp, #256	@ 0x100
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fc:	68d9      	ldr	r1, [r3, #12]
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	ea40 0301 	orr.w	r3, r0, r1
 8004708:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800470a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	431a      	orrs	r2, r3
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	431a      	orrs	r2, r3
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004738:	f021 010c 	bic.w	r1, r1, #12
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004746:	430b      	orrs	r3, r1
 8004748:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800474a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475a:	6999      	ldr	r1, [r3, #24]
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	ea40 0301 	orr.w	r3, r0, r1
 8004766:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b8f      	ldr	r3, [pc, #572]	@ (80049ac <UART_SetConfig+0x2cc>)
 8004770:	429a      	cmp	r2, r3
 8004772:	d005      	beq.n	8004780 <UART_SetConfig+0xa0>
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4b8d      	ldr	r3, [pc, #564]	@ (80049b0 <UART_SetConfig+0x2d0>)
 800477c:	429a      	cmp	r2, r3
 800477e:	d104      	bne.n	800478a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004780:	f7fe ff20 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 8004784:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004788:	e003      	b.n	8004792 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800478a:	f7fe ff07 	bl	800359c <HAL_RCC_GetPCLK1Freq>
 800478e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800479c:	f040 810c 	bne.w	80049b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047a4:	2200      	movs	r2, #0
 80047a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80047ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80047b2:	4622      	mov	r2, r4
 80047b4:	462b      	mov	r3, r5
 80047b6:	1891      	adds	r1, r2, r2
 80047b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80047ba:	415b      	adcs	r3, r3
 80047bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047c2:	4621      	mov	r1, r4
 80047c4:	eb12 0801 	adds.w	r8, r2, r1
 80047c8:	4629      	mov	r1, r5
 80047ca:	eb43 0901 	adc.w	r9, r3, r1
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047e2:	4690      	mov	r8, r2
 80047e4:	4699      	mov	r9, r3
 80047e6:	4623      	mov	r3, r4
 80047e8:	eb18 0303 	adds.w	r3, r8, r3
 80047ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80047f0:	462b      	mov	r3, r5
 80047f2:	eb49 0303 	adc.w	r3, r9, r3
 80047f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004806:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800480a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800480e:	460b      	mov	r3, r1
 8004810:	18db      	adds	r3, r3, r3
 8004812:	653b      	str	r3, [r7, #80]	@ 0x50
 8004814:	4613      	mov	r3, r2
 8004816:	eb42 0303 	adc.w	r3, r2, r3
 800481a:	657b      	str	r3, [r7, #84]	@ 0x54
 800481c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004820:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004824:	f7fb fd2c 	bl	8000280 <__aeabi_uldivmod>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4b61      	ldr	r3, [pc, #388]	@ (80049b4 <UART_SetConfig+0x2d4>)
 800482e:	fba3 2302 	umull	r2, r3, r3, r2
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	011c      	lsls	r4, r3, #4
 8004836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800483a:	2200      	movs	r2, #0
 800483c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004840:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004844:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004848:	4642      	mov	r2, r8
 800484a:	464b      	mov	r3, r9
 800484c:	1891      	adds	r1, r2, r2
 800484e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004850:	415b      	adcs	r3, r3
 8004852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004854:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004858:	4641      	mov	r1, r8
 800485a:	eb12 0a01 	adds.w	sl, r2, r1
 800485e:	4649      	mov	r1, r9
 8004860:	eb43 0b01 	adc.w	fp, r3, r1
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004870:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004874:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004878:	4692      	mov	sl, r2
 800487a:	469b      	mov	fp, r3
 800487c:	4643      	mov	r3, r8
 800487e:	eb1a 0303 	adds.w	r3, sl, r3
 8004882:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004886:	464b      	mov	r3, r9
 8004888:	eb4b 0303 	adc.w	r3, fp, r3
 800488c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800489c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80048a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80048a4:	460b      	mov	r3, r1
 80048a6:	18db      	adds	r3, r3, r3
 80048a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80048aa:	4613      	mov	r3, r2
 80048ac:	eb42 0303 	adc.w	r3, r2, r3
 80048b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80048b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80048b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80048ba:	f7fb fce1 	bl	8000280 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4611      	mov	r1, r2
 80048c4:	4b3b      	ldr	r3, [pc, #236]	@ (80049b4 <UART_SetConfig+0x2d4>)
 80048c6:	fba3 2301 	umull	r2, r3, r3, r1
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	2264      	movs	r2, #100	@ 0x64
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	1acb      	subs	r3, r1, r3
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80048da:	4b36      	ldr	r3, [pc, #216]	@ (80049b4 <UART_SetConfig+0x2d4>)
 80048dc:	fba3 2302 	umull	r2, r3, r3, r2
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80048e8:	441c      	add	r4, r3
 80048ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80048f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80048fc:	4642      	mov	r2, r8
 80048fe:	464b      	mov	r3, r9
 8004900:	1891      	adds	r1, r2, r2
 8004902:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004904:	415b      	adcs	r3, r3
 8004906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800490c:	4641      	mov	r1, r8
 800490e:	1851      	adds	r1, r2, r1
 8004910:	6339      	str	r1, [r7, #48]	@ 0x30
 8004912:	4649      	mov	r1, r9
 8004914:	414b      	adcs	r3, r1
 8004916:	637b      	str	r3, [r7, #52]	@ 0x34
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004924:	4659      	mov	r1, fp
 8004926:	00cb      	lsls	r3, r1, #3
 8004928:	4651      	mov	r1, sl
 800492a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800492e:	4651      	mov	r1, sl
 8004930:	00ca      	lsls	r2, r1, #3
 8004932:	4610      	mov	r0, r2
 8004934:	4619      	mov	r1, r3
 8004936:	4603      	mov	r3, r0
 8004938:	4642      	mov	r2, r8
 800493a:	189b      	adds	r3, r3, r2
 800493c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004940:	464b      	mov	r3, r9
 8004942:	460a      	mov	r2, r1
 8004944:	eb42 0303 	adc.w	r3, r2, r3
 8004948:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004958:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800495c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004960:	460b      	mov	r3, r1
 8004962:	18db      	adds	r3, r3, r3
 8004964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004966:	4613      	mov	r3, r2
 8004968:	eb42 0303 	adc.w	r3, r2, r3
 800496c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800496e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004972:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004976:	f7fb fc83 	bl	8000280 <__aeabi_uldivmod>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4b0d      	ldr	r3, [pc, #52]	@ (80049b4 <UART_SetConfig+0x2d4>)
 8004980:	fba3 1302 	umull	r1, r3, r3, r2
 8004984:	095b      	lsrs	r3, r3, #5
 8004986:	2164      	movs	r1, #100	@ 0x64
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	3332      	adds	r3, #50	@ 0x32
 8004992:	4a08      	ldr	r2, [pc, #32]	@ (80049b4 <UART_SetConfig+0x2d4>)
 8004994:	fba2 2303 	umull	r2, r3, r2, r3
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	f003 0207 	and.w	r2, r3, #7
 800499e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4422      	add	r2, r4
 80049a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049a8:	e106      	b.n	8004bb8 <UART_SetConfig+0x4d8>
 80049aa:	bf00      	nop
 80049ac:	40011000 	.word	0x40011000
 80049b0:	40011400 	.word	0x40011400
 80049b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049bc:	2200      	movs	r2, #0
 80049be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80049c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80049ca:	4642      	mov	r2, r8
 80049cc:	464b      	mov	r3, r9
 80049ce:	1891      	adds	r1, r2, r2
 80049d0:	6239      	str	r1, [r7, #32]
 80049d2:	415b      	adcs	r3, r3
 80049d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049da:	4641      	mov	r1, r8
 80049dc:	1854      	adds	r4, r2, r1
 80049de:	4649      	mov	r1, r9
 80049e0:	eb43 0501 	adc.w	r5, r3, r1
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	00eb      	lsls	r3, r5, #3
 80049ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049f2:	00e2      	lsls	r2, r4, #3
 80049f4:	4614      	mov	r4, r2
 80049f6:	461d      	mov	r5, r3
 80049f8:	4643      	mov	r3, r8
 80049fa:	18e3      	adds	r3, r4, r3
 80049fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a00:	464b      	mov	r3, r9
 8004a02:	eb45 0303 	adc.w	r3, r5, r3
 8004a06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a26:	4629      	mov	r1, r5
 8004a28:	008b      	lsls	r3, r1, #2
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a30:	4621      	mov	r1, r4
 8004a32:	008a      	lsls	r2, r1, #2
 8004a34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004a38:	f7fb fc22 	bl	8000280 <__aeabi_uldivmod>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4b60      	ldr	r3, [pc, #384]	@ (8004bc4 <UART_SetConfig+0x4e4>)
 8004a42:	fba3 2302 	umull	r2, r3, r3, r2
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	011c      	lsls	r4, r3, #4
 8004a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	1891      	adds	r1, r2, r2
 8004a62:	61b9      	str	r1, [r7, #24]
 8004a64:	415b      	adcs	r3, r3
 8004a66:	61fb      	str	r3, [r7, #28]
 8004a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a6c:	4641      	mov	r1, r8
 8004a6e:	1851      	adds	r1, r2, r1
 8004a70:	6139      	str	r1, [r7, #16]
 8004a72:	4649      	mov	r1, r9
 8004a74:	414b      	adcs	r3, r1
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a84:	4659      	mov	r1, fp
 8004a86:	00cb      	lsls	r3, r1, #3
 8004a88:	4651      	mov	r1, sl
 8004a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a8e:	4651      	mov	r1, sl
 8004a90:	00ca      	lsls	r2, r1, #3
 8004a92:	4610      	mov	r0, r2
 8004a94:	4619      	mov	r1, r3
 8004a96:	4603      	mov	r3, r0
 8004a98:	4642      	mov	r2, r8
 8004a9a:	189b      	adds	r3, r3, r2
 8004a9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004aa0:	464b      	mov	r3, r9
 8004aa2:	460a      	mov	r2, r1
 8004aa4:	eb42 0303 	adc.w	r3, r2, r3
 8004aa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ab6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	008b      	lsls	r3, r1, #2
 8004ac8:	4641      	mov	r1, r8
 8004aca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ace:	4641      	mov	r1, r8
 8004ad0:	008a      	lsls	r2, r1, #2
 8004ad2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ad6:	f7fb fbd3 	bl	8000280 <__aeabi_uldivmod>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4611      	mov	r1, r2
 8004ae0:	4b38      	ldr	r3, [pc, #224]	@ (8004bc4 <UART_SetConfig+0x4e4>)
 8004ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	2264      	movs	r2, #100	@ 0x64
 8004aea:	fb02 f303 	mul.w	r3, r2, r3
 8004aee:	1acb      	subs	r3, r1, r3
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	3332      	adds	r3, #50	@ 0x32
 8004af4:	4a33      	ldr	r2, [pc, #204]	@ (8004bc4 <UART_SetConfig+0x4e4>)
 8004af6:	fba2 2303 	umull	r2, r3, r2, r3
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b00:	441c      	add	r4, r3
 8004b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b06:	2200      	movs	r2, #0
 8004b08:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b10:	4642      	mov	r2, r8
 8004b12:	464b      	mov	r3, r9
 8004b14:	1891      	adds	r1, r2, r2
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	415b      	adcs	r3, r3
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b20:	4641      	mov	r1, r8
 8004b22:	1851      	adds	r1, r2, r1
 8004b24:	6039      	str	r1, [r7, #0]
 8004b26:	4649      	mov	r1, r9
 8004b28:	414b      	adcs	r3, r1
 8004b2a:	607b      	str	r3, [r7, #4]
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b38:	4659      	mov	r1, fp
 8004b3a:	00cb      	lsls	r3, r1, #3
 8004b3c:	4651      	mov	r1, sl
 8004b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b42:	4651      	mov	r1, sl
 8004b44:	00ca      	lsls	r2, r1, #3
 8004b46:	4610      	mov	r0, r2
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4642      	mov	r2, r8
 8004b4e:	189b      	adds	r3, r3, r2
 8004b50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b52:	464b      	mov	r3, r9
 8004b54:	460a      	mov	r2, r1
 8004b56:	eb42 0303 	adc.w	r3, r2, r3
 8004b5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b66:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b74:	4649      	mov	r1, r9
 8004b76:	008b      	lsls	r3, r1, #2
 8004b78:	4641      	mov	r1, r8
 8004b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b7e:	4641      	mov	r1, r8
 8004b80:	008a      	lsls	r2, r1, #2
 8004b82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b86:	f7fb fb7b 	bl	8000280 <__aeabi_uldivmod>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc4 <UART_SetConfig+0x4e4>)
 8004b90:	fba3 1302 	umull	r1, r3, r3, r2
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	2164      	movs	r1, #100	@ 0x64
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	3332      	adds	r3, #50	@ 0x32
 8004ba2:	4a08      	ldr	r2, [pc, #32]	@ (8004bc4 <UART_SetConfig+0x4e4>)
 8004ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	f003 020f 	and.w	r2, r3, #15
 8004bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4422      	add	r2, r4
 8004bb6:	609a      	str	r2, [r3, #8]
}
 8004bb8:	bf00      	nop
 8004bba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc4:	51eb851f 	.word	0x51eb851f

08004bc8 <sbrk_aligned>:
 8004bc8:	b570      	push	{r4, r5, r6, lr}
 8004bca:	4e0f      	ldr	r6, [pc, #60]	@ (8004c08 <sbrk_aligned+0x40>)
 8004bcc:	460c      	mov	r4, r1
 8004bce:	6831      	ldr	r1, [r6, #0]
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	b911      	cbnz	r1, 8004bda <sbrk_aligned+0x12>
 8004bd4:	f000 faec 	bl	80051b0 <_sbrk_r>
 8004bd8:	6030      	str	r0, [r6, #0]
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f000 fae7 	bl	80051b0 <_sbrk_r>
 8004be2:	1c43      	adds	r3, r0, #1
 8004be4:	d103      	bne.n	8004bee <sbrk_aligned+0x26>
 8004be6:	f04f 34ff 	mov.w	r4, #4294967295
 8004bea:	4620      	mov	r0, r4
 8004bec:	bd70      	pop	{r4, r5, r6, pc}
 8004bee:	1cc4      	adds	r4, r0, #3
 8004bf0:	f024 0403 	bic.w	r4, r4, #3
 8004bf4:	42a0      	cmp	r0, r4
 8004bf6:	d0f8      	beq.n	8004bea <sbrk_aligned+0x22>
 8004bf8:	1a21      	subs	r1, r4, r0
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f000 fad8 	bl	80051b0 <_sbrk_r>
 8004c00:	3001      	adds	r0, #1
 8004c02:	d1f2      	bne.n	8004bea <sbrk_aligned+0x22>
 8004c04:	e7ef      	b.n	8004be6 <sbrk_aligned+0x1e>
 8004c06:	bf00      	nop
 8004c08:	2000098c 	.word	0x2000098c

08004c0c <_malloc_r>:
 8004c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c10:	1ccd      	adds	r5, r1, #3
 8004c12:	f025 0503 	bic.w	r5, r5, #3
 8004c16:	3508      	adds	r5, #8
 8004c18:	2d0c      	cmp	r5, #12
 8004c1a:	bf38      	it	cc
 8004c1c:	250c      	movcc	r5, #12
 8004c1e:	2d00      	cmp	r5, #0
 8004c20:	4606      	mov	r6, r0
 8004c22:	db01      	blt.n	8004c28 <_malloc_r+0x1c>
 8004c24:	42a9      	cmp	r1, r5
 8004c26:	d904      	bls.n	8004c32 <_malloc_r+0x26>
 8004c28:	230c      	movs	r3, #12
 8004c2a:	6033      	str	r3, [r6, #0]
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d08 <_malloc_r+0xfc>
 8004c36:	f000 f869 	bl	8004d0c <__malloc_lock>
 8004c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8004c3e:	461c      	mov	r4, r3
 8004c40:	bb44      	cbnz	r4, 8004c94 <_malloc_r+0x88>
 8004c42:	4629      	mov	r1, r5
 8004c44:	4630      	mov	r0, r6
 8004c46:	f7ff ffbf 	bl	8004bc8 <sbrk_aligned>
 8004c4a:	1c43      	adds	r3, r0, #1
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	d158      	bne.n	8004d02 <_malloc_r+0xf6>
 8004c50:	f8d8 4000 	ldr.w	r4, [r8]
 8004c54:	4627      	mov	r7, r4
 8004c56:	2f00      	cmp	r7, #0
 8004c58:	d143      	bne.n	8004ce2 <_malloc_r+0xd6>
 8004c5a:	2c00      	cmp	r4, #0
 8004c5c:	d04b      	beq.n	8004cf6 <_malloc_r+0xea>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	4639      	mov	r1, r7
 8004c62:	4630      	mov	r0, r6
 8004c64:	eb04 0903 	add.w	r9, r4, r3
 8004c68:	f000 faa2 	bl	80051b0 <_sbrk_r>
 8004c6c:	4581      	cmp	r9, r0
 8004c6e:	d142      	bne.n	8004cf6 <_malloc_r+0xea>
 8004c70:	6821      	ldr	r1, [r4, #0]
 8004c72:	1a6d      	subs	r5, r5, r1
 8004c74:	4629      	mov	r1, r5
 8004c76:	4630      	mov	r0, r6
 8004c78:	f7ff ffa6 	bl	8004bc8 <sbrk_aligned>
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d03a      	beq.n	8004cf6 <_malloc_r+0xea>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	442b      	add	r3, r5
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	f8d8 3000 	ldr.w	r3, [r8]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	bb62      	cbnz	r2, 8004ce8 <_malloc_r+0xdc>
 8004c8e:	f8c8 7000 	str.w	r7, [r8]
 8004c92:	e00f      	b.n	8004cb4 <_malloc_r+0xa8>
 8004c94:	6822      	ldr	r2, [r4, #0]
 8004c96:	1b52      	subs	r2, r2, r5
 8004c98:	d420      	bmi.n	8004cdc <_malloc_r+0xd0>
 8004c9a:	2a0b      	cmp	r2, #11
 8004c9c:	d917      	bls.n	8004cce <_malloc_r+0xc2>
 8004c9e:	1961      	adds	r1, r4, r5
 8004ca0:	42a3      	cmp	r3, r4
 8004ca2:	6025      	str	r5, [r4, #0]
 8004ca4:	bf18      	it	ne
 8004ca6:	6059      	strne	r1, [r3, #4]
 8004ca8:	6863      	ldr	r3, [r4, #4]
 8004caa:	bf08      	it	eq
 8004cac:	f8c8 1000 	streq.w	r1, [r8]
 8004cb0:	5162      	str	r2, [r4, r5]
 8004cb2:	604b      	str	r3, [r1, #4]
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f000 f82f 	bl	8004d18 <__malloc_unlock>
 8004cba:	f104 000b 	add.w	r0, r4, #11
 8004cbe:	1d23      	adds	r3, r4, #4
 8004cc0:	f020 0007 	bic.w	r0, r0, #7
 8004cc4:	1ac2      	subs	r2, r0, r3
 8004cc6:	bf1c      	itt	ne
 8004cc8:	1a1b      	subne	r3, r3, r0
 8004cca:	50a3      	strne	r3, [r4, r2]
 8004ccc:	e7af      	b.n	8004c2e <_malloc_r+0x22>
 8004cce:	6862      	ldr	r2, [r4, #4]
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	bf0c      	ite	eq
 8004cd4:	f8c8 2000 	streq.w	r2, [r8]
 8004cd8:	605a      	strne	r2, [r3, #4]
 8004cda:	e7eb      	b.n	8004cb4 <_malloc_r+0xa8>
 8004cdc:	4623      	mov	r3, r4
 8004cde:	6864      	ldr	r4, [r4, #4]
 8004ce0:	e7ae      	b.n	8004c40 <_malloc_r+0x34>
 8004ce2:	463c      	mov	r4, r7
 8004ce4:	687f      	ldr	r7, [r7, #4]
 8004ce6:	e7b6      	b.n	8004c56 <_malloc_r+0x4a>
 8004ce8:	461a      	mov	r2, r3
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	42a3      	cmp	r3, r4
 8004cee:	d1fb      	bne.n	8004ce8 <_malloc_r+0xdc>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	6053      	str	r3, [r2, #4]
 8004cf4:	e7de      	b.n	8004cb4 <_malloc_r+0xa8>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	6033      	str	r3, [r6, #0]
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f000 f80c 	bl	8004d18 <__malloc_unlock>
 8004d00:	e794      	b.n	8004c2c <_malloc_r+0x20>
 8004d02:	6005      	str	r5, [r0, #0]
 8004d04:	e7d6      	b.n	8004cb4 <_malloc_r+0xa8>
 8004d06:	bf00      	nop
 8004d08:	20000990 	.word	0x20000990

08004d0c <__malloc_lock>:
 8004d0c:	4801      	ldr	r0, [pc, #4]	@ (8004d14 <__malloc_lock+0x8>)
 8004d0e:	f000 ba9c 	b.w	800524a <__retarget_lock_acquire_recursive>
 8004d12:	bf00      	nop
 8004d14:	20000ad4 	.word	0x20000ad4

08004d18 <__malloc_unlock>:
 8004d18:	4801      	ldr	r0, [pc, #4]	@ (8004d20 <__malloc_unlock+0x8>)
 8004d1a:	f000 ba97 	b.w	800524c <__retarget_lock_release_recursive>
 8004d1e:	bf00      	nop
 8004d20:	20000ad4 	.word	0x20000ad4

08004d24 <std>:
 8004d24:	2300      	movs	r3, #0
 8004d26:	b510      	push	{r4, lr}
 8004d28:	4604      	mov	r4, r0
 8004d2a:	e9c0 3300 	strd	r3, r3, [r0]
 8004d2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d32:	6083      	str	r3, [r0, #8]
 8004d34:	8181      	strh	r1, [r0, #12]
 8004d36:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d38:	81c2      	strh	r2, [r0, #14]
 8004d3a:	6183      	str	r3, [r0, #24]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	2208      	movs	r2, #8
 8004d40:	305c      	adds	r0, #92	@ 0x5c
 8004d42:	f000 f9f9 	bl	8005138 <memset>
 8004d46:	4b0d      	ldr	r3, [pc, #52]	@ (8004d7c <std+0x58>)
 8004d48:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d80 <std+0x5c>)
 8004d4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d84 <std+0x60>)
 8004d50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d52:	4b0d      	ldr	r3, [pc, #52]	@ (8004d88 <std+0x64>)
 8004d54:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d56:	4b0d      	ldr	r3, [pc, #52]	@ (8004d8c <std+0x68>)
 8004d58:	6224      	str	r4, [r4, #32]
 8004d5a:	429c      	cmp	r4, r3
 8004d5c:	d006      	beq.n	8004d6c <std+0x48>
 8004d5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d62:	4294      	cmp	r4, r2
 8004d64:	d002      	beq.n	8004d6c <std+0x48>
 8004d66:	33d0      	adds	r3, #208	@ 0xd0
 8004d68:	429c      	cmp	r4, r3
 8004d6a:	d105      	bne.n	8004d78 <std+0x54>
 8004d6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d74:	f000 ba68 	b.w	8005248 <__retarget_lock_init_recursive>
 8004d78:	bd10      	pop	{r4, pc}
 8004d7a:	bf00      	nop
 8004d7c:	08004f89 	.word	0x08004f89
 8004d80:	08004fab 	.word	0x08004fab
 8004d84:	08004fe3 	.word	0x08004fe3
 8004d88:	08005007 	.word	0x08005007
 8004d8c:	20000994 	.word	0x20000994

08004d90 <stdio_exit_handler>:
 8004d90:	4a02      	ldr	r2, [pc, #8]	@ (8004d9c <stdio_exit_handler+0xc>)
 8004d92:	4903      	ldr	r1, [pc, #12]	@ (8004da0 <stdio_exit_handler+0x10>)
 8004d94:	4803      	ldr	r0, [pc, #12]	@ (8004da4 <stdio_exit_handler+0x14>)
 8004d96:	f000 b869 	b.w	8004e6c <_fwalk_sglue>
 8004d9a:	bf00      	nop
 8004d9c:	2000001c 	.word	0x2000001c
 8004da0:	0800598d 	.word	0x0800598d
 8004da4:	2000002c 	.word	0x2000002c

08004da8 <cleanup_stdio>:
 8004da8:	6841      	ldr	r1, [r0, #4]
 8004daa:	4b0c      	ldr	r3, [pc, #48]	@ (8004ddc <cleanup_stdio+0x34>)
 8004dac:	4299      	cmp	r1, r3
 8004dae:	b510      	push	{r4, lr}
 8004db0:	4604      	mov	r4, r0
 8004db2:	d001      	beq.n	8004db8 <cleanup_stdio+0x10>
 8004db4:	f000 fdea 	bl	800598c <_fflush_r>
 8004db8:	68a1      	ldr	r1, [r4, #8]
 8004dba:	4b09      	ldr	r3, [pc, #36]	@ (8004de0 <cleanup_stdio+0x38>)
 8004dbc:	4299      	cmp	r1, r3
 8004dbe:	d002      	beq.n	8004dc6 <cleanup_stdio+0x1e>
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f000 fde3 	bl	800598c <_fflush_r>
 8004dc6:	68e1      	ldr	r1, [r4, #12]
 8004dc8:	4b06      	ldr	r3, [pc, #24]	@ (8004de4 <cleanup_stdio+0x3c>)
 8004dca:	4299      	cmp	r1, r3
 8004dcc:	d004      	beq.n	8004dd8 <cleanup_stdio+0x30>
 8004dce:	4620      	mov	r0, r4
 8004dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dd4:	f000 bdda 	b.w	800598c <_fflush_r>
 8004dd8:	bd10      	pop	{r4, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000994 	.word	0x20000994
 8004de0:	200009fc 	.word	0x200009fc
 8004de4:	20000a64 	.word	0x20000a64

08004de8 <global_stdio_init.part.0>:
 8004de8:	b510      	push	{r4, lr}
 8004dea:	4b0b      	ldr	r3, [pc, #44]	@ (8004e18 <global_stdio_init.part.0+0x30>)
 8004dec:	4c0b      	ldr	r4, [pc, #44]	@ (8004e1c <global_stdio_init.part.0+0x34>)
 8004dee:	4a0c      	ldr	r2, [pc, #48]	@ (8004e20 <global_stdio_init.part.0+0x38>)
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	4620      	mov	r0, r4
 8004df4:	2200      	movs	r2, #0
 8004df6:	2104      	movs	r1, #4
 8004df8:	f7ff ff94 	bl	8004d24 <std>
 8004dfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e00:	2201      	movs	r2, #1
 8004e02:	2109      	movs	r1, #9
 8004e04:	f7ff ff8e 	bl	8004d24 <std>
 8004e08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e12:	2112      	movs	r1, #18
 8004e14:	f7ff bf86 	b.w	8004d24 <std>
 8004e18:	20000acc 	.word	0x20000acc
 8004e1c:	20000994 	.word	0x20000994
 8004e20:	08004d91 	.word	0x08004d91

08004e24 <__sfp_lock_acquire>:
 8004e24:	4801      	ldr	r0, [pc, #4]	@ (8004e2c <__sfp_lock_acquire+0x8>)
 8004e26:	f000 ba10 	b.w	800524a <__retarget_lock_acquire_recursive>
 8004e2a:	bf00      	nop
 8004e2c:	20000ad5 	.word	0x20000ad5

08004e30 <__sfp_lock_release>:
 8004e30:	4801      	ldr	r0, [pc, #4]	@ (8004e38 <__sfp_lock_release+0x8>)
 8004e32:	f000 ba0b 	b.w	800524c <__retarget_lock_release_recursive>
 8004e36:	bf00      	nop
 8004e38:	20000ad5 	.word	0x20000ad5

08004e3c <__sinit>:
 8004e3c:	b510      	push	{r4, lr}
 8004e3e:	4604      	mov	r4, r0
 8004e40:	f7ff fff0 	bl	8004e24 <__sfp_lock_acquire>
 8004e44:	6a23      	ldr	r3, [r4, #32]
 8004e46:	b11b      	cbz	r3, 8004e50 <__sinit+0x14>
 8004e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e4c:	f7ff bff0 	b.w	8004e30 <__sfp_lock_release>
 8004e50:	4b04      	ldr	r3, [pc, #16]	@ (8004e64 <__sinit+0x28>)
 8004e52:	6223      	str	r3, [r4, #32]
 8004e54:	4b04      	ldr	r3, [pc, #16]	@ (8004e68 <__sinit+0x2c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1f5      	bne.n	8004e48 <__sinit+0xc>
 8004e5c:	f7ff ffc4 	bl	8004de8 <global_stdio_init.part.0>
 8004e60:	e7f2      	b.n	8004e48 <__sinit+0xc>
 8004e62:	bf00      	nop
 8004e64:	08004da9 	.word	0x08004da9
 8004e68:	20000acc 	.word	0x20000acc

08004e6c <_fwalk_sglue>:
 8004e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e70:	4607      	mov	r7, r0
 8004e72:	4688      	mov	r8, r1
 8004e74:	4614      	mov	r4, r2
 8004e76:	2600      	movs	r6, #0
 8004e78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e7c:	f1b9 0901 	subs.w	r9, r9, #1
 8004e80:	d505      	bpl.n	8004e8e <_fwalk_sglue+0x22>
 8004e82:	6824      	ldr	r4, [r4, #0]
 8004e84:	2c00      	cmp	r4, #0
 8004e86:	d1f7      	bne.n	8004e78 <_fwalk_sglue+0xc>
 8004e88:	4630      	mov	r0, r6
 8004e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e8e:	89ab      	ldrh	r3, [r5, #12]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d907      	bls.n	8004ea4 <_fwalk_sglue+0x38>
 8004e94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	d003      	beq.n	8004ea4 <_fwalk_sglue+0x38>
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	47c0      	blx	r8
 8004ea2:	4306      	orrs	r6, r0
 8004ea4:	3568      	adds	r5, #104	@ 0x68
 8004ea6:	e7e9      	b.n	8004e7c <_fwalk_sglue+0x10>

08004ea8 <iprintf>:
 8004ea8:	b40f      	push	{r0, r1, r2, r3}
 8004eaa:	b507      	push	{r0, r1, r2, lr}
 8004eac:	4906      	ldr	r1, [pc, #24]	@ (8004ec8 <iprintf+0x20>)
 8004eae:	ab04      	add	r3, sp, #16
 8004eb0:	6808      	ldr	r0, [r1, #0]
 8004eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eb6:	6881      	ldr	r1, [r0, #8]
 8004eb8:	9301      	str	r3, [sp, #4]
 8004eba:	f000 fa3d 	bl	8005338 <_vfiprintf_r>
 8004ebe:	b003      	add	sp, #12
 8004ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ec4:	b004      	add	sp, #16
 8004ec6:	4770      	bx	lr
 8004ec8:	20000028 	.word	0x20000028

08004ecc <_puts_r>:
 8004ecc:	6a03      	ldr	r3, [r0, #32]
 8004ece:	b570      	push	{r4, r5, r6, lr}
 8004ed0:	6884      	ldr	r4, [r0, #8]
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	460e      	mov	r6, r1
 8004ed6:	b90b      	cbnz	r3, 8004edc <_puts_r+0x10>
 8004ed8:	f7ff ffb0 	bl	8004e3c <__sinit>
 8004edc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ede:	07db      	lsls	r3, r3, #31
 8004ee0:	d405      	bmi.n	8004eee <_puts_r+0x22>
 8004ee2:	89a3      	ldrh	r3, [r4, #12]
 8004ee4:	0598      	lsls	r0, r3, #22
 8004ee6:	d402      	bmi.n	8004eee <_puts_r+0x22>
 8004ee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004eea:	f000 f9ae 	bl	800524a <__retarget_lock_acquire_recursive>
 8004eee:	89a3      	ldrh	r3, [r4, #12]
 8004ef0:	0719      	lsls	r1, r3, #28
 8004ef2:	d502      	bpl.n	8004efa <_puts_r+0x2e>
 8004ef4:	6923      	ldr	r3, [r4, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d135      	bne.n	8004f66 <_puts_r+0x9a>
 8004efa:	4621      	mov	r1, r4
 8004efc:	4628      	mov	r0, r5
 8004efe:	f000 f8c5 	bl	800508c <__swsetup_r>
 8004f02:	b380      	cbz	r0, 8004f66 <_puts_r+0x9a>
 8004f04:	f04f 35ff 	mov.w	r5, #4294967295
 8004f08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f0a:	07da      	lsls	r2, r3, #31
 8004f0c:	d405      	bmi.n	8004f1a <_puts_r+0x4e>
 8004f0e:	89a3      	ldrh	r3, [r4, #12]
 8004f10:	059b      	lsls	r3, r3, #22
 8004f12:	d402      	bmi.n	8004f1a <_puts_r+0x4e>
 8004f14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f16:	f000 f999 	bl	800524c <__retarget_lock_release_recursive>
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	bd70      	pop	{r4, r5, r6, pc}
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	da04      	bge.n	8004f2c <_puts_r+0x60>
 8004f22:	69a2      	ldr	r2, [r4, #24]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	dc17      	bgt.n	8004f58 <_puts_r+0x8c>
 8004f28:	290a      	cmp	r1, #10
 8004f2a:	d015      	beq.n	8004f58 <_puts_r+0x8c>
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	6022      	str	r2, [r4, #0]
 8004f32:	7019      	strb	r1, [r3, #0]
 8004f34:	68a3      	ldr	r3, [r4, #8]
 8004f36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	60a3      	str	r3, [r4, #8]
 8004f3e:	2900      	cmp	r1, #0
 8004f40:	d1ed      	bne.n	8004f1e <_puts_r+0x52>
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	da11      	bge.n	8004f6a <_puts_r+0x9e>
 8004f46:	4622      	mov	r2, r4
 8004f48:	210a      	movs	r1, #10
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f000 f85f 	bl	800500e <__swbuf_r>
 8004f50:	3001      	adds	r0, #1
 8004f52:	d0d7      	beq.n	8004f04 <_puts_r+0x38>
 8004f54:	250a      	movs	r5, #10
 8004f56:	e7d7      	b.n	8004f08 <_puts_r+0x3c>
 8004f58:	4622      	mov	r2, r4
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f000 f857 	bl	800500e <__swbuf_r>
 8004f60:	3001      	adds	r0, #1
 8004f62:	d1e7      	bne.n	8004f34 <_puts_r+0x68>
 8004f64:	e7ce      	b.n	8004f04 <_puts_r+0x38>
 8004f66:	3e01      	subs	r6, #1
 8004f68:	e7e4      	b.n	8004f34 <_puts_r+0x68>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	6022      	str	r2, [r4, #0]
 8004f70:	220a      	movs	r2, #10
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	e7ee      	b.n	8004f54 <_puts_r+0x88>
	...

08004f78 <puts>:
 8004f78:	4b02      	ldr	r3, [pc, #8]	@ (8004f84 <puts+0xc>)
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	f7ff bfa5 	b.w	8004ecc <_puts_r>
 8004f82:	bf00      	nop
 8004f84:	20000028 	.word	0x20000028

08004f88 <__sread>:
 8004f88:	b510      	push	{r4, lr}
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f90:	f000 f8fc 	bl	800518c <_read_r>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	bfab      	itete	ge
 8004f98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f9c:	181b      	addge	r3, r3, r0
 8004f9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004fa2:	bfac      	ite	ge
 8004fa4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004fa6:	81a3      	strhlt	r3, [r4, #12]
 8004fa8:	bd10      	pop	{r4, pc}

08004faa <__swrite>:
 8004faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fae:	461f      	mov	r7, r3
 8004fb0:	898b      	ldrh	r3, [r1, #12]
 8004fb2:	05db      	lsls	r3, r3, #23
 8004fb4:	4605      	mov	r5, r0
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	4616      	mov	r6, r2
 8004fba:	d505      	bpl.n	8004fc8 <__swrite+0x1e>
 8004fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f000 f8d0 	bl	8005168 <_lseek_r>
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fd2:	81a3      	strh	r3, [r4, #12]
 8004fd4:	4632      	mov	r2, r6
 8004fd6:	463b      	mov	r3, r7
 8004fd8:	4628      	mov	r0, r5
 8004fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fde:	f000 b8f7 	b.w	80051d0 <_write_r>

08004fe2 <__sseek>:
 8004fe2:	b510      	push	{r4, lr}
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fea:	f000 f8bd 	bl	8005168 <_lseek_r>
 8004fee:	1c43      	adds	r3, r0, #1
 8004ff0:	89a3      	ldrh	r3, [r4, #12]
 8004ff2:	bf15      	itete	ne
 8004ff4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ff6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ffa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ffe:	81a3      	strheq	r3, [r4, #12]
 8005000:	bf18      	it	ne
 8005002:	81a3      	strhne	r3, [r4, #12]
 8005004:	bd10      	pop	{r4, pc}

08005006 <__sclose>:
 8005006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800500a:	f000 b89d 	b.w	8005148 <_close_r>

0800500e <__swbuf_r>:
 800500e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005010:	460e      	mov	r6, r1
 8005012:	4614      	mov	r4, r2
 8005014:	4605      	mov	r5, r0
 8005016:	b118      	cbz	r0, 8005020 <__swbuf_r+0x12>
 8005018:	6a03      	ldr	r3, [r0, #32]
 800501a:	b90b      	cbnz	r3, 8005020 <__swbuf_r+0x12>
 800501c:	f7ff ff0e 	bl	8004e3c <__sinit>
 8005020:	69a3      	ldr	r3, [r4, #24]
 8005022:	60a3      	str	r3, [r4, #8]
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	071a      	lsls	r2, r3, #28
 8005028:	d501      	bpl.n	800502e <__swbuf_r+0x20>
 800502a:	6923      	ldr	r3, [r4, #16]
 800502c:	b943      	cbnz	r3, 8005040 <__swbuf_r+0x32>
 800502e:	4621      	mov	r1, r4
 8005030:	4628      	mov	r0, r5
 8005032:	f000 f82b 	bl	800508c <__swsetup_r>
 8005036:	b118      	cbz	r0, 8005040 <__swbuf_r+0x32>
 8005038:	f04f 37ff 	mov.w	r7, #4294967295
 800503c:	4638      	mov	r0, r7
 800503e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	6922      	ldr	r2, [r4, #16]
 8005044:	1a98      	subs	r0, r3, r2
 8005046:	6963      	ldr	r3, [r4, #20]
 8005048:	b2f6      	uxtb	r6, r6
 800504a:	4283      	cmp	r3, r0
 800504c:	4637      	mov	r7, r6
 800504e:	dc05      	bgt.n	800505c <__swbuf_r+0x4e>
 8005050:	4621      	mov	r1, r4
 8005052:	4628      	mov	r0, r5
 8005054:	f000 fc9a 	bl	800598c <_fflush_r>
 8005058:	2800      	cmp	r0, #0
 800505a:	d1ed      	bne.n	8005038 <__swbuf_r+0x2a>
 800505c:	68a3      	ldr	r3, [r4, #8]
 800505e:	3b01      	subs	r3, #1
 8005060:	60a3      	str	r3, [r4, #8]
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	6022      	str	r2, [r4, #0]
 8005068:	701e      	strb	r6, [r3, #0]
 800506a:	6962      	ldr	r2, [r4, #20]
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	429a      	cmp	r2, r3
 8005070:	d004      	beq.n	800507c <__swbuf_r+0x6e>
 8005072:	89a3      	ldrh	r3, [r4, #12]
 8005074:	07db      	lsls	r3, r3, #31
 8005076:	d5e1      	bpl.n	800503c <__swbuf_r+0x2e>
 8005078:	2e0a      	cmp	r6, #10
 800507a:	d1df      	bne.n	800503c <__swbuf_r+0x2e>
 800507c:	4621      	mov	r1, r4
 800507e:	4628      	mov	r0, r5
 8005080:	f000 fc84 	bl	800598c <_fflush_r>
 8005084:	2800      	cmp	r0, #0
 8005086:	d0d9      	beq.n	800503c <__swbuf_r+0x2e>
 8005088:	e7d6      	b.n	8005038 <__swbuf_r+0x2a>
	...

0800508c <__swsetup_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	4b29      	ldr	r3, [pc, #164]	@ (8005134 <__swsetup_r+0xa8>)
 8005090:	4605      	mov	r5, r0
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	460c      	mov	r4, r1
 8005096:	b118      	cbz	r0, 80050a0 <__swsetup_r+0x14>
 8005098:	6a03      	ldr	r3, [r0, #32]
 800509a:	b90b      	cbnz	r3, 80050a0 <__swsetup_r+0x14>
 800509c:	f7ff fece 	bl	8004e3c <__sinit>
 80050a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050a4:	0719      	lsls	r1, r3, #28
 80050a6:	d422      	bmi.n	80050ee <__swsetup_r+0x62>
 80050a8:	06da      	lsls	r2, r3, #27
 80050aa:	d407      	bmi.n	80050bc <__swsetup_r+0x30>
 80050ac:	2209      	movs	r2, #9
 80050ae:	602a      	str	r2, [r5, #0]
 80050b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050b4:	81a3      	strh	r3, [r4, #12]
 80050b6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ba:	e033      	b.n	8005124 <__swsetup_r+0x98>
 80050bc:	0758      	lsls	r0, r3, #29
 80050be:	d512      	bpl.n	80050e6 <__swsetup_r+0x5a>
 80050c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050c2:	b141      	cbz	r1, 80050d6 <__swsetup_r+0x4a>
 80050c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050c8:	4299      	cmp	r1, r3
 80050ca:	d002      	beq.n	80050d2 <__swsetup_r+0x46>
 80050cc:	4628      	mov	r0, r5
 80050ce:	f000 f8bf 	bl	8005250 <_free_r>
 80050d2:	2300      	movs	r3, #0
 80050d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80050d6:	89a3      	ldrh	r3, [r4, #12]
 80050d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80050dc:	81a3      	strh	r3, [r4, #12]
 80050de:	2300      	movs	r3, #0
 80050e0:	6063      	str	r3, [r4, #4]
 80050e2:	6923      	ldr	r3, [r4, #16]
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	89a3      	ldrh	r3, [r4, #12]
 80050e8:	f043 0308 	orr.w	r3, r3, #8
 80050ec:	81a3      	strh	r3, [r4, #12]
 80050ee:	6923      	ldr	r3, [r4, #16]
 80050f0:	b94b      	cbnz	r3, 8005106 <__swsetup_r+0x7a>
 80050f2:	89a3      	ldrh	r3, [r4, #12]
 80050f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80050f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050fc:	d003      	beq.n	8005106 <__swsetup_r+0x7a>
 80050fe:	4621      	mov	r1, r4
 8005100:	4628      	mov	r0, r5
 8005102:	f000 fc91 	bl	8005a28 <__smakebuf_r>
 8005106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800510a:	f013 0201 	ands.w	r2, r3, #1
 800510e:	d00a      	beq.n	8005126 <__swsetup_r+0x9a>
 8005110:	2200      	movs	r2, #0
 8005112:	60a2      	str	r2, [r4, #8]
 8005114:	6962      	ldr	r2, [r4, #20]
 8005116:	4252      	negs	r2, r2
 8005118:	61a2      	str	r2, [r4, #24]
 800511a:	6922      	ldr	r2, [r4, #16]
 800511c:	b942      	cbnz	r2, 8005130 <__swsetup_r+0xa4>
 800511e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005122:	d1c5      	bne.n	80050b0 <__swsetup_r+0x24>
 8005124:	bd38      	pop	{r3, r4, r5, pc}
 8005126:	0799      	lsls	r1, r3, #30
 8005128:	bf58      	it	pl
 800512a:	6962      	ldrpl	r2, [r4, #20]
 800512c:	60a2      	str	r2, [r4, #8]
 800512e:	e7f4      	b.n	800511a <__swsetup_r+0x8e>
 8005130:	2000      	movs	r0, #0
 8005132:	e7f7      	b.n	8005124 <__swsetup_r+0x98>
 8005134:	20000028 	.word	0x20000028

08005138 <memset>:
 8005138:	4402      	add	r2, r0
 800513a:	4603      	mov	r3, r0
 800513c:	4293      	cmp	r3, r2
 800513e:	d100      	bne.n	8005142 <memset+0xa>
 8005140:	4770      	bx	lr
 8005142:	f803 1b01 	strb.w	r1, [r3], #1
 8005146:	e7f9      	b.n	800513c <memset+0x4>

08005148 <_close_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	4d06      	ldr	r5, [pc, #24]	@ (8005164 <_close_r+0x1c>)
 800514c:	2300      	movs	r3, #0
 800514e:	4604      	mov	r4, r0
 8005150:	4608      	mov	r0, r1
 8005152:	602b      	str	r3, [r5, #0]
 8005154:	f7fb fd6d 	bl	8000c32 <_close>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d102      	bne.n	8005162 <_close_r+0x1a>
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	b103      	cbz	r3, 8005162 <_close_r+0x1a>
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	bd38      	pop	{r3, r4, r5, pc}
 8005164:	20000ad0 	.word	0x20000ad0

08005168 <_lseek_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4d07      	ldr	r5, [pc, #28]	@ (8005188 <_lseek_r+0x20>)
 800516c:	4604      	mov	r4, r0
 800516e:	4608      	mov	r0, r1
 8005170:	4611      	mov	r1, r2
 8005172:	2200      	movs	r2, #0
 8005174:	602a      	str	r2, [r5, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	f7fb fd82 	bl	8000c80 <_lseek>
 800517c:	1c43      	adds	r3, r0, #1
 800517e:	d102      	bne.n	8005186 <_lseek_r+0x1e>
 8005180:	682b      	ldr	r3, [r5, #0]
 8005182:	b103      	cbz	r3, 8005186 <_lseek_r+0x1e>
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	bd38      	pop	{r3, r4, r5, pc}
 8005188:	20000ad0 	.word	0x20000ad0

0800518c <_read_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	4d07      	ldr	r5, [pc, #28]	@ (80051ac <_read_r+0x20>)
 8005190:	4604      	mov	r4, r0
 8005192:	4608      	mov	r0, r1
 8005194:	4611      	mov	r1, r2
 8005196:	2200      	movs	r2, #0
 8005198:	602a      	str	r2, [r5, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	f7fb fd2c 	bl	8000bf8 <_read>
 80051a0:	1c43      	adds	r3, r0, #1
 80051a2:	d102      	bne.n	80051aa <_read_r+0x1e>
 80051a4:	682b      	ldr	r3, [r5, #0]
 80051a6:	b103      	cbz	r3, 80051aa <_read_r+0x1e>
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	bd38      	pop	{r3, r4, r5, pc}
 80051ac:	20000ad0 	.word	0x20000ad0

080051b0 <_sbrk_r>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	4d06      	ldr	r5, [pc, #24]	@ (80051cc <_sbrk_r+0x1c>)
 80051b4:	2300      	movs	r3, #0
 80051b6:	4604      	mov	r4, r0
 80051b8:	4608      	mov	r0, r1
 80051ba:	602b      	str	r3, [r5, #0]
 80051bc:	f7fb fd6e 	bl	8000c9c <_sbrk>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_sbrk_r+0x1a>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_sbrk_r+0x1a>
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	20000ad0 	.word	0x20000ad0

080051d0 <_write_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4d07      	ldr	r5, [pc, #28]	@ (80051f0 <_write_r+0x20>)
 80051d4:	4604      	mov	r4, r0
 80051d6:	4608      	mov	r0, r1
 80051d8:	4611      	mov	r1, r2
 80051da:	2200      	movs	r2, #0
 80051dc:	602a      	str	r2, [r5, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	f7fb fbbc 	bl	800095c <_write>
 80051e4:	1c43      	adds	r3, r0, #1
 80051e6:	d102      	bne.n	80051ee <_write_r+0x1e>
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	b103      	cbz	r3, 80051ee <_write_r+0x1e>
 80051ec:	6023      	str	r3, [r4, #0]
 80051ee:	bd38      	pop	{r3, r4, r5, pc}
 80051f0:	20000ad0 	.word	0x20000ad0

080051f4 <__errno>:
 80051f4:	4b01      	ldr	r3, [pc, #4]	@ (80051fc <__errno+0x8>)
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000028 	.word	0x20000028

08005200 <__libc_init_array>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	4d0d      	ldr	r5, [pc, #52]	@ (8005238 <__libc_init_array+0x38>)
 8005204:	4c0d      	ldr	r4, [pc, #52]	@ (800523c <__libc_init_array+0x3c>)
 8005206:	1b64      	subs	r4, r4, r5
 8005208:	10a4      	asrs	r4, r4, #2
 800520a:	2600      	movs	r6, #0
 800520c:	42a6      	cmp	r6, r4
 800520e:	d109      	bne.n	8005224 <__libc_init_array+0x24>
 8005210:	4d0b      	ldr	r5, [pc, #44]	@ (8005240 <__libc_init_array+0x40>)
 8005212:	4c0c      	ldr	r4, [pc, #48]	@ (8005244 <__libc_init_array+0x44>)
 8005214:	f000 fc66 	bl	8005ae4 <_init>
 8005218:	1b64      	subs	r4, r4, r5
 800521a:	10a4      	asrs	r4, r4, #2
 800521c:	2600      	movs	r6, #0
 800521e:	42a6      	cmp	r6, r4
 8005220:	d105      	bne.n	800522e <__libc_init_array+0x2e>
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	f855 3b04 	ldr.w	r3, [r5], #4
 8005228:	4798      	blx	r3
 800522a:	3601      	adds	r6, #1
 800522c:	e7ee      	b.n	800520c <__libc_init_array+0xc>
 800522e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005232:	4798      	blx	r3
 8005234:	3601      	adds	r6, #1
 8005236:	e7f2      	b.n	800521e <__libc_init_array+0x1e>
 8005238:	08006514 	.word	0x08006514
 800523c:	08006514 	.word	0x08006514
 8005240:	08006514 	.word	0x08006514
 8005244:	08006518 	.word	0x08006518

08005248 <__retarget_lock_init_recursive>:
 8005248:	4770      	bx	lr

0800524a <__retarget_lock_acquire_recursive>:
 800524a:	4770      	bx	lr

0800524c <__retarget_lock_release_recursive>:
 800524c:	4770      	bx	lr
	...

08005250 <_free_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4605      	mov	r5, r0
 8005254:	2900      	cmp	r1, #0
 8005256:	d041      	beq.n	80052dc <_free_r+0x8c>
 8005258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800525c:	1f0c      	subs	r4, r1, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	bfb8      	it	lt
 8005262:	18e4      	addlt	r4, r4, r3
 8005264:	f7ff fd52 	bl	8004d0c <__malloc_lock>
 8005268:	4a1d      	ldr	r2, [pc, #116]	@ (80052e0 <_free_r+0x90>)
 800526a:	6813      	ldr	r3, [r2, #0]
 800526c:	b933      	cbnz	r3, 800527c <_free_r+0x2c>
 800526e:	6063      	str	r3, [r4, #4]
 8005270:	6014      	str	r4, [r2, #0]
 8005272:	4628      	mov	r0, r5
 8005274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005278:	f7ff bd4e 	b.w	8004d18 <__malloc_unlock>
 800527c:	42a3      	cmp	r3, r4
 800527e:	d908      	bls.n	8005292 <_free_r+0x42>
 8005280:	6820      	ldr	r0, [r4, #0]
 8005282:	1821      	adds	r1, r4, r0
 8005284:	428b      	cmp	r3, r1
 8005286:	bf01      	itttt	eq
 8005288:	6819      	ldreq	r1, [r3, #0]
 800528a:	685b      	ldreq	r3, [r3, #4]
 800528c:	1809      	addeq	r1, r1, r0
 800528e:	6021      	streq	r1, [r4, #0]
 8005290:	e7ed      	b.n	800526e <_free_r+0x1e>
 8005292:	461a      	mov	r2, r3
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	b10b      	cbz	r3, 800529c <_free_r+0x4c>
 8005298:	42a3      	cmp	r3, r4
 800529a:	d9fa      	bls.n	8005292 <_free_r+0x42>
 800529c:	6811      	ldr	r1, [r2, #0]
 800529e:	1850      	adds	r0, r2, r1
 80052a0:	42a0      	cmp	r0, r4
 80052a2:	d10b      	bne.n	80052bc <_free_r+0x6c>
 80052a4:	6820      	ldr	r0, [r4, #0]
 80052a6:	4401      	add	r1, r0
 80052a8:	1850      	adds	r0, r2, r1
 80052aa:	4283      	cmp	r3, r0
 80052ac:	6011      	str	r1, [r2, #0]
 80052ae:	d1e0      	bne.n	8005272 <_free_r+0x22>
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	6053      	str	r3, [r2, #4]
 80052b6:	4408      	add	r0, r1
 80052b8:	6010      	str	r0, [r2, #0]
 80052ba:	e7da      	b.n	8005272 <_free_r+0x22>
 80052bc:	d902      	bls.n	80052c4 <_free_r+0x74>
 80052be:	230c      	movs	r3, #12
 80052c0:	602b      	str	r3, [r5, #0]
 80052c2:	e7d6      	b.n	8005272 <_free_r+0x22>
 80052c4:	6820      	ldr	r0, [r4, #0]
 80052c6:	1821      	adds	r1, r4, r0
 80052c8:	428b      	cmp	r3, r1
 80052ca:	bf04      	itt	eq
 80052cc:	6819      	ldreq	r1, [r3, #0]
 80052ce:	685b      	ldreq	r3, [r3, #4]
 80052d0:	6063      	str	r3, [r4, #4]
 80052d2:	bf04      	itt	eq
 80052d4:	1809      	addeq	r1, r1, r0
 80052d6:	6021      	streq	r1, [r4, #0]
 80052d8:	6054      	str	r4, [r2, #4]
 80052da:	e7ca      	b.n	8005272 <_free_r+0x22>
 80052dc:	bd38      	pop	{r3, r4, r5, pc}
 80052de:	bf00      	nop
 80052e0:	20000990 	.word	0x20000990

080052e4 <__sfputc_r>:
 80052e4:	6893      	ldr	r3, [r2, #8]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	b410      	push	{r4}
 80052ec:	6093      	str	r3, [r2, #8]
 80052ee:	da08      	bge.n	8005302 <__sfputc_r+0x1e>
 80052f0:	6994      	ldr	r4, [r2, #24]
 80052f2:	42a3      	cmp	r3, r4
 80052f4:	db01      	blt.n	80052fa <__sfputc_r+0x16>
 80052f6:	290a      	cmp	r1, #10
 80052f8:	d103      	bne.n	8005302 <__sfputc_r+0x1e>
 80052fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052fe:	f7ff be86 	b.w	800500e <__swbuf_r>
 8005302:	6813      	ldr	r3, [r2, #0]
 8005304:	1c58      	adds	r0, r3, #1
 8005306:	6010      	str	r0, [r2, #0]
 8005308:	7019      	strb	r1, [r3, #0]
 800530a:	4608      	mov	r0, r1
 800530c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005310:	4770      	bx	lr

08005312 <__sfputs_r>:
 8005312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005314:	4606      	mov	r6, r0
 8005316:	460f      	mov	r7, r1
 8005318:	4614      	mov	r4, r2
 800531a:	18d5      	adds	r5, r2, r3
 800531c:	42ac      	cmp	r4, r5
 800531e:	d101      	bne.n	8005324 <__sfputs_r+0x12>
 8005320:	2000      	movs	r0, #0
 8005322:	e007      	b.n	8005334 <__sfputs_r+0x22>
 8005324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005328:	463a      	mov	r2, r7
 800532a:	4630      	mov	r0, r6
 800532c:	f7ff ffda 	bl	80052e4 <__sfputc_r>
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	d1f3      	bne.n	800531c <__sfputs_r+0xa>
 8005334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005338 <_vfiprintf_r>:
 8005338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533c:	460d      	mov	r5, r1
 800533e:	b09d      	sub	sp, #116	@ 0x74
 8005340:	4614      	mov	r4, r2
 8005342:	4698      	mov	r8, r3
 8005344:	4606      	mov	r6, r0
 8005346:	b118      	cbz	r0, 8005350 <_vfiprintf_r+0x18>
 8005348:	6a03      	ldr	r3, [r0, #32]
 800534a:	b90b      	cbnz	r3, 8005350 <_vfiprintf_r+0x18>
 800534c:	f7ff fd76 	bl	8004e3c <__sinit>
 8005350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005352:	07d9      	lsls	r1, r3, #31
 8005354:	d405      	bmi.n	8005362 <_vfiprintf_r+0x2a>
 8005356:	89ab      	ldrh	r3, [r5, #12]
 8005358:	059a      	lsls	r2, r3, #22
 800535a:	d402      	bmi.n	8005362 <_vfiprintf_r+0x2a>
 800535c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800535e:	f7ff ff74 	bl	800524a <__retarget_lock_acquire_recursive>
 8005362:	89ab      	ldrh	r3, [r5, #12]
 8005364:	071b      	lsls	r3, r3, #28
 8005366:	d501      	bpl.n	800536c <_vfiprintf_r+0x34>
 8005368:	692b      	ldr	r3, [r5, #16]
 800536a:	b99b      	cbnz	r3, 8005394 <_vfiprintf_r+0x5c>
 800536c:	4629      	mov	r1, r5
 800536e:	4630      	mov	r0, r6
 8005370:	f7ff fe8c 	bl	800508c <__swsetup_r>
 8005374:	b170      	cbz	r0, 8005394 <_vfiprintf_r+0x5c>
 8005376:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005378:	07dc      	lsls	r4, r3, #31
 800537a:	d504      	bpl.n	8005386 <_vfiprintf_r+0x4e>
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	b01d      	add	sp, #116	@ 0x74
 8005382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005386:	89ab      	ldrh	r3, [r5, #12]
 8005388:	0598      	lsls	r0, r3, #22
 800538a:	d4f7      	bmi.n	800537c <_vfiprintf_r+0x44>
 800538c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800538e:	f7ff ff5d 	bl	800524c <__retarget_lock_release_recursive>
 8005392:	e7f3      	b.n	800537c <_vfiprintf_r+0x44>
 8005394:	2300      	movs	r3, #0
 8005396:	9309      	str	r3, [sp, #36]	@ 0x24
 8005398:	2320      	movs	r3, #32
 800539a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800539e:	f8cd 800c 	str.w	r8, [sp, #12]
 80053a2:	2330      	movs	r3, #48	@ 0x30
 80053a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005554 <_vfiprintf_r+0x21c>
 80053a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053ac:	f04f 0901 	mov.w	r9, #1
 80053b0:	4623      	mov	r3, r4
 80053b2:	469a      	mov	sl, r3
 80053b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053b8:	b10a      	cbz	r2, 80053be <_vfiprintf_r+0x86>
 80053ba:	2a25      	cmp	r2, #37	@ 0x25
 80053bc:	d1f9      	bne.n	80053b2 <_vfiprintf_r+0x7a>
 80053be:	ebba 0b04 	subs.w	fp, sl, r4
 80053c2:	d00b      	beq.n	80053dc <_vfiprintf_r+0xa4>
 80053c4:	465b      	mov	r3, fp
 80053c6:	4622      	mov	r2, r4
 80053c8:	4629      	mov	r1, r5
 80053ca:	4630      	mov	r0, r6
 80053cc:	f7ff ffa1 	bl	8005312 <__sfputs_r>
 80053d0:	3001      	adds	r0, #1
 80053d2:	f000 80a7 	beq.w	8005524 <_vfiprintf_r+0x1ec>
 80053d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053d8:	445a      	add	r2, fp
 80053da:	9209      	str	r2, [sp, #36]	@ 0x24
 80053dc:	f89a 3000 	ldrb.w	r3, [sl]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 809f 	beq.w	8005524 <_vfiprintf_r+0x1ec>
 80053e6:	2300      	movs	r3, #0
 80053e8:	f04f 32ff 	mov.w	r2, #4294967295
 80053ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053f0:	f10a 0a01 	add.w	sl, sl, #1
 80053f4:	9304      	str	r3, [sp, #16]
 80053f6:	9307      	str	r3, [sp, #28]
 80053f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80053fe:	4654      	mov	r4, sl
 8005400:	2205      	movs	r2, #5
 8005402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005406:	4853      	ldr	r0, [pc, #332]	@ (8005554 <_vfiprintf_r+0x21c>)
 8005408:	f7fa feea 	bl	80001e0 <memchr>
 800540c:	9a04      	ldr	r2, [sp, #16]
 800540e:	b9d8      	cbnz	r0, 8005448 <_vfiprintf_r+0x110>
 8005410:	06d1      	lsls	r1, r2, #27
 8005412:	bf44      	itt	mi
 8005414:	2320      	movmi	r3, #32
 8005416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800541a:	0713      	lsls	r3, r2, #28
 800541c:	bf44      	itt	mi
 800541e:	232b      	movmi	r3, #43	@ 0x2b
 8005420:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005424:	f89a 3000 	ldrb.w	r3, [sl]
 8005428:	2b2a      	cmp	r3, #42	@ 0x2a
 800542a:	d015      	beq.n	8005458 <_vfiprintf_r+0x120>
 800542c:	9a07      	ldr	r2, [sp, #28]
 800542e:	4654      	mov	r4, sl
 8005430:	2000      	movs	r0, #0
 8005432:	f04f 0c0a 	mov.w	ip, #10
 8005436:	4621      	mov	r1, r4
 8005438:	f811 3b01 	ldrb.w	r3, [r1], #1
 800543c:	3b30      	subs	r3, #48	@ 0x30
 800543e:	2b09      	cmp	r3, #9
 8005440:	d94b      	bls.n	80054da <_vfiprintf_r+0x1a2>
 8005442:	b1b0      	cbz	r0, 8005472 <_vfiprintf_r+0x13a>
 8005444:	9207      	str	r2, [sp, #28]
 8005446:	e014      	b.n	8005472 <_vfiprintf_r+0x13a>
 8005448:	eba0 0308 	sub.w	r3, r0, r8
 800544c:	fa09 f303 	lsl.w	r3, r9, r3
 8005450:	4313      	orrs	r3, r2
 8005452:	9304      	str	r3, [sp, #16]
 8005454:	46a2      	mov	sl, r4
 8005456:	e7d2      	b.n	80053fe <_vfiprintf_r+0xc6>
 8005458:	9b03      	ldr	r3, [sp, #12]
 800545a:	1d19      	adds	r1, r3, #4
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	9103      	str	r1, [sp, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	bfbb      	ittet	lt
 8005464:	425b      	neglt	r3, r3
 8005466:	f042 0202 	orrlt.w	r2, r2, #2
 800546a:	9307      	strge	r3, [sp, #28]
 800546c:	9307      	strlt	r3, [sp, #28]
 800546e:	bfb8      	it	lt
 8005470:	9204      	strlt	r2, [sp, #16]
 8005472:	7823      	ldrb	r3, [r4, #0]
 8005474:	2b2e      	cmp	r3, #46	@ 0x2e
 8005476:	d10a      	bne.n	800548e <_vfiprintf_r+0x156>
 8005478:	7863      	ldrb	r3, [r4, #1]
 800547a:	2b2a      	cmp	r3, #42	@ 0x2a
 800547c:	d132      	bne.n	80054e4 <_vfiprintf_r+0x1ac>
 800547e:	9b03      	ldr	r3, [sp, #12]
 8005480:	1d1a      	adds	r2, r3, #4
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	9203      	str	r2, [sp, #12]
 8005486:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800548a:	3402      	adds	r4, #2
 800548c:	9305      	str	r3, [sp, #20]
 800548e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005564 <_vfiprintf_r+0x22c>
 8005492:	7821      	ldrb	r1, [r4, #0]
 8005494:	2203      	movs	r2, #3
 8005496:	4650      	mov	r0, sl
 8005498:	f7fa fea2 	bl	80001e0 <memchr>
 800549c:	b138      	cbz	r0, 80054ae <_vfiprintf_r+0x176>
 800549e:	9b04      	ldr	r3, [sp, #16]
 80054a0:	eba0 000a 	sub.w	r0, r0, sl
 80054a4:	2240      	movs	r2, #64	@ 0x40
 80054a6:	4082      	lsls	r2, r0
 80054a8:	4313      	orrs	r3, r2
 80054aa:	3401      	adds	r4, #1
 80054ac:	9304      	str	r3, [sp, #16]
 80054ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054b2:	4829      	ldr	r0, [pc, #164]	@ (8005558 <_vfiprintf_r+0x220>)
 80054b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80054b8:	2206      	movs	r2, #6
 80054ba:	f7fa fe91 	bl	80001e0 <memchr>
 80054be:	2800      	cmp	r0, #0
 80054c0:	d03f      	beq.n	8005542 <_vfiprintf_r+0x20a>
 80054c2:	4b26      	ldr	r3, [pc, #152]	@ (800555c <_vfiprintf_r+0x224>)
 80054c4:	bb1b      	cbnz	r3, 800550e <_vfiprintf_r+0x1d6>
 80054c6:	9b03      	ldr	r3, [sp, #12]
 80054c8:	3307      	adds	r3, #7
 80054ca:	f023 0307 	bic.w	r3, r3, #7
 80054ce:	3308      	adds	r3, #8
 80054d0:	9303      	str	r3, [sp, #12]
 80054d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054d4:	443b      	add	r3, r7
 80054d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80054d8:	e76a      	b.n	80053b0 <_vfiprintf_r+0x78>
 80054da:	fb0c 3202 	mla	r2, ip, r2, r3
 80054de:	460c      	mov	r4, r1
 80054e0:	2001      	movs	r0, #1
 80054e2:	e7a8      	b.n	8005436 <_vfiprintf_r+0xfe>
 80054e4:	2300      	movs	r3, #0
 80054e6:	3401      	adds	r4, #1
 80054e8:	9305      	str	r3, [sp, #20]
 80054ea:	4619      	mov	r1, r3
 80054ec:	f04f 0c0a 	mov.w	ip, #10
 80054f0:	4620      	mov	r0, r4
 80054f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054f6:	3a30      	subs	r2, #48	@ 0x30
 80054f8:	2a09      	cmp	r2, #9
 80054fa:	d903      	bls.n	8005504 <_vfiprintf_r+0x1cc>
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0c6      	beq.n	800548e <_vfiprintf_r+0x156>
 8005500:	9105      	str	r1, [sp, #20]
 8005502:	e7c4      	b.n	800548e <_vfiprintf_r+0x156>
 8005504:	fb0c 2101 	mla	r1, ip, r1, r2
 8005508:	4604      	mov	r4, r0
 800550a:	2301      	movs	r3, #1
 800550c:	e7f0      	b.n	80054f0 <_vfiprintf_r+0x1b8>
 800550e:	ab03      	add	r3, sp, #12
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	462a      	mov	r2, r5
 8005514:	4b12      	ldr	r3, [pc, #72]	@ (8005560 <_vfiprintf_r+0x228>)
 8005516:	a904      	add	r1, sp, #16
 8005518:	4630      	mov	r0, r6
 800551a:	f3af 8000 	nop.w
 800551e:	4607      	mov	r7, r0
 8005520:	1c78      	adds	r0, r7, #1
 8005522:	d1d6      	bne.n	80054d2 <_vfiprintf_r+0x19a>
 8005524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005526:	07d9      	lsls	r1, r3, #31
 8005528:	d405      	bmi.n	8005536 <_vfiprintf_r+0x1fe>
 800552a:	89ab      	ldrh	r3, [r5, #12]
 800552c:	059a      	lsls	r2, r3, #22
 800552e:	d402      	bmi.n	8005536 <_vfiprintf_r+0x1fe>
 8005530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005532:	f7ff fe8b 	bl	800524c <__retarget_lock_release_recursive>
 8005536:	89ab      	ldrh	r3, [r5, #12]
 8005538:	065b      	lsls	r3, r3, #25
 800553a:	f53f af1f 	bmi.w	800537c <_vfiprintf_r+0x44>
 800553e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005540:	e71e      	b.n	8005380 <_vfiprintf_r+0x48>
 8005542:	ab03      	add	r3, sp, #12
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	462a      	mov	r2, r5
 8005548:	4b05      	ldr	r3, [pc, #20]	@ (8005560 <_vfiprintf_r+0x228>)
 800554a:	a904      	add	r1, sp, #16
 800554c:	4630      	mov	r0, r6
 800554e:	f000 f879 	bl	8005644 <_printf_i>
 8005552:	e7e4      	b.n	800551e <_vfiprintf_r+0x1e6>
 8005554:	080064d7 	.word	0x080064d7
 8005558:	080064e1 	.word	0x080064e1
 800555c:	00000000 	.word	0x00000000
 8005560:	08005313 	.word	0x08005313
 8005564:	080064dd 	.word	0x080064dd

08005568 <_printf_common>:
 8005568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800556c:	4616      	mov	r6, r2
 800556e:	4698      	mov	r8, r3
 8005570:	688a      	ldr	r2, [r1, #8]
 8005572:	690b      	ldr	r3, [r1, #16]
 8005574:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005578:	4293      	cmp	r3, r2
 800557a:	bfb8      	it	lt
 800557c:	4613      	movlt	r3, r2
 800557e:	6033      	str	r3, [r6, #0]
 8005580:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005584:	4607      	mov	r7, r0
 8005586:	460c      	mov	r4, r1
 8005588:	b10a      	cbz	r2, 800558e <_printf_common+0x26>
 800558a:	3301      	adds	r3, #1
 800558c:	6033      	str	r3, [r6, #0]
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	0699      	lsls	r1, r3, #26
 8005592:	bf42      	ittt	mi
 8005594:	6833      	ldrmi	r3, [r6, #0]
 8005596:	3302      	addmi	r3, #2
 8005598:	6033      	strmi	r3, [r6, #0]
 800559a:	6825      	ldr	r5, [r4, #0]
 800559c:	f015 0506 	ands.w	r5, r5, #6
 80055a0:	d106      	bne.n	80055b0 <_printf_common+0x48>
 80055a2:	f104 0a19 	add.w	sl, r4, #25
 80055a6:	68e3      	ldr	r3, [r4, #12]
 80055a8:	6832      	ldr	r2, [r6, #0]
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	42ab      	cmp	r3, r5
 80055ae:	dc26      	bgt.n	80055fe <_printf_common+0x96>
 80055b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	3b00      	subs	r3, #0
 80055b8:	bf18      	it	ne
 80055ba:	2301      	movne	r3, #1
 80055bc:	0692      	lsls	r2, r2, #26
 80055be:	d42b      	bmi.n	8005618 <_printf_common+0xb0>
 80055c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055c4:	4641      	mov	r1, r8
 80055c6:	4638      	mov	r0, r7
 80055c8:	47c8      	blx	r9
 80055ca:	3001      	adds	r0, #1
 80055cc:	d01e      	beq.n	800560c <_printf_common+0xa4>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	6922      	ldr	r2, [r4, #16]
 80055d2:	f003 0306 	and.w	r3, r3, #6
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	bf02      	ittt	eq
 80055da:	68e5      	ldreq	r5, [r4, #12]
 80055dc:	6833      	ldreq	r3, [r6, #0]
 80055de:	1aed      	subeq	r5, r5, r3
 80055e0:	68a3      	ldr	r3, [r4, #8]
 80055e2:	bf0c      	ite	eq
 80055e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055e8:	2500      	movne	r5, #0
 80055ea:	4293      	cmp	r3, r2
 80055ec:	bfc4      	itt	gt
 80055ee:	1a9b      	subgt	r3, r3, r2
 80055f0:	18ed      	addgt	r5, r5, r3
 80055f2:	2600      	movs	r6, #0
 80055f4:	341a      	adds	r4, #26
 80055f6:	42b5      	cmp	r5, r6
 80055f8:	d11a      	bne.n	8005630 <_printf_common+0xc8>
 80055fa:	2000      	movs	r0, #0
 80055fc:	e008      	b.n	8005610 <_printf_common+0xa8>
 80055fe:	2301      	movs	r3, #1
 8005600:	4652      	mov	r2, sl
 8005602:	4641      	mov	r1, r8
 8005604:	4638      	mov	r0, r7
 8005606:	47c8      	blx	r9
 8005608:	3001      	adds	r0, #1
 800560a:	d103      	bne.n	8005614 <_printf_common+0xac>
 800560c:	f04f 30ff 	mov.w	r0, #4294967295
 8005610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005614:	3501      	adds	r5, #1
 8005616:	e7c6      	b.n	80055a6 <_printf_common+0x3e>
 8005618:	18e1      	adds	r1, r4, r3
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	2030      	movs	r0, #48	@ 0x30
 800561e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005622:	4422      	add	r2, r4
 8005624:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800562c:	3302      	adds	r3, #2
 800562e:	e7c7      	b.n	80055c0 <_printf_common+0x58>
 8005630:	2301      	movs	r3, #1
 8005632:	4622      	mov	r2, r4
 8005634:	4641      	mov	r1, r8
 8005636:	4638      	mov	r0, r7
 8005638:	47c8      	blx	r9
 800563a:	3001      	adds	r0, #1
 800563c:	d0e6      	beq.n	800560c <_printf_common+0xa4>
 800563e:	3601      	adds	r6, #1
 8005640:	e7d9      	b.n	80055f6 <_printf_common+0x8e>
	...

08005644 <_printf_i>:
 8005644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005648:	7e0f      	ldrb	r7, [r1, #24]
 800564a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800564c:	2f78      	cmp	r7, #120	@ 0x78
 800564e:	4691      	mov	r9, r2
 8005650:	4680      	mov	r8, r0
 8005652:	460c      	mov	r4, r1
 8005654:	469a      	mov	sl, r3
 8005656:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800565a:	d807      	bhi.n	800566c <_printf_i+0x28>
 800565c:	2f62      	cmp	r7, #98	@ 0x62
 800565e:	d80a      	bhi.n	8005676 <_printf_i+0x32>
 8005660:	2f00      	cmp	r7, #0
 8005662:	f000 80d2 	beq.w	800580a <_printf_i+0x1c6>
 8005666:	2f58      	cmp	r7, #88	@ 0x58
 8005668:	f000 80b9 	beq.w	80057de <_printf_i+0x19a>
 800566c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005670:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005674:	e03a      	b.n	80056ec <_printf_i+0xa8>
 8005676:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800567a:	2b15      	cmp	r3, #21
 800567c:	d8f6      	bhi.n	800566c <_printf_i+0x28>
 800567e:	a101      	add	r1, pc, #4	@ (adr r1, 8005684 <_printf_i+0x40>)
 8005680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005684:	080056dd 	.word	0x080056dd
 8005688:	080056f1 	.word	0x080056f1
 800568c:	0800566d 	.word	0x0800566d
 8005690:	0800566d 	.word	0x0800566d
 8005694:	0800566d 	.word	0x0800566d
 8005698:	0800566d 	.word	0x0800566d
 800569c:	080056f1 	.word	0x080056f1
 80056a0:	0800566d 	.word	0x0800566d
 80056a4:	0800566d 	.word	0x0800566d
 80056a8:	0800566d 	.word	0x0800566d
 80056ac:	0800566d 	.word	0x0800566d
 80056b0:	080057f1 	.word	0x080057f1
 80056b4:	0800571b 	.word	0x0800571b
 80056b8:	080057ab 	.word	0x080057ab
 80056bc:	0800566d 	.word	0x0800566d
 80056c0:	0800566d 	.word	0x0800566d
 80056c4:	08005813 	.word	0x08005813
 80056c8:	0800566d 	.word	0x0800566d
 80056cc:	0800571b 	.word	0x0800571b
 80056d0:	0800566d 	.word	0x0800566d
 80056d4:	0800566d 	.word	0x0800566d
 80056d8:	080057b3 	.word	0x080057b3
 80056dc:	6833      	ldr	r3, [r6, #0]
 80056de:	1d1a      	adds	r2, r3, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6032      	str	r2, [r6, #0]
 80056e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056ec:	2301      	movs	r3, #1
 80056ee:	e09d      	b.n	800582c <_printf_i+0x1e8>
 80056f0:	6833      	ldr	r3, [r6, #0]
 80056f2:	6820      	ldr	r0, [r4, #0]
 80056f4:	1d19      	adds	r1, r3, #4
 80056f6:	6031      	str	r1, [r6, #0]
 80056f8:	0606      	lsls	r6, r0, #24
 80056fa:	d501      	bpl.n	8005700 <_printf_i+0xbc>
 80056fc:	681d      	ldr	r5, [r3, #0]
 80056fe:	e003      	b.n	8005708 <_printf_i+0xc4>
 8005700:	0645      	lsls	r5, r0, #25
 8005702:	d5fb      	bpl.n	80056fc <_printf_i+0xb8>
 8005704:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005708:	2d00      	cmp	r5, #0
 800570a:	da03      	bge.n	8005714 <_printf_i+0xd0>
 800570c:	232d      	movs	r3, #45	@ 0x2d
 800570e:	426d      	negs	r5, r5
 8005710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005714:	4859      	ldr	r0, [pc, #356]	@ (800587c <_printf_i+0x238>)
 8005716:	230a      	movs	r3, #10
 8005718:	e011      	b.n	800573e <_printf_i+0xfa>
 800571a:	6821      	ldr	r1, [r4, #0]
 800571c:	6833      	ldr	r3, [r6, #0]
 800571e:	0608      	lsls	r0, r1, #24
 8005720:	f853 5b04 	ldr.w	r5, [r3], #4
 8005724:	d402      	bmi.n	800572c <_printf_i+0xe8>
 8005726:	0649      	lsls	r1, r1, #25
 8005728:	bf48      	it	mi
 800572a:	b2ad      	uxthmi	r5, r5
 800572c:	2f6f      	cmp	r7, #111	@ 0x6f
 800572e:	4853      	ldr	r0, [pc, #332]	@ (800587c <_printf_i+0x238>)
 8005730:	6033      	str	r3, [r6, #0]
 8005732:	bf14      	ite	ne
 8005734:	230a      	movne	r3, #10
 8005736:	2308      	moveq	r3, #8
 8005738:	2100      	movs	r1, #0
 800573a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800573e:	6866      	ldr	r6, [r4, #4]
 8005740:	60a6      	str	r6, [r4, #8]
 8005742:	2e00      	cmp	r6, #0
 8005744:	bfa2      	ittt	ge
 8005746:	6821      	ldrge	r1, [r4, #0]
 8005748:	f021 0104 	bicge.w	r1, r1, #4
 800574c:	6021      	strge	r1, [r4, #0]
 800574e:	b90d      	cbnz	r5, 8005754 <_printf_i+0x110>
 8005750:	2e00      	cmp	r6, #0
 8005752:	d04b      	beq.n	80057ec <_printf_i+0x1a8>
 8005754:	4616      	mov	r6, r2
 8005756:	fbb5 f1f3 	udiv	r1, r5, r3
 800575a:	fb03 5711 	mls	r7, r3, r1, r5
 800575e:	5dc7      	ldrb	r7, [r0, r7]
 8005760:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005764:	462f      	mov	r7, r5
 8005766:	42bb      	cmp	r3, r7
 8005768:	460d      	mov	r5, r1
 800576a:	d9f4      	bls.n	8005756 <_printf_i+0x112>
 800576c:	2b08      	cmp	r3, #8
 800576e:	d10b      	bne.n	8005788 <_printf_i+0x144>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	07df      	lsls	r7, r3, #31
 8005774:	d508      	bpl.n	8005788 <_printf_i+0x144>
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	6861      	ldr	r1, [r4, #4]
 800577a:	4299      	cmp	r1, r3
 800577c:	bfde      	ittt	le
 800577e:	2330      	movle	r3, #48	@ 0x30
 8005780:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005784:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005788:	1b92      	subs	r2, r2, r6
 800578a:	6122      	str	r2, [r4, #16]
 800578c:	f8cd a000 	str.w	sl, [sp]
 8005790:	464b      	mov	r3, r9
 8005792:	aa03      	add	r2, sp, #12
 8005794:	4621      	mov	r1, r4
 8005796:	4640      	mov	r0, r8
 8005798:	f7ff fee6 	bl	8005568 <_printf_common>
 800579c:	3001      	adds	r0, #1
 800579e:	d14a      	bne.n	8005836 <_printf_i+0x1f2>
 80057a0:	f04f 30ff 	mov.w	r0, #4294967295
 80057a4:	b004      	add	sp, #16
 80057a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	f043 0320 	orr.w	r3, r3, #32
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	4833      	ldr	r0, [pc, #204]	@ (8005880 <_printf_i+0x23c>)
 80057b4:	2778      	movs	r7, #120	@ 0x78
 80057b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	6831      	ldr	r1, [r6, #0]
 80057be:	061f      	lsls	r7, r3, #24
 80057c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80057c4:	d402      	bmi.n	80057cc <_printf_i+0x188>
 80057c6:	065f      	lsls	r7, r3, #25
 80057c8:	bf48      	it	mi
 80057ca:	b2ad      	uxthmi	r5, r5
 80057cc:	6031      	str	r1, [r6, #0]
 80057ce:	07d9      	lsls	r1, r3, #31
 80057d0:	bf44      	itt	mi
 80057d2:	f043 0320 	orrmi.w	r3, r3, #32
 80057d6:	6023      	strmi	r3, [r4, #0]
 80057d8:	b11d      	cbz	r5, 80057e2 <_printf_i+0x19e>
 80057da:	2310      	movs	r3, #16
 80057dc:	e7ac      	b.n	8005738 <_printf_i+0xf4>
 80057de:	4827      	ldr	r0, [pc, #156]	@ (800587c <_printf_i+0x238>)
 80057e0:	e7e9      	b.n	80057b6 <_printf_i+0x172>
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	f023 0320 	bic.w	r3, r3, #32
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	e7f6      	b.n	80057da <_printf_i+0x196>
 80057ec:	4616      	mov	r6, r2
 80057ee:	e7bd      	b.n	800576c <_printf_i+0x128>
 80057f0:	6833      	ldr	r3, [r6, #0]
 80057f2:	6825      	ldr	r5, [r4, #0]
 80057f4:	6961      	ldr	r1, [r4, #20]
 80057f6:	1d18      	adds	r0, r3, #4
 80057f8:	6030      	str	r0, [r6, #0]
 80057fa:	062e      	lsls	r6, r5, #24
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	d501      	bpl.n	8005804 <_printf_i+0x1c0>
 8005800:	6019      	str	r1, [r3, #0]
 8005802:	e002      	b.n	800580a <_printf_i+0x1c6>
 8005804:	0668      	lsls	r0, r5, #25
 8005806:	d5fb      	bpl.n	8005800 <_printf_i+0x1bc>
 8005808:	8019      	strh	r1, [r3, #0]
 800580a:	2300      	movs	r3, #0
 800580c:	6123      	str	r3, [r4, #16]
 800580e:	4616      	mov	r6, r2
 8005810:	e7bc      	b.n	800578c <_printf_i+0x148>
 8005812:	6833      	ldr	r3, [r6, #0]
 8005814:	1d1a      	adds	r2, r3, #4
 8005816:	6032      	str	r2, [r6, #0]
 8005818:	681e      	ldr	r6, [r3, #0]
 800581a:	6862      	ldr	r2, [r4, #4]
 800581c:	2100      	movs	r1, #0
 800581e:	4630      	mov	r0, r6
 8005820:	f7fa fcde 	bl	80001e0 <memchr>
 8005824:	b108      	cbz	r0, 800582a <_printf_i+0x1e6>
 8005826:	1b80      	subs	r0, r0, r6
 8005828:	6060      	str	r0, [r4, #4]
 800582a:	6863      	ldr	r3, [r4, #4]
 800582c:	6123      	str	r3, [r4, #16]
 800582e:	2300      	movs	r3, #0
 8005830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005834:	e7aa      	b.n	800578c <_printf_i+0x148>
 8005836:	6923      	ldr	r3, [r4, #16]
 8005838:	4632      	mov	r2, r6
 800583a:	4649      	mov	r1, r9
 800583c:	4640      	mov	r0, r8
 800583e:	47d0      	blx	sl
 8005840:	3001      	adds	r0, #1
 8005842:	d0ad      	beq.n	80057a0 <_printf_i+0x15c>
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	079b      	lsls	r3, r3, #30
 8005848:	d413      	bmi.n	8005872 <_printf_i+0x22e>
 800584a:	68e0      	ldr	r0, [r4, #12]
 800584c:	9b03      	ldr	r3, [sp, #12]
 800584e:	4298      	cmp	r0, r3
 8005850:	bfb8      	it	lt
 8005852:	4618      	movlt	r0, r3
 8005854:	e7a6      	b.n	80057a4 <_printf_i+0x160>
 8005856:	2301      	movs	r3, #1
 8005858:	4632      	mov	r2, r6
 800585a:	4649      	mov	r1, r9
 800585c:	4640      	mov	r0, r8
 800585e:	47d0      	blx	sl
 8005860:	3001      	adds	r0, #1
 8005862:	d09d      	beq.n	80057a0 <_printf_i+0x15c>
 8005864:	3501      	adds	r5, #1
 8005866:	68e3      	ldr	r3, [r4, #12]
 8005868:	9903      	ldr	r1, [sp, #12]
 800586a:	1a5b      	subs	r3, r3, r1
 800586c:	42ab      	cmp	r3, r5
 800586e:	dcf2      	bgt.n	8005856 <_printf_i+0x212>
 8005870:	e7eb      	b.n	800584a <_printf_i+0x206>
 8005872:	2500      	movs	r5, #0
 8005874:	f104 0619 	add.w	r6, r4, #25
 8005878:	e7f5      	b.n	8005866 <_printf_i+0x222>
 800587a:	bf00      	nop
 800587c:	080064e8 	.word	0x080064e8
 8005880:	080064f9 	.word	0x080064f9

08005884 <__sflush_r>:
 8005884:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800588c:	0716      	lsls	r6, r2, #28
 800588e:	4605      	mov	r5, r0
 8005890:	460c      	mov	r4, r1
 8005892:	d454      	bmi.n	800593e <__sflush_r+0xba>
 8005894:	684b      	ldr	r3, [r1, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	dc02      	bgt.n	80058a0 <__sflush_r+0x1c>
 800589a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	dd48      	ble.n	8005932 <__sflush_r+0xae>
 80058a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058a2:	2e00      	cmp	r6, #0
 80058a4:	d045      	beq.n	8005932 <__sflush_r+0xae>
 80058a6:	2300      	movs	r3, #0
 80058a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80058ac:	682f      	ldr	r7, [r5, #0]
 80058ae:	6a21      	ldr	r1, [r4, #32]
 80058b0:	602b      	str	r3, [r5, #0]
 80058b2:	d030      	beq.n	8005916 <__sflush_r+0x92>
 80058b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80058b6:	89a3      	ldrh	r3, [r4, #12]
 80058b8:	0759      	lsls	r1, r3, #29
 80058ba:	d505      	bpl.n	80058c8 <__sflush_r+0x44>
 80058bc:	6863      	ldr	r3, [r4, #4]
 80058be:	1ad2      	subs	r2, r2, r3
 80058c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80058c2:	b10b      	cbz	r3, 80058c8 <__sflush_r+0x44>
 80058c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058c6:	1ad2      	subs	r2, r2, r3
 80058c8:	2300      	movs	r3, #0
 80058ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058cc:	6a21      	ldr	r1, [r4, #32]
 80058ce:	4628      	mov	r0, r5
 80058d0:	47b0      	blx	r6
 80058d2:	1c43      	adds	r3, r0, #1
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	d106      	bne.n	80058e6 <__sflush_r+0x62>
 80058d8:	6829      	ldr	r1, [r5, #0]
 80058da:	291d      	cmp	r1, #29
 80058dc:	d82b      	bhi.n	8005936 <__sflush_r+0xb2>
 80058de:	4a2a      	ldr	r2, [pc, #168]	@ (8005988 <__sflush_r+0x104>)
 80058e0:	410a      	asrs	r2, r1
 80058e2:	07d6      	lsls	r6, r2, #31
 80058e4:	d427      	bmi.n	8005936 <__sflush_r+0xb2>
 80058e6:	2200      	movs	r2, #0
 80058e8:	6062      	str	r2, [r4, #4]
 80058ea:	04d9      	lsls	r1, r3, #19
 80058ec:	6922      	ldr	r2, [r4, #16]
 80058ee:	6022      	str	r2, [r4, #0]
 80058f0:	d504      	bpl.n	80058fc <__sflush_r+0x78>
 80058f2:	1c42      	adds	r2, r0, #1
 80058f4:	d101      	bne.n	80058fa <__sflush_r+0x76>
 80058f6:	682b      	ldr	r3, [r5, #0]
 80058f8:	b903      	cbnz	r3, 80058fc <__sflush_r+0x78>
 80058fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80058fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058fe:	602f      	str	r7, [r5, #0]
 8005900:	b1b9      	cbz	r1, 8005932 <__sflush_r+0xae>
 8005902:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005906:	4299      	cmp	r1, r3
 8005908:	d002      	beq.n	8005910 <__sflush_r+0x8c>
 800590a:	4628      	mov	r0, r5
 800590c:	f7ff fca0 	bl	8005250 <_free_r>
 8005910:	2300      	movs	r3, #0
 8005912:	6363      	str	r3, [r4, #52]	@ 0x34
 8005914:	e00d      	b.n	8005932 <__sflush_r+0xae>
 8005916:	2301      	movs	r3, #1
 8005918:	4628      	mov	r0, r5
 800591a:	47b0      	blx	r6
 800591c:	4602      	mov	r2, r0
 800591e:	1c50      	adds	r0, r2, #1
 8005920:	d1c9      	bne.n	80058b6 <__sflush_r+0x32>
 8005922:	682b      	ldr	r3, [r5, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0c6      	beq.n	80058b6 <__sflush_r+0x32>
 8005928:	2b1d      	cmp	r3, #29
 800592a:	d001      	beq.n	8005930 <__sflush_r+0xac>
 800592c:	2b16      	cmp	r3, #22
 800592e:	d11e      	bne.n	800596e <__sflush_r+0xea>
 8005930:	602f      	str	r7, [r5, #0]
 8005932:	2000      	movs	r0, #0
 8005934:	e022      	b.n	800597c <__sflush_r+0xf8>
 8005936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800593a:	b21b      	sxth	r3, r3
 800593c:	e01b      	b.n	8005976 <__sflush_r+0xf2>
 800593e:	690f      	ldr	r7, [r1, #16]
 8005940:	2f00      	cmp	r7, #0
 8005942:	d0f6      	beq.n	8005932 <__sflush_r+0xae>
 8005944:	0793      	lsls	r3, r2, #30
 8005946:	680e      	ldr	r6, [r1, #0]
 8005948:	bf08      	it	eq
 800594a:	694b      	ldreq	r3, [r1, #20]
 800594c:	600f      	str	r7, [r1, #0]
 800594e:	bf18      	it	ne
 8005950:	2300      	movne	r3, #0
 8005952:	eba6 0807 	sub.w	r8, r6, r7
 8005956:	608b      	str	r3, [r1, #8]
 8005958:	f1b8 0f00 	cmp.w	r8, #0
 800595c:	dde9      	ble.n	8005932 <__sflush_r+0xae>
 800595e:	6a21      	ldr	r1, [r4, #32]
 8005960:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005962:	4643      	mov	r3, r8
 8005964:	463a      	mov	r2, r7
 8005966:	4628      	mov	r0, r5
 8005968:	47b0      	blx	r6
 800596a:	2800      	cmp	r0, #0
 800596c:	dc08      	bgt.n	8005980 <__sflush_r+0xfc>
 800596e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005976:	81a3      	strh	r3, [r4, #12]
 8005978:	f04f 30ff 	mov.w	r0, #4294967295
 800597c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005980:	4407      	add	r7, r0
 8005982:	eba8 0800 	sub.w	r8, r8, r0
 8005986:	e7e7      	b.n	8005958 <__sflush_r+0xd4>
 8005988:	dfbffffe 	.word	0xdfbffffe

0800598c <_fflush_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	690b      	ldr	r3, [r1, #16]
 8005990:	4605      	mov	r5, r0
 8005992:	460c      	mov	r4, r1
 8005994:	b913      	cbnz	r3, 800599c <_fflush_r+0x10>
 8005996:	2500      	movs	r5, #0
 8005998:	4628      	mov	r0, r5
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	b118      	cbz	r0, 80059a6 <_fflush_r+0x1a>
 800599e:	6a03      	ldr	r3, [r0, #32]
 80059a0:	b90b      	cbnz	r3, 80059a6 <_fflush_r+0x1a>
 80059a2:	f7ff fa4b 	bl	8004e3c <__sinit>
 80059a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0f3      	beq.n	8005996 <_fflush_r+0xa>
 80059ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80059b0:	07d0      	lsls	r0, r2, #31
 80059b2:	d404      	bmi.n	80059be <_fflush_r+0x32>
 80059b4:	0599      	lsls	r1, r3, #22
 80059b6:	d402      	bmi.n	80059be <_fflush_r+0x32>
 80059b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059ba:	f7ff fc46 	bl	800524a <__retarget_lock_acquire_recursive>
 80059be:	4628      	mov	r0, r5
 80059c0:	4621      	mov	r1, r4
 80059c2:	f7ff ff5f 	bl	8005884 <__sflush_r>
 80059c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059c8:	07da      	lsls	r2, r3, #31
 80059ca:	4605      	mov	r5, r0
 80059cc:	d4e4      	bmi.n	8005998 <_fflush_r+0xc>
 80059ce:	89a3      	ldrh	r3, [r4, #12]
 80059d0:	059b      	lsls	r3, r3, #22
 80059d2:	d4e1      	bmi.n	8005998 <_fflush_r+0xc>
 80059d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059d6:	f7ff fc39 	bl	800524c <__retarget_lock_release_recursive>
 80059da:	e7dd      	b.n	8005998 <_fflush_r+0xc>

080059dc <__swhatbuf_r>:
 80059dc:	b570      	push	{r4, r5, r6, lr}
 80059de:	460c      	mov	r4, r1
 80059e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e4:	2900      	cmp	r1, #0
 80059e6:	b096      	sub	sp, #88	@ 0x58
 80059e8:	4615      	mov	r5, r2
 80059ea:	461e      	mov	r6, r3
 80059ec:	da0d      	bge.n	8005a0a <__swhatbuf_r+0x2e>
 80059ee:	89a3      	ldrh	r3, [r4, #12]
 80059f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80059f4:	f04f 0100 	mov.w	r1, #0
 80059f8:	bf14      	ite	ne
 80059fa:	2340      	movne	r3, #64	@ 0x40
 80059fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a00:	2000      	movs	r0, #0
 8005a02:	6031      	str	r1, [r6, #0]
 8005a04:	602b      	str	r3, [r5, #0]
 8005a06:	b016      	add	sp, #88	@ 0x58
 8005a08:	bd70      	pop	{r4, r5, r6, pc}
 8005a0a:	466a      	mov	r2, sp
 8005a0c:	f000 f848 	bl	8005aa0 <_fstat_r>
 8005a10:	2800      	cmp	r0, #0
 8005a12:	dbec      	blt.n	80059ee <__swhatbuf_r+0x12>
 8005a14:	9901      	ldr	r1, [sp, #4]
 8005a16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a1e:	4259      	negs	r1, r3
 8005a20:	4159      	adcs	r1, r3
 8005a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a26:	e7eb      	b.n	8005a00 <__swhatbuf_r+0x24>

08005a28 <__smakebuf_r>:
 8005a28:	898b      	ldrh	r3, [r1, #12]
 8005a2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a2c:	079d      	lsls	r5, r3, #30
 8005a2e:	4606      	mov	r6, r0
 8005a30:	460c      	mov	r4, r1
 8005a32:	d507      	bpl.n	8005a44 <__smakebuf_r+0x1c>
 8005a34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	6123      	str	r3, [r4, #16]
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	6163      	str	r3, [r4, #20]
 8005a40:	b003      	add	sp, #12
 8005a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a44:	ab01      	add	r3, sp, #4
 8005a46:	466a      	mov	r2, sp
 8005a48:	f7ff ffc8 	bl	80059dc <__swhatbuf_r>
 8005a4c:	9f00      	ldr	r7, [sp, #0]
 8005a4e:	4605      	mov	r5, r0
 8005a50:	4639      	mov	r1, r7
 8005a52:	4630      	mov	r0, r6
 8005a54:	f7ff f8da 	bl	8004c0c <_malloc_r>
 8005a58:	b948      	cbnz	r0, 8005a6e <__smakebuf_r+0x46>
 8005a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a5e:	059a      	lsls	r2, r3, #22
 8005a60:	d4ee      	bmi.n	8005a40 <__smakebuf_r+0x18>
 8005a62:	f023 0303 	bic.w	r3, r3, #3
 8005a66:	f043 0302 	orr.w	r3, r3, #2
 8005a6a:	81a3      	strh	r3, [r4, #12]
 8005a6c:	e7e2      	b.n	8005a34 <__smakebuf_r+0xc>
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	6020      	str	r0, [r4, #0]
 8005a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a76:	81a3      	strh	r3, [r4, #12]
 8005a78:	9b01      	ldr	r3, [sp, #4]
 8005a7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005a7e:	b15b      	cbz	r3, 8005a98 <__smakebuf_r+0x70>
 8005a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a84:	4630      	mov	r0, r6
 8005a86:	f000 f81d 	bl	8005ac4 <_isatty_r>
 8005a8a:	b128      	cbz	r0, 8005a98 <__smakebuf_r+0x70>
 8005a8c:	89a3      	ldrh	r3, [r4, #12]
 8005a8e:	f023 0303 	bic.w	r3, r3, #3
 8005a92:	f043 0301 	orr.w	r3, r3, #1
 8005a96:	81a3      	strh	r3, [r4, #12]
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	431d      	orrs	r5, r3
 8005a9c:	81a5      	strh	r5, [r4, #12]
 8005a9e:	e7cf      	b.n	8005a40 <__smakebuf_r+0x18>

08005aa0 <_fstat_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d07      	ldr	r5, [pc, #28]	@ (8005ac0 <_fstat_r+0x20>)
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	602b      	str	r3, [r5, #0]
 8005aae:	f7fb f8cc 	bl	8000c4a <_fstat>
 8005ab2:	1c43      	adds	r3, r0, #1
 8005ab4:	d102      	bne.n	8005abc <_fstat_r+0x1c>
 8005ab6:	682b      	ldr	r3, [r5, #0]
 8005ab8:	b103      	cbz	r3, 8005abc <_fstat_r+0x1c>
 8005aba:	6023      	str	r3, [r4, #0]
 8005abc:	bd38      	pop	{r3, r4, r5, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000ad0 	.word	0x20000ad0

08005ac4 <_isatty_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4d06      	ldr	r5, [pc, #24]	@ (8005ae0 <_isatty_r+0x1c>)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4604      	mov	r4, r0
 8005acc:	4608      	mov	r0, r1
 8005ace:	602b      	str	r3, [r5, #0]
 8005ad0:	f7fb f8cb 	bl	8000c6a <_isatty>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d102      	bne.n	8005ade <_isatty_r+0x1a>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	b103      	cbz	r3, 8005ade <_isatty_r+0x1a>
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	20000ad0 	.word	0x20000ad0

08005ae4 <_init>:
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	bf00      	nop
 8005ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aea:	bc08      	pop	{r3}
 8005aec:	469e      	mov	lr, r3
 8005aee:	4770      	bx	lr

08005af0 <_fini>:
 8005af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af2:	bf00      	nop
 8005af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af6:	bc08      	pop	{r3}
 8005af8:	469e      	mov	lr, r3
 8005afa:	4770      	bx	lr
