
STM32F411CEUx_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004534  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080046d4  080046d4  000056d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048bc  080048bc  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080048bc  080048bc  000058bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048c4  080048c4  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c4  080048c4  000058c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048c8  080048c8  000058c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080048cc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  20000068  08004934  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  08004934  00006654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cd1  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f27  00000000  00000000  0000fd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  00011c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f1  00000000  00000000  000125a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168c2  00000000  00000000  00012c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b062  00000000  00000000  0002955b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088211  00000000  00000000  000345bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc7ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba0  00000000  00000000  000bc814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000bf3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046bc 	.word	0x080046bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080046bc 	.word	0x080046bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	2b00      	cmp	r3, #0
 8000586:	d013      	beq.n	80005b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800058c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000590:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00b      	beq.n	80005b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000598:	e000      	b.n	800059c <ITM_SendChar+0x2c>
    {
      __NOP();
 800059a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0f9      	beq.n	800059a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005a6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
	...

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t index=0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]

	uint16_t chunksize=0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	827b      	strh	r3, [r7, #18]
	int ex =0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fc51 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8d7 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f967 	bl	80008ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005de:	f000 f93b 	bl	8000858 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("Starting Bootloader %d.%d \n\r",BL_Version[0],BL_Version[1]);
 80005e2:	2301      	movs	r3, #1
 80005e4:	2200      	movs	r2, #0
 80005e6:	4619      	mov	r1, r3
 80005e8:	4857      	ldr	r0, [pc, #348]	@ (8000748 <main+0x188>)
 80005ea:	f003 f99b 	bl	8003924 <iprintf>
	Set_BOOTMODE_LED();
 80005ee:	f000 f9b9 	bl	8000964 <Set_BOOTMODE_LED>

	/* Check the GPIO for 3 seconds */
	GPIO_PinState OTA_Pin_state;
	uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 80005f2:	f000 fca7 	bl	8000f44 <HAL_GetTick>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 80005fc:	60bb      	str	r3, [r7, #8]

	printf("Press the User Button PA0 to trigger OTA update...\r\n");
 80005fe:	4853      	ldr	r0, [pc, #332]	@ (800074c <main+0x18c>)
 8000600:	f003 f9f8 	bl	80039f4 <puts>
	do
	{
		OTA_Pin_state = HAL_GPIO_ReadPin( BTN_OTA_GPIO_Port, BTN_OTA_Pin);
 8000604:	2101      	movs	r1, #1
 8000606:	4852      	ldr	r0, [pc, #328]	@ (8000750 <main+0x190>)
 8000608:	f001 fc0c 	bl	8001e24 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	71fb      	strb	r3, [r7, #7]
		uint32_t current_tick = HAL_GetTick();
 8000610:	f000 fc98 	bl	8000f44 <HAL_GetTick>
 8000614:	6038      	str	r0, [r7, #0]

		/* Check the button is pressed or not for 3seconds */
		if( ( OTA_Pin_state != GPIO_PIN_RESET ) || ( current_tick > end_tick ) )
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d104      	bne.n	8000626 <main+0x66>
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	429a      	cmp	r2, r3
 8000622:	d800      	bhi.n	8000626 <main+0x66>
	{
 8000624:	e7ee      	b.n	8000604 <main+0x44>
			break;
		}
	}while( 1 );

	/*Start the Firmware or Application update */
	if( OTA_Pin_state == GPIO_PIN_SET )
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b01      	cmp	r3, #1
 800062a:	f040 8081 	bne.w	8000730 <main+0x170>
	{
		HAL_GPIO_WritePin(BOOTMODE_LED_GPIO_Port, BOOTMODE_LED_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2104      	movs	r1, #4
 8000632:	4847      	ldr	r0, [pc, #284]	@ (8000750 <main+0x190>)
 8000634:	f001 fc0e 	bl	8001e54 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000638:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800063c:	f000 fc8e 	bl	8000f5c <HAL_Delay>
		HAL_GPIO_WritePin(BOOTMODE_LED_GPIO_Port, BOOTMODE_LED_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	2104      	movs	r1, #4
 8000644:	4842      	ldr	r0, [pc, #264]	@ (8000750 <main+0x190>)
 8000646:	f001 fc05 	bl	8001e54 <HAL_GPIO_WritePin>
		//USART1->CR1 |= USART_CR1_RXNEIE;		/* Enable Receive interrupt */
		printf("Starting Firmware Download!!!\r\n");
 800064a:	4842      	ldr	r0, [pc, #264]	@ (8000754 <main+0x194>)
 800064c:	f003 f9d2 	bl	80039f4 <puts>

		do
		{
			memset(data_in, 0, ETX_OTA_PACKET_MAX_SIZE);	//CLEAR THE ARRAY
 8000650:	f240 4209 	movw	r2, #1033	@ 0x409
 8000654:	2100      	movs	r1, #0
 8000656:	4840      	ldr	r0, [pc, #256]	@ (8000758 <main+0x198>)
 8000658:	f003 faac 	bl	8003bb4 <memset>
			index=0;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
			do
			{
				while( !( USART1->SR & USART_SR_RXNE ) ) {};	/* Timeout also has to be designed */
 8000660:	bf00      	nop
 8000662:	4b3e      	ldr	r3, [pc, #248]	@ (800075c <main+0x19c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f003 0320 	and.w	r3, r3, #32
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0f9      	beq.n	8000662 <main+0xa2>
				data_in[index++]=USART1->DR;
 800066e:	4b3b      	ldr	r3, [pc, #236]	@ (800075c <main+0x19c>)
 8000670:	6859      	ldr	r1, [r3, #4]
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	1c5a      	adds	r2, r3, #1
 8000676:	617a      	str	r2, [r7, #20]
 8000678:	b2c9      	uxtb	r1, r1
 800067a:	4a37      	ldr	r2, [pc, #220]	@ (8000758 <main+0x198>)
 800067c:	54d1      	strb	r1, [r2, r3]
				if (data_in[0] != ETX_OTA_SOF)
 800067e:	4b36      	ldr	r3, [pc, #216]	@ (8000758 <main+0x198>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b2a      	cmp	r3, #42	@ 0x2a
 8000684:	d003      	beq.n	800068e <main+0xce>
				{
					printf("Not valid Start packet, EXITING!!! \n\r");
 8000686:	4836      	ldr	r0, [pc, #216]	@ (8000760 <main+0x1a0>)
 8000688:	f003 f94c 	bl	8003924 <iprintf>
					break;
 800068c:	e01f      	b.n	80006ce <main+0x10e>
				}
				//check chunk length
				if (index>=6)
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	2b05      	cmp	r3, #5
 8000692:	d913      	bls.n	80006bc <main+0xfc>
				{
					chunksize = (data_in[3]<<8u) + (data_in[2])+7;
 8000694:	4b30      	ldr	r3, [pc, #192]	@ (8000758 <main+0x198>)
 8000696:	78db      	ldrb	r3, [r3, #3]
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	b29b      	uxth	r3, r3
 800069c:	4a2e      	ldr	r2, [pc, #184]	@ (8000758 <main+0x198>)
 800069e:	7892      	ldrb	r2, [r2, #2]
 80006a0:	4413      	add	r3, r2
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	3307      	adds	r3, #7
 80006a6:	827b      	strh	r3, [r7, #18]
					fwsize = (data_in[5]<<8u) + (data_in[4]);
 80006a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000758 <main+0x198>)
 80006aa:	795b      	ldrb	r3, [r3, #5]
 80006ac:	021b      	lsls	r3, r3, #8
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	4a29      	ldr	r2, [pc, #164]	@ (8000758 <main+0x198>)
 80006b2:	7912      	ldrb	r2, [r2, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000764 <main+0x1a4>)
 80006ba:	801a      	strh	r2, [r3, #0]
				}
				TotalCharsReceived =index;
 80006bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000768 <main+0x1a8>)
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	6013      	str	r3, [r2, #0]
			}
			while (data_in[chunksize-1] != ETX_OTA_EOF);	//this byte has to be received, else it will be stuck here
 80006c2:	8a7b      	ldrh	r3, [r7, #18]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	4a24      	ldr	r2, [pc, #144]	@ (8000758 <main+0x198>)
 80006c8:	5cd3      	ldrb	r3, [r2, r3]
 80006ca:	2b23      	cmp	r3, #35	@ 0x23
 80006cc:	d1c8      	bne.n	8000660 <main+0xa0>
			 * But for now let us assume that if EOF is not matching then if will get stuck in above while loop
			 * verify EOF. */

			//ota_fw_received_size=chunksize-7 /*  1B-SOF + 1B-TYPE + 2B-CHUNKSIZE + 2B-FWSIZE + .... + 1B-EOF = 7B  */;
			//printf("[%d/%d]chunksize is %d, firmware size is %d \n\r",counter++,(fwsize/OTA_PACKET_MAX_SIZE),chunksize,fwsize);
			printf("Copying the chunk to flash\n\r");
 80006ce:	4827      	ldr	r0, [pc, #156]	@ (800076c <main+0x1ac>)
 80006d0:	f003 f928 	bl	8003924 <iprintf>
			/* write the chunk to the Flash (App location) */
			write_data_to_flash_app( &data_in[6], chunksize-7, (ota_fw_received_size == 0));
 80006d4:	8a7b      	ldrh	r3, [r7, #18]
 80006d6:	3b07      	subs	r3, #7
 80006d8:	b299      	uxth	r1, r3
 80006da:	4b25      	ldr	r3, [pc, #148]	@ (8000770 <main+0x1b0>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	bf0c      	ite	eq
 80006e2:	2301      	moveq	r3, #1
 80006e4:	2300      	movne	r3, #0
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	4822      	ldr	r0, [pc, #136]	@ (8000774 <main+0x1b4>)
 80006ec:	f000 f970 	bl	80009d0 <write_data_to_flash_app>
			if( ex == HAL_OK )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d10c      	bne.n	8000710 <main+0x150>
			{
				printf("[%d of %d bytes received]\r\n", ota_fw_received_size, fwsize);
 80006f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000770 <main+0x1b0>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	4619      	mov	r1, r3
 80006fc:	4b19      	ldr	r3, [pc, #100]	@ (8000764 <main+0x1a4>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	481d      	ldr	r0, [pc, #116]	@ (8000778 <main+0x1b8>)
 8000704:	f003 f90e 	bl	8003924 <iprintf>

				/*
				 * Sending Acknowledgement to recieve another batch of FW chunk
				 */
				etx_ota_send_resp(ETX_OTA_ACK);
 8000708:	2000      	movs	r0, #0
 800070a:	f000 f93b 	bl	8000984 <etx_ota_send_resp>
 800070e:	e003      	b.n	8000718 <main+0x158>
				//			while( !( USART1->SR & USART_SR_TXE ) ) {};
				//			USART2->DR = rxb;
			}
			else
			{
				printf("FLASH ERROR, EXITING!!!\n\r");
 8000710:	481a      	ldr	r0, [pc, #104]	@ (800077c <main+0x1bc>)
 8000712:	f003 f907 	bl	8003924 <iprintf>
				break;
 8000716:	e005      	b.n	8000724 <main+0x164>
			}
		}
		while( !(ota_fw_received_size >= fwsize) );
 8000718:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <main+0x1b0>)
 800071a:	881a      	ldrh	r2, [r3, #0]
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <main+0x1a4>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	429a      	cmp	r2, r3
 8000722:	d395      	bcc.n	8000650 <main+0x90>
		//received the full data. So, move to end
		printf("FLASH UPDATED, Rebooting...\n\r");
 8000724:	4816      	ldr	r0, [pc, #88]	@ (8000780 <main+0x1c0>)
 8000726:	f003 f8fd 	bl	8003924 <iprintf>
		HAL_NVIC_SystemReset();
 800072a:	f000 fd88 	bl	800123e <HAL_NVIC_SystemReset>
 800072e:	e002      	b.n	8000736 <main+0x176>
	}
	else
	{
		printf("Button press karna \n\r");
 8000730:	4814      	ldr	r0, [pc, #80]	@ (8000784 <main+0x1c4>)
 8000732:	f003 f8f7 	bl	8003924 <iprintf>
	}

	HAL_Delay(2000);
 8000736:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800073a:	f000 fc0f 	bl	8000f5c <HAL_Delay>
	goto_application();
 800073e:	f000 f9c9 	bl	8000ad4 <goto_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000742:	bf00      	nop
 8000744:	e7fd      	b.n	8000742 <main+0x182>
 8000746:	bf00      	nop
 8000748:	080046d4 	.word	0x080046d4
 800074c:	080046f4 	.word	0x080046f4
 8000750:	40020000 	.word	0x40020000
 8000754:	08004728 	.word	0x08004728
 8000758:	200000d0 	.word	0x200000d0
 800075c:	40011000 	.word	0x40011000
 8000760:	08004748 	.word	0x08004748
 8000764:	200000cc 	.word	0x200000cc
 8000768:	200004dc 	.word	0x200004dc
 800076c:	08004770 	.word	0x08004770
 8000770:	200000ce 	.word	0x200000ce
 8000774:	200000d6 	.word	0x200000d6
 8000778:	08004790 	.word	0x08004790
 800077c:	080047ac 	.word	0x080047ac
 8000780:	080047c8 	.word	0x080047c8
 8000784:	080047e8 	.word	0x080047e8

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	@ 0x50
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	2230      	movs	r2, #48	@ 0x30
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f003 fa0c 	bl	8003bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	4b27      	ldr	r3, [pc, #156]	@ (8000850 <SystemClock_Config+0xc8>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	4a26      	ldr	r2, [pc, #152]	@ (8000850 <SystemClock_Config+0xc8>)
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80007bc:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <SystemClock_Config+0xc8>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	4b21      	ldr	r3, [pc, #132]	@ (8000854 <SystemClock_Config+0xcc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a20      	ldr	r2, [pc, #128]	@ (8000854 <SystemClock_Config+0xcc>)
 80007d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <SystemClock_Config+0xcc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e4:	2301      	movs	r3, #1
 80007e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ee:	2302      	movs	r3, #2
 80007f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007f8:	2319      	movs	r3, #25
 80007fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007fc:	23c0      	movs	r3, #192	@ 0xc0
 80007fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000804:	2304      	movs	r3, #4
 8000806:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fb3b 	bl	8001e88 <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000818:	f000 f990 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000820:	2302      	movs	r3, #2
 8000822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2103      	movs	r1, #3
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fd9d 	bl	8002378 <HAL_RCC_ClockConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000844:	f000 f97a 	bl	8000b3c <Error_Handler>
  }
}
 8000848:	bf00      	nop
 800084a:	3750      	adds	r7, #80	@ 0x50
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_USART1_UART_Init+0x4c>)
 800085e:	4a12      	ldr	r2, [pc, #72]	@ (80008a8 <MX_USART1_UART_Init+0x50>)
 8000860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_USART1_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_USART1_UART_Init+0x4c>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_USART1_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000890:	f001 ff52 	bl	8002738 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800089a:	f000 f94f 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000084 	.word	0x20000084
 80008a8:	40011000 	.word	0x40011000

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b25      	ldr	r3, [pc, #148]	@ (800095c <MX_GPIO_Init+0xb0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a24      	ldr	r2, [pc, #144]	@ (800095c <MX_GPIO_Init+0xb0>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b22      	ldr	r3, [pc, #136]	@ (800095c <MX_GPIO_Init+0xb0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b1e      	ldr	r3, [pc, #120]	@ (800095c <MX_GPIO_Init+0xb0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a1d      	ldr	r2, [pc, #116]	@ (800095c <MX_GPIO_Init+0xb0>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <MX_GPIO_Init+0xb0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b17      	ldr	r3, [pc, #92]	@ (800095c <MX_GPIO_Init+0xb0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a16      	ldr	r2, [pc, #88]	@ (800095c <MX_GPIO_Init+0xb0>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_GPIO_Init+0xb0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, APPMODE_LED_Pin|BOOTMODE_LED_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2106      	movs	r1, #6
 800091a:	4811      	ldr	r0, [pc, #68]	@ (8000960 <MX_GPIO_Init+0xb4>)
 800091c:	f001 fa9a 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_OTA_Pin */
  GPIO_InitStruct.Pin = BTN_OTA_Pin;
 8000920:	2301      	movs	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_OTA_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	480b      	ldr	r0, [pc, #44]	@ (8000960 <MX_GPIO_Init+0xb4>)
 8000934:	f001 f80e 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pins : APPMODE_LED_Pin BOOTMODE_LED_Pin */
  GPIO_InitStruct.Pin = APPMODE_LED_Pin|BOOTMODE_LED_Pin;
 8000938:	2306      	movs	r3, #6
 800093a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	4619      	mov	r1, r3
 800094e:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_GPIO_Init+0xb4>)
 8000950:	f001 f800 	bl	8001954 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40020000 	.word	0x40020000

08000964 <Set_BOOTMODE_LED>:

/* USER CODE BEGIN 4 */
void Set_BOOTMODE_LED(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BOOTMODE_LED_GPIO_Port, BOOTMODE_LED_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	2104      	movs	r1, #4
 800096c:	4804      	ldr	r0, [pc, #16]	@ (8000980 <Set_BOOTMODE_LED+0x1c>)
 800096e:	f001 fa71 	bl	8001e54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(APPMODE_LED_GPIO_Port, APPMODE_LED_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2102      	movs	r1, #2
 8000976:	4802      	ldr	r0, [pc, #8]	@ (8000980 <Set_BOOTMODE_LED+0x1c>)
 8000978:	f001 fa6c 	bl	8001e54 <HAL_GPIO_WritePin>
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40020000 	.word	0x40020000

08000984 <etx_ota_send_resp>:
	HAL_GPIO_WritePin(BOOTMODE_LED_GPIO_Port, BOOTMODE_LED_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(APPMODE_LED_GPIO_Port, APPMODE_LED_Pin, GPIO_PIN_SET);
}

static void etx_ota_send_resp( uint8_t type )
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
  ETX_OTA_RESP_ rsp =
 800098e:	232a      	movs	r3, #42	@ 0x2a
 8000990:	733b      	strb	r3, [r7, #12]
 8000992:	2303      	movs	r3, #3
 8000994:	737b      	strb	r3, [r7, #13]
 8000996:	2301      	movs	r3, #1
 8000998:	81fb      	strh	r3, [r7, #14]
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	743b      	strb	r3, [r7, #16]
 800099e:	2300      	movs	r3, #0
 80009a0:	747b      	strb	r3, [r7, #17]
 80009a2:	2300      	movs	r3, #0
 80009a4:	74bb      	strb	r3, [r7, #18]
 80009a6:	2300      	movs	r3, #0
 80009a8:	74fb      	strb	r3, [r7, #19]
 80009aa:	2300      	movs	r3, #0
 80009ac:	753b      	strb	r3, [r7, #20]
 80009ae:	2323      	movs	r3, #35	@ 0x23
 80009b0:	757b      	strb	r3, [r7, #21]
    .crc         = 0u,                //TODO: Add CRC
    .eof         = ETX_OTA_EOF
  };

  //send response
  HAL_UART_Transmit(&huart1, (uint8_t *)&rsp, sizeof(ETX_OTA_RESP_), HAL_MAX_DELAY);
 80009b2:	f107 010c 	add.w	r1, r7, #12
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	220a      	movs	r2, #10
 80009bc:	4803      	ldr	r0, [pc, #12]	@ (80009cc <etx_ota_send_resp+0x48>)
 80009be:	f001 ff3d 	bl	800283c <HAL_UART_Transmit>
}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000084 	.word	0x20000084

080009d0 <write_data_to_flash_app>:
 * @is_first_block true - if this is first block, false - not first block
 * @retval HAL_StatusTypeDef
 */
static int write_data_to_flash_app( uint8_t *data,
		uint16_t data_len, bool is_first_block)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	807b      	strh	r3, [r7, #2]
 80009dc:	4613      	mov	r3, r2
 80009de:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret;

	do
	{
		ret = HAL_FLASH_Unlock();
 80009e0:	f000 fd24 	bl	800142c <HAL_FLASH_Unlock>
 80009e4:	4603      	mov	r3, r0
 80009e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if( ret != HAL_OK )
 80009ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d15f      	bne.n	8000ab2 <write_data_to_flash_app+0xe2>
		{
			break;
		}

		//No need to erase every time. Erase only the first time.
		if( is_first_block )
 80009f2:	787b      	ldrb	r3, [r7, #1]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d019      	beq.n	8000a2c <write_data_to_flash_app+0x5c>
		{
			printf("Erasing the Flash memory...\r\n");
 80009f8:	4832      	ldr	r0, [pc, #200]	@ (8000ac4 <write_data_to_flash_app+0xf4>)
 80009fa:	f002 fffb 	bl	80039f4 <puts>
			//Erase the Flash
			FLASH_EraseInitTypeDef EraseInitStruct;
			uint32_t SectorError;

			EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
			EraseInitStruct.Sector        = FLASH_SECTOR_5;
 8000a02:	2305      	movs	r3, #5
 8000a04:	617b      	str	r3, [r7, #20]
			EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors(5,6)
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
			EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]

			ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8000a0e:	f107 0208 	add.w	r2, r7, #8
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 fe79 	bl	8001710 <HAL_FLASHEx_Erase>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if( ret != HAL_OK )
 8000a24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d144      	bne.n	8000ab6 <write_data_to_flash_app+0xe6>
			{
				break;
			}
		}
		printf("FLASH write at address %x \n\r", (ETX_APP_FLASH_ADDR + ota_fw_received_size));
 8000a2c:	4b26      	ldr	r3, [pc, #152]	@ (8000ac8 <write_data_to_flash_app+0xf8>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000a34:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4824      	ldr	r0, [pc, #144]	@ (8000acc <write_data_to_flash_app+0xfc>)
 8000a3c:	f002 ff72 	bl	8003924 <iprintf>
		for(int i = 0; i < data_len; i++ )
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
 8000a44:	e028      	b.n	8000a98 <write_data_to_flash_app+0xc8>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
					(ETX_APP_FLASH_ADDR + ota_fw_received_size),
 8000a46:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <write_data_to_flash_app+0xf8>)
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000a4e:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 8000a52:	4619      	mov	r1, r3
					data[i]
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2200      	movs	r2, #0
 8000a60:	461c      	mov	r4, r3
 8000a62:	4615      	mov	r5, r2
 8000a64:	4622      	mov	r2, r4
 8000a66:	462b      	mov	r3, r5
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f000 fc8b 	bl	8001384 <HAL_FLASH_Program>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			);
			if( ret == HAL_OK )
 8000a74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d106      	bne.n	8000a8a <write_data_to_flash_app+0xba>
			{
				//update the data count
				ota_fw_received_size += 1;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <write_data_to_flash_app+0xf8>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <write_data_to_flash_app+0xf8>)
 8000a86:	801a      	strh	r2, [r3, #0]
 8000a88:	e003      	b.n	8000a92 <write_data_to_flash_app+0xc2>

			}
			else
			{
				printf("Flash Write Error\r\n");
 8000a8a:	4811      	ldr	r0, [pc, #68]	@ (8000ad0 <write_data_to_flash_app+0x100>)
 8000a8c:	f002 ffb2 	bl	80039f4 <puts>
				break;
 8000a90:	e006      	b.n	8000aa0 <write_data_to_flash_app+0xd0>
		for(int i = 0; i < data_len; i++ )
 8000a92:	6a3b      	ldr	r3, [r7, #32]
 8000a94:	3301      	adds	r3, #1
 8000a96:	623b      	str	r3, [r7, #32]
 8000a98:	887b      	ldrh	r3, [r7, #2]
 8000a9a:	6a3a      	ldr	r2, [r7, #32]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbd2      	blt.n	8000a46 <write_data_to_flash_app+0x76>
			}
		}
		//printf("FLASH written at address %x \n\r", (ETX_APP_FLASH_ADDR + ota_fw_received_size));
		//printf("%d bytes written in flash \n\r", ota_fw_received_size);
		ret = HAL_FLASH_Lock();
 8000aa0:	f000 fce6 	bl	8001470 <HAL_FLASH_Lock>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if( ret != HAL_OK )
 8000aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	e002      	b.n	8000ab8 <write_data_to_flash_app+0xe8>
			break;
 8000ab2:	bf00      	nop
 8000ab4:	e000      	b.n	8000ab8 <write_data_to_flash_app+0xe8>
				break;
 8000ab6:	bf00      	nop
		{
			break;
		}
	}while( false );

	return ret;
 8000ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3728      	adds	r7, #40	@ 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ac4:	08004800 	.word	0x08004800
 8000ac8:	200000ce 	.word	0x200000ce
 8000acc:	08004820 	.word	0x08004820
 8000ad0:	08004840 	.word	0x08004840

08000ad4 <goto_application>:

static void goto_application(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
	printf("Will jump to application\n\r");
 8000ada:	4807      	ldr	r0, [pc, #28]	@ (8000af8 <goto_application+0x24>)
 8000adc:	f002 ff22 	bl	8003924 <iprintf>
	HAL_UART_DeInit(&huart1);	//DEINITIALIZE THE UART
 8000ae0:	4806      	ldr	r0, [pc, #24]	@ (8000afc <goto_application+0x28>)
 8000ae2:	f001 fe79 	bl	80027d8 <HAL_UART_DeInit>
	void (*app_reset_handler) (void) = (void*) ( *(volatile uint32_t *) (0x08020000 + 4));
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <goto_application+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	607b      	str	r3, [r7, #4]
	void Set_APPMODE_LED();
	app_reset_handler();		//call the application reset handler
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4798      	blx	r3
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	08004854 	.word	0x08004854
 8000afc:	20000084 	.word	0x20000084
 8000b00:	08020004 	.word	0x08020004

08000b04 <_write>:
 */

#ifdef ENABLE_TRACE
/* Override low-level _write system call */
int _write(int file, char *ptr, int len)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	e009      	b.n	8000b2a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	1c5a      	adds	r2, r3, #1
 8000b1a:	60ba      	str	r2, [r7, #8]
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fd26 	bl	8000570 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	3301      	adds	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	dbf1      	blt.n	8000b16 <_write+0x12>
	}
	return len;
 8000b32:	687b      	ldr	r3, [r7, #4]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <Error_Handler+0x8>

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	4a0f      	ldr	r2, [pc, #60]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	4a08      	ldr	r2, [pc, #32]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	@ 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c2c <HAL_UART_MspInit+0x94>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d134      	bne.n	8000c24 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <HAL_UART_MspInit+0x98>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8000c30 <HAL_UART_MspInit+0x98>)
 8000bc4:	f043 0310 	orr.w	r3, r3, #16
 8000bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bca:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <HAL_UART_MspInit+0x98>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <HAL_UART_MspInit+0x98>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a14      	ldr	r2, [pc, #80]	@ (8000c30 <HAL_UART_MspInit+0x98>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <HAL_UART_MspInit+0x98>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bf2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c04:	2307      	movs	r3, #7
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4809      	ldr	r0, [pc, #36]	@ (8000c34 <HAL_UART_MspInit+0x9c>)
 8000c10:	f000 fea0 	bl	8001954 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	2025      	movs	r0, #37	@ 0x25
 8000c1a:	f000 fad8 	bl	80011ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c1e:	2025      	movs	r0, #37	@ 0x25
 8000c20:	f000 faf1 	bl	8001206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	@ 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40011000 	.word	0x40011000
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000

08000c38 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <HAL_UART_MspDeInit+0x38>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d10d      	bne.n	8000c66 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <HAL_UART_MspDeInit+0x3c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	4a09      	ldr	r2, [pc, #36]	@ (8000c74 <HAL_UART_MspDeInit+0x3c>)
 8000c50:	f023 0310 	bic.w	r3, r3, #16
 8000c54:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000c56:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000c5a:	4807      	ldr	r0, [pc, #28]	@ (8000c78 <HAL_UART_MspDeInit+0x40>)
 8000c5c:	f000 fffe 	bl	8001c5c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000c60:	2025      	movs	r0, #37	@ 0x25
 8000c62:	f000 fade 	bl	8001222 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40011000 	.word	0x40011000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <NMI_Handler+0x4>

08000c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <MemManage_Handler+0x4>

08000c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd2:	f000 f923 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
//			  data_in[DataPos++]=USART1->DR;
//			  TotalCharsReceived =DataPos;
//		}
//
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce0:	4802      	ldr	r0, [pc, #8]	@ (8000cec <USART1_IRQHandler+0x10>)
 8000ce2:	f001 fe37 	bl	8002954 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000084 	.word	0x20000084

08000cf0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e00a      	b.n	8000d18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d02:	f3af 8000 	nop.w
 8000d06:	4601      	mov	r1, r0
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	60ba      	str	r2, [r7, #8]
 8000d0e:	b2ca      	uxtb	r2, r1
 8000d10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbf0      	blt.n	8000d02 <_read+0x12>
  }

  return len;
 8000d20:	687b      	ldr	r3, [r7, #4]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d52:	605a      	str	r2, [r3, #4]
  return 0;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_isatty>:

int _isatty(int file)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	@ (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	@ (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f002 ff44 	bl	8003c50 <__errno>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	220c      	movs	r2, #12
 8000dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <_sbrk+0x64>)
 8000de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20020000 	.word	0x20020000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	200004e0 	.word	0x200004e0
 8000dfc:	20000658 	.word	0x20000658

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	@ (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e28:	f7ff ffea 	bl	8000e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e2c:	480c      	ldr	r0, [pc, #48]	@ (8000e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e2e:	490d      	ldr	r1, [pc, #52]	@ (8000e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e30:	4a0d      	ldr	r2, [pc, #52]	@ (8000e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e44:	4c0a      	ldr	r4, [pc, #40]	@ (8000e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e52:	f002 ff03 	bl	8003c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fbb3 	bl	80005c0 <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e68:	080048cc 	.word	0x080048cc
  ldr r2, =_sbss
 8000e6c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e70:	20000654 	.word	0x20000654

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	@ (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f989 	bl	80011b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	200f      	movs	r0, #15
 8000ea8:	f000 f808 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fe4c 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f9b3 	bl	8001246 <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 f969 	bl	80011ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	@ (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000004 	.word	0x20000004

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	200004e4 	.word	0x200004e4

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	@ (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200004e4 	.word	0x200004e4

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <__NVIC_SetPriorityGrouping>:
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	@ (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 021f 	and.w	r2, r3, #31
 8001020:	4907      	ldr	r1, [pc, #28]	@ (8001040 <__NVIC_EnableIRQ+0x38>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_DisableIRQ>:
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db12      	blt.n	800107c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f003 021f 	and.w	r2, r3, #31
 800105c:	490a      	ldr	r1, [pc, #40]	@ (8001088 <__NVIC_DisableIRQ+0x44>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	095b      	lsrs	r3, r3, #5
 8001064:	2001      	movs	r0, #1
 8001066:	fa00 f202 	lsl.w	r2, r0, r2
 800106a:	3320      	adds	r3, #32
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001070:	f3bf 8f4f 	dsb	sy
}
 8001074:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001076:	f3bf 8f6f 	isb	sy
}
 800107a:	bf00      	nop
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000e100 	.word	0xe000e100

0800108c <__NVIC_SetPriority>:
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	@ (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	@ (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <NVIC_EncodePriority>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	@ 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	bf28      	it	cs
 80010fe:	2304      	movcs	r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3304      	adds	r3, #4
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b03      	subs	r3, #3
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43d9      	mvns	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	4313      	orrs	r3, r2
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	@ 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <__NVIC_SystemReset>:
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800114c:	f3bf 8f4f 	dsb	sy
}
 8001150:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <__NVIC_SystemReset+0x24>)
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800115a:	4904      	ldr	r1, [pc, #16]	@ (800116c <__NVIC_SystemReset+0x24>)
 800115c:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <__NVIC_SystemReset+0x28>)
 800115e:	4313      	orrs	r3, r2
 8001160:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001162:	f3bf 8f4f 	dsb	sy
}
 8001166:	bf00      	nop
    __NOP();
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <__NVIC_SystemReset+0x20>
 800116c:	e000ed00 	.word	0xe000ed00
 8001170:	05fa0004 	.word	0x05fa0004

08001174 <SysTick_Config>:
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001184:	d301      	bcc.n	800118a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2301      	movs	r3, #1
 8001188:	e00f      	b.n	80011aa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <SysTick_Config+0x40>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001192:	210f      	movs	r1, #15
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f7ff ff78 	bl	800108c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <SysTick_Config+0x40>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <SysTick_Config+0x40>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff feef 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e0:	f7ff ff04 	bl	8000fec <__NVIC_GetPriorityGrouping>
 80011e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff ff78 	bl	80010e0 <NVIC_EncodePriority>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff47 	bl	800108c <__NVIC_SetPriority>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fef7 	bl	8001008 <__NVIC_EnableIRQ>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff07 	bl	8001044 <__NVIC_DisableIRQ>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001242:	f7ff ff81 	bl	8001148 <__NVIC_SystemReset>

08001246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff90 	bl	8001174 <SysTick_Config>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff fe6a 	bl	8000f44 <HAL_GetTick>
 8001270:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d008      	beq.n	8001290 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2280      	movs	r2, #128	@ 0x80
 8001282:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e052      	b.n	8001336 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0216 	bic.w	r2, r2, #22
 800129e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	695a      	ldr	r2, [r3, #20]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d103      	bne.n	80012c0 <HAL_DMA_Abort+0x62>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d007      	beq.n	80012d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0208 	bic.w	r2, r2, #8
 80012ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0201 	bic.w	r2, r2, #1
 80012de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012e0:	e013      	b.n	800130a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012e2:	f7ff fe2f 	bl	8000f44 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d90c      	bls.n	800130a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2220      	movs	r2, #32
 80012f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2203      	movs	r2, #3
 80012fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e015      	b.n	8001336 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1e4      	bne.n	80012e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800131c:	223f      	movs	r2, #63	@ 0x3f
 800131e:	409a      	lsls	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d004      	beq.n	800135c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2280      	movs	r2, #128	@ 0x80
 8001356:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e00c      	b.n	8001376 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2205      	movs	r2, #5
 8001360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001396:	4b23      	ldr	r3, [pc, #140]	@ (8001424 <HAL_FLASH_Program+0xa0>)
 8001398:	7e1b      	ldrb	r3, [r3, #24]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_FLASH_Program+0x1e>
 800139e:	2302      	movs	r3, #2
 80013a0:	e03b      	b.n	800141a <HAL_FLASH_Program+0x96>
 80013a2:	4b20      	ldr	r3, [pc, #128]	@ (8001424 <HAL_FLASH_Program+0xa0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80013ac:	f000 f870 	bl	8001490 <FLASH_WaitForLastOperation>
 80013b0:	4603      	mov	r3, r0
 80013b2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d12b      	bne.n	8001412 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d105      	bne.n	80013cc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80013c0:	783b      	ldrb	r3, [r7, #0]
 80013c2:	4619      	mov	r1, r3
 80013c4:	68b8      	ldr	r0, [r7, #8]
 80013c6:	f000 f91b 	bl	8001600 <FLASH_Program_Byte>
 80013ca:	e016      	b.n	80013fa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d105      	bne.n	80013de <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80013d2:	883b      	ldrh	r3, [r7, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	68b8      	ldr	r0, [r7, #8]
 80013d8:	f000 f8ee 	bl	80015b8 <FLASH_Program_HalfWord>
 80013dc:	e00d      	b.n	80013fa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d105      	bne.n	80013f0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	4619      	mov	r1, r3
 80013e8:	68b8      	ldr	r0, [r7, #8]
 80013ea:	f000 f8c3 	bl	8001574 <FLASH_Program_Word>
 80013ee:	e004      	b.n	80013fa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80013f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013f4:	68b8      	ldr	r0, [r7, #8]
 80013f6:	f000 f88b 	bl	8001510 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013fa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80013fe:	f000 f847 	bl	8001490 <FLASH_WaitForLastOperation>
 8001402:	4603      	mov	r3, r0
 8001404:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001406:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <HAL_FLASH_Program+0xa4>)
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	4a07      	ldr	r2, [pc, #28]	@ (8001428 <HAL_FLASH_Program+0xa4>)
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001412:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <HAL_FLASH_Program+0xa0>)
 8001414:	2200      	movs	r2, #0
 8001416:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001418:	7dfb      	ldrb	r3, [r7, #23]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200004e8 	.word	0x200004e8
 8001428:	40023c00 	.word	0x40023c00

0800142c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <HAL_FLASH_Unlock+0x38>)
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	2b00      	cmp	r3, #0
 800143c:	da0b      	bge.n	8001456 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <HAL_FLASH_Unlock+0x38>)
 8001440:	4a09      	ldr	r2, [pc, #36]	@ (8001468 <HAL_FLASH_Unlock+0x3c>)
 8001442:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001444:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <HAL_FLASH_Unlock+0x38>)
 8001446:	4a09      	ldr	r2, [pc, #36]	@ (800146c <HAL_FLASH_Unlock+0x40>)
 8001448:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <HAL_FLASH_Unlock+0x38>)
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b00      	cmp	r3, #0
 8001450:	da01      	bge.n	8001456 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001456:	79fb      	ldrb	r3, [r7, #7]
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	40023c00 	.word	0x40023c00
 8001468:	45670123 	.word	0x45670123
 800146c:	cdef89ab 	.word	0xcdef89ab

08001470 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_FLASH_Lock+0x1c>)
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	4a04      	ldr	r2, [pc, #16]	@ (800148c <HAL_FLASH_Lock+0x1c>)
 800147a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800147e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40023c00 	.word	0x40023c00

08001490 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <FLASH_WaitForLastOperation+0x78>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80014a2:	f7ff fd4f 	bl	8000f44 <HAL_GetTick>
 80014a6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80014a8:	e010      	b.n	80014cc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d00c      	beq.n	80014cc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d007      	beq.n	80014c8 <FLASH_WaitForLastOperation+0x38>
 80014b8:	f7ff fd44 	bl	8000f44 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d201      	bcs.n	80014cc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e019      	b.n	8001500 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80014cc:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <FLASH_WaitForLastOperation+0x7c>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e8      	bne.n	80014aa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80014d8:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <FLASH_WaitForLastOperation+0x7c>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014e4:	4b09      	ldr	r3, [pc, #36]	@ (800150c <FLASH_WaitForLastOperation+0x7c>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80014ea:	4b08      	ldr	r3, [pc, #32]	@ (800150c <FLASH_WaitForLastOperation+0x7c>)
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80014f6:	f000 f8a5 	bl	8001644 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
  
}  
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200004e8 	.word	0x200004e8
 800150c:	40023c00 	.word	0x40023c00

08001510 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800151c:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <FLASH_Program_DoubleWord+0x60>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	4a13      	ldr	r2, [pc, #76]	@ (8001570 <FLASH_Program_DoubleWord+0x60>)
 8001522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001526:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <FLASH_Program_DoubleWord+0x60>)
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	4a10      	ldr	r2, [pc, #64]	@ (8001570 <FLASH_Program_DoubleWord+0x60>)
 800152e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001532:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001534:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <FLASH_Program_DoubleWord+0x60>)
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <FLASH_Program_DoubleWord+0x60>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001546:	f3bf 8f6f 	isb	sy
}
 800154a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800154c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	000a      	movs	r2, r1
 800155a:	2300      	movs	r3, #0
 800155c:	68f9      	ldr	r1, [r7, #12]
 800155e:	3104      	adds	r1, #4
 8001560:	4613      	mov	r3, r2
 8001562:	600b      	str	r3, [r1, #0]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	40023c00 	.word	0x40023c00

08001574 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <FLASH_Program_Word+0x40>)
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	4a0c      	ldr	r2, [pc, #48]	@ (80015b4 <FLASH_Program_Word+0x40>)
 8001584:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001588:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800158a:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <FLASH_Program_Word+0x40>)
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	4a09      	ldr	r2, [pc, #36]	@ (80015b4 <FLASH_Program_Word+0x40>)
 8001590:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001594:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001596:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <FLASH_Program_Word+0x40>)
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	4a06      	ldr	r2, [pc, #24]	@ (80015b4 <FLASH_Program_Word+0x40>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	601a      	str	r2, [r3, #0]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40023c00 	.word	0x40023c00

080015b8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015c4:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <FLASH_Program_HalfWord+0x44>)
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	4a0c      	ldr	r2, [pc, #48]	@ (80015fc <FLASH_Program_HalfWord+0x44>)
 80015ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80015ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80015d0:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <FLASH_Program_HalfWord+0x44>)
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	4a09      	ldr	r2, [pc, #36]	@ (80015fc <FLASH_Program_HalfWord+0x44>)
 80015d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015dc:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <FLASH_Program_HalfWord+0x44>)
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	4a06      	ldr	r2, [pc, #24]	@ (80015fc <FLASH_Program_HalfWord+0x44>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	801a      	strh	r2, [r3, #0]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023c00 	.word	0x40023c00

08001600 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800160c:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <FLASH_Program_Byte+0x40>)
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	4a0b      	ldr	r2, [pc, #44]	@ (8001640 <FLASH_Program_Byte+0x40>)
 8001612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001616:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <FLASH_Program_Byte+0x40>)
 800161a:	4a09      	ldr	r2, [pc, #36]	@ (8001640 <FLASH_Program_Byte+0x40>)
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001620:	4b07      	ldr	r3, [pc, #28]	@ (8001640 <FLASH_Program_Byte+0x40>)
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	4a06      	ldr	r2, [pc, #24]	@ (8001640 <FLASH_Program_Byte+0x40>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	701a      	strb	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40023c00 	.word	0x40023c00

08001644 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001648:	4b2f      	ldr	r3, [pc, #188]	@ (8001708 <FLASH_SetErrorCode+0xc4>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001654:	4b2d      	ldr	r3, [pc, #180]	@ (800170c <FLASH_SetErrorCode+0xc8>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	f043 0310 	orr.w	r3, r3, #16
 800165c:	4a2b      	ldr	r2, [pc, #172]	@ (800170c <FLASH_SetErrorCode+0xc8>)
 800165e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001660:	4b29      	ldr	r3, [pc, #164]	@ (8001708 <FLASH_SetErrorCode+0xc4>)
 8001662:	2210      	movs	r2, #16
 8001664:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001666:	4b28      	ldr	r3, [pc, #160]	@ (8001708 <FLASH_SetErrorCode+0xc4>)
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f003 0320 	and.w	r3, r3, #32
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001672:	4b26      	ldr	r3, [pc, #152]	@ (800170c <FLASH_SetErrorCode+0xc8>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f043 0308 	orr.w	r3, r3, #8
 800167a:	4a24      	ldr	r2, [pc, #144]	@ (800170c <FLASH_SetErrorCode+0xc8>)
 800167c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800167e:	4b22      	ldr	r3, [pc, #136]	@ (8001708 <FLASH_SetErrorCode+0xc4>)
 8001680:	2220      	movs	r2, #32
 8001682:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001684:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <FLASH_SetErrorCode+0xc4>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001690:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <FLASH_SetErrorCode+0xc8>)
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	4a1c      	ldr	r2, [pc, #112]	@ (800170c <FLASH_SetErrorCode+0xc8>)
 800169a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <FLASH_SetErrorCode+0xc4>)
 800169e:	2240      	movs	r2, #64	@ 0x40
 80016a0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80016a2:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <FLASH_SetErrorCode+0xc4>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d008      	beq.n	80016c0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80016ae:	4b17      	ldr	r3, [pc, #92]	@ (800170c <FLASH_SetErrorCode+0xc8>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	4a15      	ldr	r2, [pc, #84]	@ (800170c <FLASH_SetErrorCode+0xc8>)
 80016b8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80016ba:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <FLASH_SetErrorCode+0xc4>)
 80016bc:	2280      	movs	r2, #128	@ 0x80
 80016be:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <FLASH_SetErrorCode+0xc4>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d009      	beq.n	80016e0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <FLASH_SetErrorCode+0xc8>)
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	4a0d      	ldr	r2, [pc, #52]	@ (800170c <FLASH_SetErrorCode+0xc8>)
 80016d6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <FLASH_SetErrorCode+0xc4>)
 80016da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016de:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80016e0:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <FLASH_SetErrorCode+0xc4>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80016ec:	4b07      	ldr	r3, [pc, #28]	@ (800170c <FLASH_SetErrorCode+0xc8>)
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	f043 0320 	orr.w	r3, r3, #32
 80016f4:	4a05      	ldr	r2, [pc, #20]	@ (800170c <FLASH_SetErrorCode+0xc8>)
 80016f6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <FLASH_SetErrorCode+0xc4>)
 80016fa:	2202      	movs	r2, #2
 80016fc:	60da      	str	r2, [r3, #12]
  }
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	40023c00 	.word	0x40023c00
 800170c:	200004e8 	.word	0x200004e8

08001710 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001722:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <HAL_FLASHEx_Erase+0xd8>)
 8001724:	7e1b      	ldrb	r3, [r3, #24]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_FLASHEx_Erase+0x1e>
 800172a:	2302      	movs	r3, #2
 800172c:	e058      	b.n	80017e0 <HAL_FLASHEx_Erase+0xd0>
 800172e:	4b2e      	ldr	r3, [pc, #184]	@ (80017e8 <HAL_FLASHEx_Erase+0xd8>)
 8001730:	2201      	movs	r2, #1
 8001732:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001734:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001738:	f7ff feaa 	bl	8001490 <FLASH_WaitForLastOperation>
 800173c:	4603      	mov	r3, r0
 800173e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d148      	bne.n	80017d8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d115      	bne.n	8001782 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	4619      	mov	r1, r3
 8001762:	4610      	mov	r0, r2
 8001764:	f000 f844 	bl	80017f0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001768:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800176c:	f7ff fe90 	bl	8001490 <FLASH_WaitForLastOperation>
 8001770:	4603      	mov	r3, r0
 8001772:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001774:	4b1d      	ldr	r3, [pc, #116]	@ (80017ec <HAL_FLASHEx_Erase+0xdc>)
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	4a1c      	ldr	r2, [pc, #112]	@ (80017ec <HAL_FLASHEx_Erase+0xdc>)
 800177a:	f023 0304 	bic.w	r3, r3, #4
 800177e:	6113      	str	r3, [r2, #16]
 8001780:	e028      	b.n	80017d4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	e01c      	b.n	80017c4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4619      	mov	r1, r3
 8001792:	68b8      	ldr	r0, [r7, #8]
 8001794:	f000 f850 	bl	8001838 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001798:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800179c:	f7ff fe78 	bl	8001490 <FLASH_WaitForLastOperation>
 80017a0:	4603      	mov	r3, r0
 80017a2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <HAL_FLASHEx_Erase+0xdc>)
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	4a10      	ldr	r2, [pc, #64]	@ (80017ec <HAL_FLASHEx_Erase+0xdc>)
 80017aa:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80017ae:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	601a      	str	r2, [r3, #0]
          break;
 80017bc:	e00a      	b.n	80017d4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	3301      	adds	r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4413      	add	r3, r2
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d3da      	bcc.n	800178a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80017d4:	f000 f878 	bl	80018c8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017d8:	4b03      	ldr	r3, [pc, #12]	@ (80017e8 <HAL_FLASHEx_Erase+0xd8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	761a      	strb	r2, [r3, #24]

  return status;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200004e8 	.word	0x200004e8
 80017ec:	40023c00 	.word	0x40023c00

080017f0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001834 <FLASH_MassErase+0x44>)
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	4a0c      	ldr	r2, [pc, #48]	@ (8001834 <FLASH_MassErase+0x44>)
 8001802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001806:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001808:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <FLASH_MassErase+0x44>)
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	4a09      	ldr	r2, [pc, #36]	@ (8001834 <FLASH_MassErase+0x44>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001814:	4b07      	ldr	r3, [pc, #28]	@ (8001834 <FLASH_MassErase+0x44>)
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	4313      	orrs	r3, r2
 800181e:	4a05      	ldr	r2, [pc, #20]	@ (8001834 <FLASH_MassErase+0x44>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001824:	6113      	str	r3, [r2, #16]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40023c00 	.word	0x40023c00

08001838 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	e010      	b.n	8001876 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d103      	bne.n	8001862 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800185a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e009      	b.n	8001876 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d103      	bne.n	8001870 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001868:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	e002      	b.n	8001876 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001870:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001874:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001876:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <FLASH_Erase_Sector+0x8c>)
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <FLASH_Erase_Sector+0x8c>)
 800187c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001880:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001882:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <FLASH_Erase_Sector+0x8c>)
 8001884:	691a      	ldr	r2, [r3, #16]
 8001886:	490f      	ldr	r1, [pc, #60]	@ (80018c4 <FLASH_Erase_Sector+0x8c>)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800188e:	4b0d      	ldr	r3, [pc, #52]	@ (80018c4 <FLASH_Erase_Sector+0x8c>)
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	4a0c      	ldr	r2, [pc, #48]	@ (80018c4 <FLASH_Erase_Sector+0x8c>)
 8001894:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001898:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800189a:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <FLASH_Erase_Sector+0x8c>)
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4313      	orrs	r3, r2
 80018a4:	4a07      	ldr	r2, [pc, #28]	@ (80018c4 <FLASH_Erase_Sector+0x8c>)
 80018a6:	f043 0302 	orr.w	r3, r3, #2
 80018aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <FLASH_Erase_Sector+0x8c>)
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <FLASH_Erase_Sector+0x8c>)
 80018b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b6:	6113      	str	r3, [r2, #16]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40023c00 	.word	0x40023c00

080018c8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80018cc:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <FLASH_FlushCaches+0x88>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d017      	beq.n	8001908 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80018d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001950 <FLASH_FlushCaches+0x88>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001950 <FLASH_FlushCaches+0x88>)
 80018de:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80018e2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80018e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <FLASH_FlushCaches+0x88>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a19      	ldr	r2, [pc, #100]	@ (8001950 <FLASH_FlushCaches+0x88>)
 80018ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <FLASH_FlushCaches+0x88>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a16      	ldr	r2, [pc, #88]	@ (8001950 <FLASH_FlushCaches+0x88>)
 80018f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80018fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018fc:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <FLASH_FlushCaches+0x88>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a13      	ldr	r2, [pc, #76]	@ (8001950 <FLASH_FlushCaches+0x88>)
 8001902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001906:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <FLASH_FlushCaches+0x88>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001910:	2b00      	cmp	r3, #0
 8001912:	d017      	beq.n	8001944 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001914:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <FLASH_FlushCaches+0x88>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0d      	ldr	r2, [pc, #52]	@ (8001950 <FLASH_FlushCaches+0x88>)
 800191a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800191e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <FLASH_FlushCaches+0x88>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <FLASH_FlushCaches+0x88>)
 8001926:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <FLASH_FlushCaches+0x88>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a07      	ldr	r2, [pc, #28]	@ (8001950 <FLASH_FlushCaches+0x88>)
 8001932:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001936:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <FLASH_FlushCaches+0x88>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a04      	ldr	r2, [pc, #16]	@ (8001950 <FLASH_FlushCaches+0x88>)
 800193e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001942:	6013      	str	r3, [r2, #0]
  }
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00

08001954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	@ 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	e159      	b.n	8001c24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	429a      	cmp	r2, r3
 800198a:	f040 8148 	bne.w	8001c1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d005      	beq.n	80019a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d130      	bne.n	8001a08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019dc:	2201      	movs	r2, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 0201 	and.w	r2, r3, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d017      	beq.n	8001a44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d123      	bne.n	8001a98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	08da      	lsrs	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3208      	adds	r2, #8
 8001a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	220f      	movs	r2, #15
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	08da      	lsrs	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3208      	adds	r2, #8
 8001a92:	69b9      	ldr	r1, [r7, #24]
 8001a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0203 	and.w	r2, r3, #3
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80a2 	beq.w	8001c1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b57      	ldr	r3, [pc, #348]	@ (8001c3c <HAL_GPIO_Init+0x2e8>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	4a56      	ldr	r2, [pc, #344]	@ (8001c3c <HAL_GPIO_Init+0x2e8>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aea:	4b54      	ldr	r3, [pc, #336]	@ (8001c3c <HAL_GPIO_Init+0x2e8>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af6:	4a52      	ldr	r2, [pc, #328]	@ (8001c40 <HAL_GPIO_Init+0x2ec>)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a49      	ldr	r2, [pc, #292]	@ (8001c44 <HAL_GPIO_Init+0x2f0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d019      	beq.n	8001b56 <HAL_GPIO_Init+0x202>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a48      	ldr	r2, [pc, #288]	@ (8001c48 <HAL_GPIO_Init+0x2f4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_GPIO_Init+0x1fe>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a47      	ldr	r2, [pc, #284]	@ (8001c4c <HAL_GPIO_Init+0x2f8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d00d      	beq.n	8001b4e <HAL_GPIO_Init+0x1fa>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a46      	ldr	r2, [pc, #280]	@ (8001c50 <HAL_GPIO_Init+0x2fc>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d007      	beq.n	8001b4a <HAL_GPIO_Init+0x1f6>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a45      	ldr	r2, [pc, #276]	@ (8001c54 <HAL_GPIO_Init+0x300>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d101      	bne.n	8001b46 <HAL_GPIO_Init+0x1f2>
 8001b42:	2304      	movs	r3, #4
 8001b44:	e008      	b.n	8001b58 <HAL_GPIO_Init+0x204>
 8001b46:	2307      	movs	r3, #7
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x204>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e004      	b.n	8001b58 <HAL_GPIO_Init+0x204>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_Init+0x204>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_GPIO_Init+0x204>
 8001b56:	2300      	movs	r3, #0
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	f002 0203 	and.w	r2, r2, #3
 8001b5e:	0092      	lsls	r2, r2, #2
 8001b60:	4093      	lsls	r3, r2
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b68:	4935      	ldr	r1, [pc, #212]	@ (8001c40 <HAL_GPIO_Init+0x2ec>)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b76:	4b38      	ldr	r3, [pc, #224]	@ (8001c58 <HAL_GPIO_Init+0x304>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c58 <HAL_GPIO_Init+0x304>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c58 <HAL_GPIO_Init+0x304>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc4:	4a24      	ldr	r2, [pc, #144]	@ (8001c58 <HAL_GPIO_Init+0x304>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bca:	4b23      	ldr	r3, [pc, #140]	@ (8001c58 <HAL_GPIO_Init+0x304>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bee:	4a1a      	ldr	r2, [pc, #104]	@ (8001c58 <HAL_GPIO_Init+0x304>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf4:	4b18      	ldr	r3, [pc, #96]	@ (8001c58 <HAL_GPIO_Init+0x304>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c18:	4a0f      	ldr	r2, [pc, #60]	@ (8001c58 <HAL_GPIO_Init+0x304>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	f67f aea2 	bls.w	8001970 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3724      	adds	r7, #36	@ 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40013800 	.word	0x40013800
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40013c00 	.word	0x40013c00

08001c5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e0bb      	b.n	8001df0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	f040 80ab 	bne.w	8001dea <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001c94:	4a5c      	ldr	r2, [pc, #368]	@ (8001e08 <HAL_GPIO_DeInit+0x1ac>)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a54      	ldr	r2, [pc, #336]	@ (8001e0c <HAL_GPIO_DeInit+0x1b0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d019      	beq.n	8001cf2 <HAL_GPIO_DeInit+0x96>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a53      	ldr	r2, [pc, #332]	@ (8001e10 <HAL_GPIO_DeInit+0x1b4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_GPIO_DeInit+0x92>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a52      	ldr	r2, [pc, #328]	@ (8001e14 <HAL_GPIO_DeInit+0x1b8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00d      	beq.n	8001cea <HAL_GPIO_DeInit+0x8e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a51      	ldr	r2, [pc, #324]	@ (8001e18 <HAL_GPIO_DeInit+0x1bc>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_DeInit+0x8a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a50      	ldr	r2, [pc, #320]	@ (8001e1c <HAL_GPIO_DeInit+0x1c0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_GPIO_DeInit+0x86>
 8001cde:	2304      	movs	r3, #4
 8001ce0:	e008      	b.n	8001cf4 <HAL_GPIO_DeInit+0x98>
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_DeInit+0x98>
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e004      	b.n	8001cf4 <HAL_GPIO_DeInit+0x98>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e002      	b.n	8001cf4 <HAL_GPIO_DeInit+0x98>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_GPIO_DeInit+0x98>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	f002 0203 	and.w	r2, r2, #3
 8001cfa:	0092      	lsls	r2, r2, #2
 8001cfc:	4093      	lsls	r3, r2
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d132      	bne.n	8001d6a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001d04:	4b46      	ldr	r3, [pc, #280]	@ (8001e20 <HAL_GPIO_DeInit+0x1c4>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	4944      	ldr	r1, [pc, #272]	@ (8001e20 <HAL_GPIO_DeInit+0x1c4>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001d12:	4b43      	ldr	r3, [pc, #268]	@ (8001e20 <HAL_GPIO_DeInit+0x1c4>)
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4941      	ldr	r1, [pc, #260]	@ (8001e20 <HAL_GPIO_DeInit+0x1c4>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001d20:	4b3f      	ldr	r3, [pc, #252]	@ (8001e20 <HAL_GPIO_DeInit+0x1c4>)
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	493d      	ldr	r1, [pc, #244]	@ (8001e20 <HAL_GPIO_DeInit+0x1c4>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e20 <HAL_GPIO_DeInit+0x1c4>)
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	493a      	ldr	r1, [pc, #232]	@ (8001e20 <HAL_GPIO_DeInit+0x1c4>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	220f      	movs	r2, #15
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001d4c:	4a2e      	ldr	r2, [pc, #184]	@ (8001e08 <HAL_GPIO_DeInit+0x1ac>)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	089b      	lsrs	r3, r3, #2
 8001d52:	3302      	adds	r3, #2
 8001d54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	482a      	ldr	r0, [pc, #168]	@ (8001e08 <HAL_GPIO_DeInit+0x1ac>)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	400a      	ands	r2, r1
 8001d64:	3302      	adds	r3, #2
 8001d66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2103      	movs	r1, #3
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	08da      	lsrs	r2, r3, #3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3208      	adds	r2, #8
 8001d88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	08d2      	lsrs	r2, r2, #3
 8001da0:	4019      	ands	r1, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3208      	adds	r2, #8
 8001da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2103      	movs	r1, #3
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	401a      	ands	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	401a      	ands	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	2103      	movs	r1, #3
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	401a      	ands	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	3301      	adds	r3, #1
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	f67f af40 	bls.w	8001c78 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40013800 	.word	0x40013800
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40020400 	.word	0x40020400
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020c00 	.word	0x40020c00
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40013c00 	.word	0x40013c00

08001e24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	887b      	ldrh	r3, [r7, #2]
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	e001      	b.n	8001e46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
 8001e60:	4613      	mov	r3, r2
 8001e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e64:	787b      	ldrb	r3, [r7, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e70:	e003      	b.n	8001e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	041a      	lsls	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	619a      	str	r2, [r3, #24]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e267      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d075      	beq.n	8001f92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea6:	4b88      	ldr	r3, [pc, #544]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d00c      	beq.n	8001ecc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb2:	4b85      	ldr	r3, [pc, #532]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d112      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ebe:	4b82      	ldr	r3, [pc, #520]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ec6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eca:	d10b      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	4b7e      	ldr	r3, [pc, #504]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d05b      	beq.n	8001f90 <HAL_RCC_OscConfig+0x108>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d157      	bne.n	8001f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e242      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eec:	d106      	bne.n	8001efc <HAL_RCC_OscConfig+0x74>
 8001eee:	4b76      	ldr	r3, [pc, #472]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a75      	ldr	r2, [pc, #468]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e01d      	b.n	8001f38 <HAL_RCC_OscConfig+0xb0>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x98>
 8001f06:	4b70      	ldr	r3, [pc, #448]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a6f      	ldr	r2, [pc, #444]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b6d      	ldr	r3, [pc, #436]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a6c      	ldr	r2, [pc, #432]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e00b      	b.n	8001f38 <HAL_RCC_OscConfig+0xb0>
 8001f20:	4b69      	ldr	r3, [pc, #420]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a68      	ldr	r2, [pc, #416]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b66      	ldr	r3, [pc, #408]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a65      	ldr	r2, [pc, #404]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff f800 	bl	8000f44 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f48:	f7fe fffc 	bl	8000f44 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	@ 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e207      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	4b5b      	ldr	r3, [pc, #364]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0xc0>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7fe ffec 	bl	8000f44 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f70:	f7fe ffe8 	bl	8000f44 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	@ 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e1f3      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	4b51      	ldr	r3, [pc, #324]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0xe8>
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d063      	beq.n	8002066 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00b      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001faa:	4b47      	ldr	r3, [pc, #284]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d11c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb6:	4b44      	ldr	r3, [pc, #272]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d116      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	4b41      	ldr	r3, [pc, #260]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_RCC_OscConfig+0x152>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e1c7      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fda:	4b3b      	ldr	r3, [pc, #236]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4937      	ldr	r1, [pc, #220]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fee:	e03a      	b.n	8002066 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff8:	4b34      	ldr	r3, [pc, #208]	@ (80020cc <HAL_RCC_OscConfig+0x244>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7fe ffa1 	bl	8000f44 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002006:	f7fe ff9d 	bl	8000f44 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e1a8      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	4b2b      	ldr	r3, [pc, #172]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002024:	4b28      	ldr	r3, [pc, #160]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4925      	ldr	r1, [pc, #148]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
 8002038:	e015      	b.n	8002066 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203a:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <HAL_RCC_OscConfig+0x244>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7fe ff80 	bl	8000f44 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002048:	f7fe ff7c 	bl	8000f44 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e187      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d036      	beq.n	80020e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d016      	beq.n	80020a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207a:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <HAL_RCC_OscConfig+0x248>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002080:	f7fe ff60 	bl	8000f44 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002088:	f7fe ff5c 	bl	8000f44 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e167      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <HAL_RCC_OscConfig+0x240>)
 800209c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x200>
 80020a6:	e01b      	b.n	80020e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a8:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <HAL_RCC_OscConfig+0x248>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ae:	f7fe ff49 	bl	8000f44 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	e00e      	b.n	80020d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b6:	f7fe ff45 	bl	8000f44 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d907      	bls.n	80020d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e150      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
 80020c8:	40023800 	.word	0x40023800
 80020cc:	42470000 	.word	0x42470000
 80020d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	4b88      	ldr	r3, [pc, #544]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 80020d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1ea      	bne.n	80020b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 8097 	beq.w	800221c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f2:	4b81      	ldr	r3, [pc, #516]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10f      	bne.n	800211e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	4b7d      	ldr	r3, [pc, #500]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	4a7c      	ldr	r2, [pc, #496]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210c:	6413      	str	r3, [r2, #64]	@ 0x40
 800210e:	4b7a      	ldr	r3, [pc, #488]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211a:	2301      	movs	r3, #1
 800211c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211e:	4b77      	ldr	r3, [pc, #476]	@ (80022fc <HAL_RCC_OscConfig+0x474>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d118      	bne.n	800215c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212a:	4b74      	ldr	r3, [pc, #464]	@ (80022fc <HAL_RCC_OscConfig+0x474>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a73      	ldr	r2, [pc, #460]	@ (80022fc <HAL_RCC_OscConfig+0x474>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002136:	f7fe ff05 	bl	8000f44 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213e:	f7fe ff01 	bl	8000f44 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e10c      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	4b6a      	ldr	r3, [pc, #424]	@ (80022fc <HAL_RCC_OscConfig+0x474>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x2ea>
 8002164:	4b64      	ldr	r3, [pc, #400]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002168:	4a63      	ldr	r2, [pc, #396]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002170:	e01c      	b.n	80021ac <HAL_RCC_OscConfig+0x324>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b05      	cmp	r3, #5
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x30c>
 800217a:	4b5f      	ldr	r3, [pc, #380]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800217e:	4a5e      	ldr	r2, [pc, #376]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6713      	str	r3, [r2, #112]	@ 0x70
 8002186:	4b5c      	ldr	r3, [pc, #368]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218a:	4a5b      	ldr	r2, [pc, #364]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6713      	str	r3, [r2, #112]	@ 0x70
 8002192:	e00b      	b.n	80021ac <HAL_RCC_OscConfig+0x324>
 8002194:	4b58      	ldr	r3, [pc, #352]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002198:	4a57      	ldr	r2, [pc, #348]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a0:	4b55      	ldr	r3, [pc, #340]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a4:	4a54      	ldr	r2, [pc, #336]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 80021a6:	f023 0304 	bic.w	r3, r3, #4
 80021aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d015      	beq.n	80021e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7fe fec6 	bl	8000f44 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021bc:	f7fe fec2 	bl	8000f44 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e0cb      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d2:	4b49      	ldr	r3, [pc, #292]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0ee      	beq.n	80021bc <HAL_RCC_OscConfig+0x334>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e0:	f7fe feb0 	bl	8000f44 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e6:	e00a      	b.n	80021fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e8:	f7fe feac 	bl	8000f44 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e0b5      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fe:	4b3e      	ldr	r3, [pc, #248]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1ee      	bne.n	80021e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800220a:	7dfb      	ldrb	r3, [r7, #23]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d105      	bne.n	800221c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002210:	4b39      	ldr	r3, [pc, #228]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	4a38      	ldr	r2, [pc, #224]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800221a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80a1 	beq.w	8002368 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002226:	4b34      	ldr	r3, [pc, #208]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b08      	cmp	r3, #8
 8002230:	d05c      	beq.n	80022ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d141      	bne.n	80022be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223a:	4b31      	ldr	r3, [pc, #196]	@ (8002300 <HAL_RCC_OscConfig+0x478>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe fe80 	bl	8000f44 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002248:	f7fe fe7c 	bl	8000f44 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e087      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225a:	4b27      	ldr	r3, [pc, #156]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	019b      	lsls	r3, r3, #6
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227c:	085b      	lsrs	r3, r3, #1
 800227e:	3b01      	subs	r3, #1
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002288:	061b      	lsls	r3, r3, #24
 800228a:	491b      	ldr	r1, [pc, #108]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002290:	4b1b      	ldr	r3, [pc, #108]	@ (8002300 <HAL_RCC_OscConfig+0x478>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe fe55 	bl	8000f44 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229e:	f7fe fe51 	bl	8000f44 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e05c      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b0:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x416>
 80022bc:	e054      	b.n	8002368 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022be:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <HAL_RCC_OscConfig+0x478>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7fe fe3e 	bl	8000f44 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022cc:	f7fe fe3a 	bl	8000f44 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e045      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <HAL_RCC_OscConfig+0x470>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x444>
 80022ea:	e03d      	b.n	8002368 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e038      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40007000 	.word	0x40007000
 8002300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002304:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <HAL_RCC_OscConfig+0x4ec>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d028      	beq.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d121      	bne.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d11a      	bne.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002334:	4013      	ands	r3, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800233a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800233c:	4293      	cmp	r3, r2
 800233e:	d111      	bne.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234a:	085b      	lsrs	r3, r3, #1
 800234c:	3b01      	subs	r3, #1
 800234e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002350:	429a      	cmp	r2, r3
 8002352:	d107      	bne.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800

08002378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0cc      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800238c:	4b68      	ldr	r3, [pc, #416]	@ (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d90c      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b65      	ldr	r3, [pc, #404]	@ (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b63      	ldr	r3, [pc, #396]	@ (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0b8      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d020      	beq.n	8002402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023cc:	4b59      	ldr	r3, [pc, #356]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4a58      	ldr	r2, [pc, #352]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e4:	4b53      	ldr	r3, [pc, #332]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a52      	ldr	r2, [pc, #328]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f0:	4b50      	ldr	r3, [pc, #320]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	494d      	ldr	r1, [pc, #308]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d044      	beq.n	8002498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	4b47      	ldr	r3, [pc, #284]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d119      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e07f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d003      	beq.n	8002436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002432:	2b03      	cmp	r3, #3
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	4b3f      	ldr	r3, [pc, #252]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e06f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002446:	4b3b      	ldr	r3, [pc, #236]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e067      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002456:	4b37      	ldr	r3, [pc, #220]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f023 0203 	bic.w	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4934      	ldr	r1, [pc, #208]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	4313      	orrs	r3, r2
 8002466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002468:	f7fe fd6c 	bl	8000f44 <HAL_GetTick>
 800246c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	e00a      	b.n	8002486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002470:	f7fe fd68 	bl	8000f44 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e04f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	4b2b      	ldr	r3, [pc, #172]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 020c 	and.w	r2, r3, #12
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	429a      	cmp	r2, r3
 8002496:	d1eb      	bne.n	8002470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002498:	4b25      	ldr	r3, [pc, #148]	@ (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d20c      	bcs.n	80024c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b22      	ldr	r3, [pc, #136]	@ (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b20      	ldr	r3, [pc, #128]	@ (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e032      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024cc:	4b19      	ldr	r3, [pc, #100]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4916      	ldr	r1, [pc, #88]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ea:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	490e      	ldr	r1, [pc, #56]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024fe:	f000 f821 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8002502:	4602      	mov	r2, r0
 8002504:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	490a      	ldr	r1, [pc, #40]	@ (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	5ccb      	ldrb	r3, [r1, r3]
 8002512:	fa22 f303 	lsr.w	r3, r2, r3
 8002516:	4a09      	ldr	r2, [pc, #36]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe fccc 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40023c00 	.word	0x40023c00
 8002534:	40023800 	.word	0x40023800
 8002538:	08004870 	.word	0x08004870
 800253c:	20000000 	.word	0x20000000
 8002540:	20000004 	.word	0x20000004

08002544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002548:	b090      	sub	sp, #64	@ 0x40
 800254a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002550:	2300      	movs	r3, #0
 8002552:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002554:	2300      	movs	r3, #0
 8002556:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800255c:	4b59      	ldr	r3, [pc, #356]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 030c 	and.w	r3, r3, #12
 8002564:	2b08      	cmp	r3, #8
 8002566:	d00d      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x40>
 8002568:	2b08      	cmp	r3, #8
 800256a:	f200 80a1 	bhi.w	80026b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x34>
 8002572:	2b04      	cmp	r3, #4
 8002574:	d003      	beq.n	800257e <HAL_RCC_GetSysClockFreq+0x3a>
 8002576:	e09b      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002578:	4b53      	ldr	r3, [pc, #332]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800257a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800257c:	e09b      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800257e:	4b53      	ldr	r3, [pc, #332]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x188>)
 8002580:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002582:	e098      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002584:	4b4f      	ldr	r3, [pc, #316]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800258c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800258e:	4b4d      	ldr	r3, [pc, #308]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d028      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259a:	4b4a      	ldr	r3, [pc, #296]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	099b      	lsrs	r3, r3, #6
 80025a0:	2200      	movs	r2, #0
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025ac:	2100      	movs	r1, #0
 80025ae:	4b47      	ldr	r3, [pc, #284]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x188>)
 80025b0:	fb03 f201 	mul.w	r2, r3, r1
 80025b4:	2300      	movs	r3, #0
 80025b6:	fb00 f303 	mul.w	r3, r0, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	4a43      	ldr	r2, [pc, #268]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x188>)
 80025be:	fba0 1202 	umull	r1, r2, r0, r2
 80025c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025c4:	460a      	mov	r2, r1
 80025c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80025c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025ca:	4413      	add	r3, r2
 80025cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d0:	2200      	movs	r2, #0
 80025d2:	61bb      	str	r3, [r7, #24]
 80025d4:	61fa      	str	r2, [r7, #28]
 80025d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025de:	f7fd fe4f 	bl	8000280 <__aeabi_uldivmod>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4613      	mov	r3, r2
 80025e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ea:	e053      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ec:	4b35      	ldr	r3, [pc, #212]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	2200      	movs	r2, #0
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	617a      	str	r2, [r7, #20]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025fe:	f04f 0b00 	mov.w	fp, #0
 8002602:	4652      	mov	r2, sl
 8002604:	465b      	mov	r3, fp
 8002606:	f04f 0000 	mov.w	r0, #0
 800260a:	f04f 0100 	mov.w	r1, #0
 800260e:	0159      	lsls	r1, r3, #5
 8002610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002614:	0150      	lsls	r0, r2, #5
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	ebb2 080a 	subs.w	r8, r2, sl
 800261e:	eb63 090b 	sbc.w	r9, r3, fp
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800262e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002632:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002636:	ebb2 0408 	subs.w	r4, r2, r8
 800263a:	eb63 0509 	sbc.w	r5, r3, r9
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	00eb      	lsls	r3, r5, #3
 8002648:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800264c:	00e2      	lsls	r2, r4, #3
 800264e:	4614      	mov	r4, r2
 8002650:	461d      	mov	r5, r3
 8002652:	eb14 030a 	adds.w	r3, r4, sl
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	eb45 030b 	adc.w	r3, r5, fp
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800266a:	4629      	mov	r1, r5
 800266c:	028b      	lsls	r3, r1, #10
 800266e:	4621      	mov	r1, r4
 8002670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002674:	4621      	mov	r1, r4
 8002676:	028a      	lsls	r2, r1, #10
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800267e:	2200      	movs	r2, #0
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	60fa      	str	r2, [r7, #12]
 8002684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002688:	f7fd fdfa 	bl	8000280 <__aeabi_uldivmod>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4613      	mov	r3, r2
 8002692:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002694:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	3301      	adds	r3, #1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80026a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026ae:	e002      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b0:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80026b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3740      	adds	r7, #64	@ 0x40
 80026bc:	46bd      	mov	sp, r7
 80026be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	00f42400 	.word	0x00f42400
 80026cc:	017d7840 	.word	0x017d7840

080026d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d4:	4b03      	ldr	r3, [pc, #12]	@ (80026e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000000 	.word	0x20000000

080026e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026ec:	f7ff fff0 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b05      	ldr	r3, [pc, #20]	@ (8002708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	0a9b      	lsrs	r3, r3, #10
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4903      	ldr	r1, [pc, #12]	@ (800270c <HAL_RCC_GetPCLK1Freq+0x24>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40023800 	.word	0x40023800
 800270c:	08004880 	.word	0x08004880

08002710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002714:	f7ff ffdc 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b05      	ldr	r3, [pc, #20]	@ (8002730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	0b5b      	lsrs	r3, r3, #13
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4903      	ldr	r1, [pc, #12]	@ (8002734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800
 8002734:	08004880 	.word	0x08004880

08002738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e042      	b.n	80027d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe fa1a 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	@ 0x24
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800277a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 fd9b 	bl	80032b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e024      	b.n	8002834 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2224      	movs	r2, #36	@ 0x24
 80027ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002800:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe fa18 	bl	8000c38 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	@ 0x28
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b20      	cmp	r3, #32
 800285a:	d175      	bne.n	8002948 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_UART_Transmit+0x2c>
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e06e      	b.n	800294a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2221      	movs	r2, #33	@ 0x21
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800287a:	f7fe fb63 	bl	8000f44 <HAL_GetTick>
 800287e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	88fa      	ldrh	r2, [r7, #6]
 8002884:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	88fa      	ldrh	r2, [r7, #6]
 800288a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002894:	d108      	bne.n	80028a8 <HAL_UART_Transmit+0x6c>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d104      	bne.n	80028a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	e003      	b.n	80028b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028b0:	e02e      	b.n	8002910 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2200      	movs	r2, #0
 80028ba:	2180      	movs	r1, #128	@ 0x80
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 fb05 	bl	8002ecc <UART_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e03a      	b.n	800294a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10b      	bne.n	80028f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	3302      	adds	r3, #2
 80028ee:	61bb      	str	r3, [r7, #24]
 80028f0:	e007      	b.n	8002902 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	3301      	adds	r3, #1
 8002900:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1cb      	bne.n	80028b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2200      	movs	r2, #0
 8002922:	2140      	movs	r1, #64	@ 0x40
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fad1 	bl	8002ecc <UART_WaitOnFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e006      	b.n	800294a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e000      	b.n	800294a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002948:	2302      	movs	r3, #2
  }
}
 800294a:	4618      	mov	r0, r3
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b0ba      	sub	sp, #232	@ 0xe8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002980:	2300      	movs	r3, #0
 8002982:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10f      	bne.n	80029ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800299a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_UART_IRQHandler+0x66>
 80029a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fbc2 	bl	800313c <UART_Receive_IT>
      return;
 80029b8:	e25b      	b.n	8002e72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 80de 	beq.w	8002b80 <HAL_UART_IRQHandler+0x22c>
 80029c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80d1 	beq.w	8002b80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <HAL_UART_IRQHandler+0xae>
 80029ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0xd2>
 8002a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1e:	f043 0202 	orr.w	r2, r3, #2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <HAL_UART_IRQHandler+0xf6>
 8002a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a42:	f043 0204 	orr.w	r2, r3, #4
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d011      	beq.n	8002a7a <HAL_UART_IRQHandler+0x126>
 8002a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d105      	bne.n	8002a6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	f043 0208 	orr.w	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 81f2 	beq.w	8002e68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_UART_IRQHandler+0x14e>
 8002a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fb4d 	bl	800313c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aac:	2b40      	cmp	r3, #64	@ 0x40
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <HAL_UART_IRQHandler+0x17a>
 8002ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d04f      	beq.n	8002b6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fa55 	bl	8002f7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ade:	2b40      	cmp	r3, #64	@ 0x40
 8002ae0:	d141      	bne.n	8002b66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002af0:	e853 3f00 	ldrex	r3, [r3]
 8002af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002afc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3314      	adds	r3, #20
 8002b0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b1e:	e841 2300 	strex	r3, r2, [r1]
 8002b22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1d9      	bne.n	8002ae2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d013      	beq.n	8002b5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d34 <HAL_UART_IRQHandler+0x3e0>)
 8002b3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe fbfb 	bl	800133e <HAL_DMA_Abort_IT>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d016      	beq.n	8002b7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5c:	e00e      	b.n	8002b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f99e 	bl	8002ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b64:	e00a      	b.n	8002b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f99a 	bl	8002ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b6c:	e006      	b.n	8002b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f996 	bl	8002ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002b7a:	e175      	b.n	8002e68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7c:	bf00      	nop
    return;
 8002b7e:	e173      	b.n	8002e68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	f040 814f 	bne.w	8002e28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8148 	beq.w	8002e28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8141 	beq.w	8002e28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc6:	2b40      	cmp	r3, #64	@ 0x40
 8002bc8:	f040 80b6 	bne.w	8002d38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8145 	beq.w	8002e6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bea:	429a      	cmp	r2, r3
 8002bec:	f080 813e 	bcs.w	8002e6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bf6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c02:	f000 8088 	beq.w	8002d16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	330c      	adds	r3, #12
 8002c0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c14:	e853 3f00 	ldrex	r3, [r3]
 8002c18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002c32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c42:	e841 2300 	strex	r3, r2, [r1]
 8002c46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1d9      	bne.n	8002c06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3314      	adds	r3, #20
 8002c58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c5c:	e853 3f00 	ldrex	r3, [r3]
 8002c60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3314      	adds	r3, #20
 8002c72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c82:	e841 2300 	strex	r3, r2, [r1]
 8002c86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002c88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1e1      	bne.n	8002c52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3314      	adds	r3, #20
 8002c94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c98:	e853 3f00 	ldrex	r3, [r3]
 8002c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002c9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ca0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3314      	adds	r3, #20
 8002cae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002cb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002cb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002cba:	e841 2300 	strex	r3, r2, [r1]
 8002cbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002cc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1e3      	bne.n	8002c8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cde:	e853 3f00 	ldrex	r3, [r3]
 8002ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002ce4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ce6:	f023 0310 	bic.w	r3, r3, #16
 8002cea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	330c      	adds	r3, #12
 8002cf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002cf8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002cfa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002cfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d00:	e841 2300 	strex	r3, r2, [r1]
 8002d04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1e3      	bne.n	8002cd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fe faa4 	bl	800125e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f8c1 	bl	8002eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d32:	e09b      	b.n	8002e6c <HAL_UART_IRQHandler+0x518>
 8002d34:	08003045 	.word	0x08003045
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 808e 	beq.w	8002e70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8089 	beq.w	8002e70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	330c      	adds	r3, #12
 8002d64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d68:	e853 3f00 	ldrex	r3, [r3]
 8002d6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	330c      	adds	r3, #12
 8002d7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002d82:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e3      	bne.n	8002d5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3314      	adds	r3, #20
 8002d9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da0:	e853 3f00 	ldrex	r3, [r3]
 8002da4:	623b      	str	r3, [r7, #32]
   return(result);
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3314      	adds	r3, #20
 8002db6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002dba:	633a      	str	r2, [r7, #48]	@ 0x30
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e3      	bne.n	8002d96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	e853 3f00 	ldrex	r3, [r3]
 8002dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0310 	bic.w	r3, r3, #16
 8002df2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002e00:	61fa      	str	r2, [r7, #28]
 8002e02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e04:	69b9      	ldr	r1, [r7, #24]
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	e841 2300 	strex	r3, r2, [r1]
 8002e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e3      	bne.n	8002ddc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f847 	bl	8002eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e26:	e023      	b.n	8002e70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d009      	beq.n	8002e48 <HAL_UART_IRQHandler+0x4f4>
 8002e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f913 	bl	800306c <UART_Transmit_IT>
    return;
 8002e46:	e014      	b.n	8002e72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00e      	beq.n	8002e72 <HAL_UART_IRQHandler+0x51e>
 8002e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f953 	bl	800310c <UART_EndTransmit_IT>
    return;
 8002e66:	e004      	b.n	8002e72 <HAL_UART_IRQHandler+0x51e>
    return;
 8002e68:	bf00      	nop
 8002e6a:	e002      	b.n	8002e72 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e6c:	bf00      	nop
 8002e6e:	e000      	b.n	8002e72 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e70:	bf00      	nop
  }
}
 8002e72:	37e8      	adds	r7, #232	@ 0xe8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002edc:	e03b      	b.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d037      	beq.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee6:	f7fe f82d 	bl	8000f44 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	6a3a      	ldr	r2, [r7, #32]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d302      	bcc.n	8002efc <UART_WaitOnFlagUntilTimeout+0x30>
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e03a      	b.n	8002f76 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d023      	beq.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b80      	cmp	r3, #128	@ 0x80
 8002f12:	d020      	beq.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b40      	cmp	r3, #64	@ 0x40
 8002f18:	d01d      	beq.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d116      	bne.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f81d 	bl	8002f7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2208      	movs	r2, #8
 8002f48:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00f      	b.n	8002f76 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d0b4      	beq.n	8002ede <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b095      	sub	sp, #84	@ 0x54
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	330c      	adds	r3, #12
 8002f8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fa6:	643a      	str	r2, [r7, #64]	@ 0x40
 8002fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002faa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e5      	bne.n	8002f86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3314      	adds	r3, #20
 8002fc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	e853 3f00 	ldrex	r3, [r3]
 8002fc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3314      	adds	r3, #20
 8002fd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fe2:	e841 2300 	strex	r3, r2, [r1]
 8002fe6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1e5      	bne.n	8002fba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d119      	bne.n	800302a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	330c      	adds	r3, #12
 8002ffc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	e853 3f00 	ldrex	r3, [r3]
 8003004:	60bb      	str	r3, [r7, #8]
   return(result);
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f023 0310 	bic.w	r3, r3, #16
 800300c:	647b      	str	r3, [r7, #68]	@ 0x44
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	330c      	adds	r3, #12
 8003014:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003016:	61ba      	str	r2, [r7, #24]
 8003018:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301a:	6979      	ldr	r1, [r7, #20]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	613b      	str	r3, [r7, #16]
   return(result);
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e5      	bne.n	8002ff6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003038:	bf00      	nop
 800303a:	3754      	adds	r7, #84	@ 0x54
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003050:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f7ff ff1e 	bl	8002ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003064:	bf00      	nop
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b21      	cmp	r3, #33	@ 0x21
 800307e:	d13e      	bne.n	80030fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003088:	d114      	bne.n	80030b4 <UART_Transmit_IT+0x48>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d110      	bne.n	80030b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	1c9a      	adds	r2, r3, #2
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	621a      	str	r2, [r3, #32]
 80030b2:	e008      	b.n	80030c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	1c59      	adds	r1, r3, #1
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6211      	str	r1, [r2, #32]
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	4619      	mov	r1, r3
 80030d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10f      	bne.n	80030fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003122:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff fea3 	bl	8002e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08c      	sub	sp, #48	@ 0x30
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b22      	cmp	r3, #34	@ 0x22
 800314e:	f040 80ae 	bne.w	80032ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800315a:	d117      	bne.n	800318c <UART_Receive_IT+0x50>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d113      	bne.n	800318c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003164:	2300      	movs	r3, #0
 8003166:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	b29b      	uxth	r3, r3
 8003176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317a:	b29a      	uxth	r2, r3
 800317c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003184:	1c9a      	adds	r2, r3, #2
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	629a      	str	r2, [r3, #40]	@ 0x28
 800318a:	e026      	b.n	80031da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003190:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003192:	2300      	movs	r3, #0
 8003194:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800319e:	d007      	beq.n	80031b0 <UART_Receive_IT+0x74>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10a      	bne.n	80031be <UART_Receive_IT+0x82>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d106      	bne.n	80031be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ba:	701a      	strb	r2, [r3, #0]
 80031bc:	e008      	b.n	80031d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4619      	mov	r1, r3
 80031e8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d15d      	bne.n	80032aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0220 	bic.w	r2, r2, #32
 80031fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800320c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003230:	2b01      	cmp	r3, #1
 8003232:	d135      	bne.n	80032a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	613b      	str	r3, [r7, #16]
   return(result);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f023 0310 	bic.w	r3, r3, #16
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	330c      	adds	r3, #12
 8003258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800325a:	623a      	str	r2, [r7, #32]
 800325c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	69f9      	ldr	r1, [r7, #28]
 8003260:	6a3a      	ldr	r2, [r7, #32]
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	61bb      	str	r3, [r7, #24]
   return(result);
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e5      	bne.n	800323a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b10      	cmp	r3, #16
 800327a:	d10a      	bne.n	8003292 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003296:	4619      	mov	r1, r3
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff fe0b 	bl	8002eb4 <HAL_UARTEx_RxEventCallback>
 800329e:	e002      	b.n	80032a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff fdf3 	bl	8002e8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	e002      	b.n	80032b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e000      	b.n	80032b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
  }
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3730      	adds	r7, #48	@ 0x30
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032bc:	b0c0      	sub	sp, #256	@ 0x100
 80032be:	af00      	add	r7, sp, #0
 80032c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d4:	68d9      	ldr	r1, [r3, #12]
 80032d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	ea40 0301 	orr.w	r3, r0, r1
 80032e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003310:	f021 010c 	bic.w	r1, r1, #12
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800331e:	430b      	orrs	r3, r1
 8003320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003332:	6999      	ldr	r1, [r3, #24]
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	ea40 0301 	orr.w	r3, r0, r1
 800333e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	4b8f      	ldr	r3, [pc, #572]	@ (8003584 <UART_SetConfig+0x2cc>)
 8003348:	429a      	cmp	r2, r3
 800334a:	d005      	beq.n	8003358 <UART_SetConfig+0xa0>
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4b8d      	ldr	r3, [pc, #564]	@ (8003588 <UART_SetConfig+0x2d0>)
 8003354:	429a      	cmp	r2, r3
 8003356:	d104      	bne.n	8003362 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003358:	f7ff f9da 	bl	8002710 <HAL_RCC_GetPCLK2Freq>
 800335c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003360:	e003      	b.n	800336a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003362:	f7ff f9c1 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 8003366:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800336a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003374:	f040 810c 	bne.w	8003590 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800337c:	2200      	movs	r2, #0
 800337e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003382:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003386:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800338a:	4622      	mov	r2, r4
 800338c:	462b      	mov	r3, r5
 800338e:	1891      	adds	r1, r2, r2
 8003390:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003392:	415b      	adcs	r3, r3
 8003394:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003396:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800339a:	4621      	mov	r1, r4
 800339c:	eb12 0801 	adds.w	r8, r2, r1
 80033a0:	4629      	mov	r1, r5
 80033a2:	eb43 0901 	adc.w	r9, r3, r1
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ba:	4690      	mov	r8, r2
 80033bc:	4699      	mov	r9, r3
 80033be:	4623      	mov	r3, r4
 80033c0:	eb18 0303 	adds.w	r3, r8, r3
 80033c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033c8:	462b      	mov	r3, r5
 80033ca:	eb49 0303 	adc.w	r3, r9, r3
 80033ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80033d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80033e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033e6:	460b      	mov	r3, r1
 80033e8:	18db      	adds	r3, r3, r3
 80033ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80033ec:	4613      	mov	r3, r2
 80033ee:	eb42 0303 	adc.w	r3, r2, r3
 80033f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80033f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80033f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80033fc:	f7fc ff40 	bl	8000280 <__aeabi_uldivmod>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4b61      	ldr	r3, [pc, #388]	@ (800358c <UART_SetConfig+0x2d4>)
 8003406:	fba3 2302 	umull	r2, r3, r3, r2
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	011c      	lsls	r4, r3, #4
 800340e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003412:	2200      	movs	r2, #0
 8003414:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003418:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800341c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003420:	4642      	mov	r2, r8
 8003422:	464b      	mov	r3, r9
 8003424:	1891      	adds	r1, r2, r2
 8003426:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003428:	415b      	adcs	r3, r3
 800342a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800342c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003430:	4641      	mov	r1, r8
 8003432:	eb12 0a01 	adds.w	sl, r2, r1
 8003436:	4649      	mov	r1, r9
 8003438:	eb43 0b01 	adc.w	fp, r3, r1
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003448:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800344c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003450:	4692      	mov	sl, r2
 8003452:	469b      	mov	fp, r3
 8003454:	4643      	mov	r3, r8
 8003456:	eb1a 0303 	adds.w	r3, sl, r3
 800345a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800345e:	464b      	mov	r3, r9
 8003460:	eb4b 0303 	adc.w	r3, fp, r3
 8003464:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003474:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003478:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800347c:	460b      	mov	r3, r1
 800347e:	18db      	adds	r3, r3, r3
 8003480:	643b      	str	r3, [r7, #64]	@ 0x40
 8003482:	4613      	mov	r3, r2
 8003484:	eb42 0303 	adc.w	r3, r2, r3
 8003488:	647b      	str	r3, [r7, #68]	@ 0x44
 800348a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800348e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003492:	f7fc fef5 	bl	8000280 <__aeabi_uldivmod>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4611      	mov	r1, r2
 800349c:	4b3b      	ldr	r3, [pc, #236]	@ (800358c <UART_SetConfig+0x2d4>)
 800349e:	fba3 2301 	umull	r2, r3, r3, r1
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2264      	movs	r2, #100	@ 0x64
 80034a6:	fb02 f303 	mul.w	r3, r2, r3
 80034aa:	1acb      	subs	r3, r1, r3
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80034b2:	4b36      	ldr	r3, [pc, #216]	@ (800358c <UART_SetConfig+0x2d4>)
 80034b4:	fba3 2302 	umull	r2, r3, r3, r2
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80034c0:	441c      	add	r4, r3
 80034c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80034d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80034d4:	4642      	mov	r2, r8
 80034d6:	464b      	mov	r3, r9
 80034d8:	1891      	adds	r1, r2, r2
 80034da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034dc:	415b      	adcs	r3, r3
 80034de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80034e4:	4641      	mov	r1, r8
 80034e6:	1851      	adds	r1, r2, r1
 80034e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80034ea:	4649      	mov	r1, r9
 80034ec:	414b      	adcs	r3, r1
 80034ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80034fc:	4659      	mov	r1, fp
 80034fe:	00cb      	lsls	r3, r1, #3
 8003500:	4651      	mov	r1, sl
 8003502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003506:	4651      	mov	r1, sl
 8003508:	00ca      	lsls	r2, r1, #3
 800350a:	4610      	mov	r0, r2
 800350c:	4619      	mov	r1, r3
 800350e:	4603      	mov	r3, r0
 8003510:	4642      	mov	r2, r8
 8003512:	189b      	adds	r3, r3, r2
 8003514:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003518:	464b      	mov	r3, r9
 800351a:	460a      	mov	r2, r1
 800351c:	eb42 0303 	adc.w	r3, r2, r3
 8003520:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003530:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003534:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003538:	460b      	mov	r3, r1
 800353a:	18db      	adds	r3, r3, r3
 800353c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800353e:	4613      	mov	r3, r2
 8003540:	eb42 0303 	adc.w	r3, r2, r3
 8003544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003546:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800354a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800354e:	f7fc fe97 	bl	8000280 <__aeabi_uldivmod>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4b0d      	ldr	r3, [pc, #52]	@ (800358c <UART_SetConfig+0x2d4>)
 8003558:	fba3 1302 	umull	r1, r3, r3, r2
 800355c:	095b      	lsrs	r3, r3, #5
 800355e:	2164      	movs	r1, #100	@ 0x64
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	3332      	adds	r3, #50	@ 0x32
 800356a:	4a08      	ldr	r2, [pc, #32]	@ (800358c <UART_SetConfig+0x2d4>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	f003 0207 	and.w	r2, r3, #7
 8003576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4422      	add	r2, r4
 800357e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003580:	e106      	b.n	8003790 <UART_SetConfig+0x4d8>
 8003582:	bf00      	nop
 8003584:	40011000 	.word	0x40011000
 8003588:	40011400 	.word	0x40011400
 800358c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003594:	2200      	movs	r2, #0
 8003596:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800359a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800359e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80035a2:	4642      	mov	r2, r8
 80035a4:	464b      	mov	r3, r9
 80035a6:	1891      	adds	r1, r2, r2
 80035a8:	6239      	str	r1, [r7, #32]
 80035aa:	415b      	adcs	r3, r3
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035b2:	4641      	mov	r1, r8
 80035b4:	1854      	adds	r4, r2, r1
 80035b6:	4649      	mov	r1, r9
 80035b8:	eb43 0501 	adc.w	r5, r3, r1
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	00eb      	lsls	r3, r5, #3
 80035c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ca:	00e2      	lsls	r2, r4, #3
 80035cc:	4614      	mov	r4, r2
 80035ce:	461d      	mov	r5, r3
 80035d0:	4643      	mov	r3, r8
 80035d2:	18e3      	adds	r3, r4, r3
 80035d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035d8:	464b      	mov	r3, r9
 80035da:	eb45 0303 	adc.w	r3, r5, r3
 80035de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80035e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035fe:	4629      	mov	r1, r5
 8003600:	008b      	lsls	r3, r1, #2
 8003602:	4621      	mov	r1, r4
 8003604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003608:	4621      	mov	r1, r4
 800360a:	008a      	lsls	r2, r1, #2
 800360c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003610:	f7fc fe36 	bl	8000280 <__aeabi_uldivmod>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4b60      	ldr	r3, [pc, #384]	@ (800379c <UART_SetConfig+0x4e4>)
 800361a:	fba3 2302 	umull	r2, r3, r3, r2
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	011c      	lsls	r4, r3, #4
 8003622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003626:	2200      	movs	r2, #0
 8003628:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800362c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003630:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003634:	4642      	mov	r2, r8
 8003636:	464b      	mov	r3, r9
 8003638:	1891      	adds	r1, r2, r2
 800363a:	61b9      	str	r1, [r7, #24]
 800363c:	415b      	adcs	r3, r3
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003644:	4641      	mov	r1, r8
 8003646:	1851      	adds	r1, r2, r1
 8003648:	6139      	str	r1, [r7, #16]
 800364a:	4649      	mov	r1, r9
 800364c:	414b      	adcs	r3, r1
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800365c:	4659      	mov	r1, fp
 800365e:	00cb      	lsls	r3, r1, #3
 8003660:	4651      	mov	r1, sl
 8003662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003666:	4651      	mov	r1, sl
 8003668:	00ca      	lsls	r2, r1, #3
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	4603      	mov	r3, r0
 8003670:	4642      	mov	r2, r8
 8003672:	189b      	adds	r3, r3, r2
 8003674:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003678:	464b      	mov	r3, r9
 800367a:	460a      	mov	r2, r1
 800367c:	eb42 0303 	adc.w	r3, r2, r3
 8003680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800368e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800369c:	4649      	mov	r1, r9
 800369e:	008b      	lsls	r3, r1, #2
 80036a0:	4641      	mov	r1, r8
 80036a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036a6:	4641      	mov	r1, r8
 80036a8:	008a      	lsls	r2, r1, #2
 80036aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80036ae:	f7fc fde7 	bl	8000280 <__aeabi_uldivmod>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4611      	mov	r1, r2
 80036b8:	4b38      	ldr	r3, [pc, #224]	@ (800379c <UART_SetConfig+0x4e4>)
 80036ba:	fba3 2301 	umull	r2, r3, r3, r1
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	2264      	movs	r2, #100	@ 0x64
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	1acb      	subs	r3, r1, r3
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	3332      	adds	r3, #50	@ 0x32
 80036cc:	4a33      	ldr	r2, [pc, #204]	@ (800379c <UART_SetConfig+0x4e4>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036d8:	441c      	add	r4, r3
 80036da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036de:	2200      	movs	r2, #0
 80036e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80036e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80036e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80036e8:	4642      	mov	r2, r8
 80036ea:	464b      	mov	r3, r9
 80036ec:	1891      	adds	r1, r2, r2
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	415b      	adcs	r3, r3
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036f8:	4641      	mov	r1, r8
 80036fa:	1851      	adds	r1, r2, r1
 80036fc:	6039      	str	r1, [r7, #0]
 80036fe:	4649      	mov	r1, r9
 8003700:	414b      	adcs	r3, r1
 8003702:	607b      	str	r3, [r7, #4]
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003710:	4659      	mov	r1, fp
 8003712:	00cb      	lsls	r3, r1, #3
 8003714:	4651      	mov	r1, sl
 8003716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800371a:	4651      	mov	r1, sl
 800371c:	00ca      	lsls	r2, r1, #3
 800371e:	4610      	mov	r0, r2
 8003720:	4619      	mov	r1, r3
 8003722:	4603      	mov	r3, r0
 8003724:	4642      	mov	r2, r8
 8003726:	189b      	adds	r3, r3, r2
 8003728:	66bb      	str	r3, [r7, #104]	@ 0x68
 800372a:	464b      	mov	r3, r9
 800372c:	460a      	mov	r2, r1
 800372e:	eb42 0303 	adc.w	r3, r2, r3
 8003732:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	663b      	str	r3, [r7, #96]	@ 0x60
 800373e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800374c:	4649      	mov	r1, r9
 800374e:	008b      	lsls	r3, r1, #2
 8003750:	4641      	mov	r1, r8
 8003752:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003756:	4641      	mov	r1, r8
 8003758:	008a      	lsls	r2, r1, #2
 800375a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800375e:	f7fc fd8f 	bl	8000280 <__aeabi_uldivmod>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <UART_SetConfig+0x4e4>)
 8003768:	fba3 1302 	umull	r1, r3, r3, r2
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	2164      	movs	r1, #100	@ 0x64
 8003770:	fb01 f303 	mul.w	r3, r1, r3
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	3332      	adds	r3, #50	@ 0x32
 800377a:	4a08      	ldr	r2, [pc, #32]	@ (800379c <UART_SetConfig+0x4e4>)
 800377c:	fba2 2303 	umull	r2, r3, r2, r3
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	f003 020f 	and.w	r2, r3, #15
 8003786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4422      	add	r2, r4
 800378e:	609a      	str	r2, [r3, #8]
}
 8003790:	bf00      	nop
 8003792:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003796:	46bd      	mov	sp, r7
 8003798:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800379c:	51eb851f 	.word	0x51eb851f

080037a0 <std>:
 80037a0:	2300      	movs	r3, #0
 80037a2:	b510      	push	{r4, lr}
 80037a4:	4604      	mov	r4, r0
 80037a6:	e9c0 3300 	strd	r3, r3, [r0]
 80037aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037ae:	6083      	str	r3, [r0, #8]
 80037b0:	8181      	strh	r1, [r0, #12]
 80037b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80037b4:	81c2      	strh	r2, [r0, #14]
 80037b6:	6183      	str	r3, [r0, #24]
 80037b8:	4619      	mov	r1, r3
 80037ba:	2208      	movs	r2, #8
 80037bc:	305c      	adds	r0, #92	@ 0x5c
 80037be:	f000 f9f9 	bl	8003bb4 <memset>
 80037c2:	4b0d      	ldr	r3, [pc, #52]	@ (80037f8 <std+0x58>)
 80037c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80037c6:	4b0d      	ldr	r3, [pc, #52]	@ (80037fc <std+0x5c>)
 80037c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80037ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003800 <std+0x60>)
 80037cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80037ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003804 <std+0x64>)
 80037d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80037d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003808 <std+0x68>)
 80037d4:	6224      	str	r4, [r4, #32]
 80037d6:	429c      	cmp	r4, r3
 80037d8:	d006      	beq.n	80037e8 <std+0x48>
 80037da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80037de:	4294      	cmp	r4, r2
 80037e0:	d002      	beq.n	80037e8 <std+0x48>
 80037e2:	33d0      	adds	r3, #208	@ 0xd0
 80037e4:	429c      	cmp	r4, r3
 80037e6:	d105      	bne.n	80037f4 <std+0x54>
 80037e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80037ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037f0:	f000 ba58 	b.w	8003ca4 <__retarget_lock_init_recursive>
 80037f4:	bd10      	pop	{r4, pc}
 80037f6:	bf00      	nop
 80037f8:	08003a05 	.word	0x08003a05
 80037fc:	08003a27 	.word	0x08003a27
 8003800:	08003a5f 	.word	0x08003a5f
 8003804:	08003a83 	.word	0x08003a83
 8003808:	20000508 	.word	0x20000508

0800380c <stdio_exit_handler>:
 800380c:	4a02      	ldr	r2, [pc, #8]	@ (8003818 <stdio_exit_handler+0xc>)
 800380e:	4903      	ldr	r1, [pc, #12]	@ (800381c <stdio_exit_handler+0x10>)
 8003810:	4803      	ldr	r0, [pc, #12]	@ (8003820 <stdio_exit_handler+0x14>)
 8003812:	f000 b869 	b.w	80038e8 <_fwalk_sglue>
 8003816:	bf00      	nop
 8003818:	2000000c 	.word	0x2000000c
 800381c:	08004545 	.word	0x08004545
 8003820:	2000001c 	.word	0x2000001c

08003824 <cleanup_stdio>:
 8003824:	6841      	ldr	r1, [r0, #4]
 8003826:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <cleanup_stdio+0x34>)
 8003828:	4299      	cmp	r1, r3
 800382a:	b510      	push	{r4, lr}
 800382c:	4604      	mov	r4, r0
 800382e:	d001      	beq.n	8003834 <cleanup_stdio+0x10>
 8003830:	f000 fe88 	bl	8004544 <_fflush_r>
 8003834:	68a1      	ldr	r1, [r4, #8]
 8003836:	4b09      	ldr	r3, [pc, #36]	@ (800385c <cleanup_stdio+0x38>)
 8003838:	4299      	cmp	r1, r3
 800383a:	d002      	beq.n	8003842 <cleanup_stdio+0x1e>
 800383c:	4620      	mov	r0, r4
 800383e:	f000 fe81 	bl	8004544 <_fflush_r>
 8003842:	68e1      	ldr	r1, [r4, #12]
 8003844:	4b06      	ldr	r3, [pc, #24]	@ (8003860 <cleanup_stdio+0x3c>)
 8003846:	4299      	cmp	r1, r3
 8003848:	d004      	beq.n	8003854 <cleanup_stdio+0x30>
 800384a:	4620      	mov	r0, r4
 800384c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003850:	f000 be78 	b.w	8004544 <_fflush_r>
 8003854:	bd10      	pop	{r4, pc}
 8003856:	bf00      	nop
 8003858:	20000508 	.word	0x20000508
 800385c:	20000570 	.word	0x20000570
 8003860:	200005d8 	.word	0x200005d8

08003864 <global_stdio_init.part.0>:
 8003864:	b510      	push	{r4, lr}
 8003866:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <global_stdio_init.part.0+0x30>)
 8003868:	4c0b      	ldr	r4, [pc, #44]	@ (8003898 <global_stdio_init.part.0+0x34>)
 800386a:	4a0c      	ldr	r2, [pc, #48]	@ (800389c <global_stdio_init.part.0+0x38>)
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	4620      	mov	r0, r4
 8003870:	2200      	movs	r2, #0
 8003872:	2104      	movs	r1, #4
 8003874:	f7ff ff94 	bl	80037a0 <std>
 8003878:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800387c:	2201      	movs	r2, #1
 800387e:	2109      	movs	r1, #9
 8003880:	f7ff ff8e 	bl	80037a0 <std>
 8003884:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003888:	2202      	movs	r2, #2
 800388a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800388e:	2112      	movs	r1, #18
 8003890:	f7ff bf86 	b.w	80037a0 <std>
 8003894:	20000640 	.word	0x20000640
 8003898:	20000508 	.word	0x20000508
 800389c:	0800380d 	.word	0x0800380d

080038a0 <__sfp_lock_acquire>:
 80038a0:	4801      	ldr	r0, [pc, #4]	@ (80038a8 <__sfp_lock_acquire+0x8>)
 80038a2:	f000 ba00 	b.w	8003ca6 <__retarget_lock_acquire_recursive>
 80038a6:	bf00      	nop
 80038a8:	20000649 	.word	0x20000649

080038ac <__sfp_lock_release>:
 80038ac:	4801      	ldr	r0, [pc, #4]	@ (80038b4 <__sfp_lock_release+0x8>)
 80038ae:	f000 b9fb 	b.w	8003ca8 <__retarget_lock_release_recursive>
 80038b2:	bf00      	nop
 80038b4:	20000649 	.word	0x20000649

080038b8 <__sinit>:
 80038b8:	b510      	push	{r4, lr}
 80038ba:	4604      	mov	r4, r0
 80038bc:	f7ff fff0 	bl	80038a0 <__sfp_lock_acquire>
 80038c0:	6a23      	ldr	r3, [r4, #32]
 80038c2:	b11b      	cbz	r3, 80038cc <__sinit+0x14>
 80038c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038c8:	f7ff bff0 	b.w	80038ac <__sfp_lock_release>
 80038cc:	4b04      	ldr	r3, [pc, #16]	@ (80038e0 <__sinit+0x28>)
 80038ce:	6223      	str	r3, [r4, #32]
 80038d0:	4b04      	ldr	r3, [pc, #16]	@ (80038e4 <__sinit+0x2c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f5      	bne.n	80038c4 <__sinit+0xc>
 80038d8:	f7ff ffc4 	bl	8003864 <global_stdio_init.part.0>
 80038dc:	e7f2      	b.n	80038c4 <__sinit+0xc>
 80038de:	bf00      	nop
 80038e0:	08003825 	.word	0x08003825
 80038e4:	20000640 	.word	0x20000640

080038e8 <_fwalk_sglue>:
 80038e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038ec:	4607      	mov	r7, r0
 80038ee:	4688      	mov	r8, r1
 80038f0:	4614      	mov	r4, r2
 80038f2:	2600      	movs	r6, #0
 80038f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038f8:	f1b9 0901 	subs.w	r9, r9, #1
 80038fc:	d505      	bpl.n	800390a <_fwalk_sglue+0x22>
 80038fe:	6824      	ldr	r4, [r4, #0]
 8003900:	2c00      	cmp	r4, #0
 8003902:	d1f7      	bne.n	80038f4 <_fwalk_sglue+0xc>
 8003904:	4630      	mov	r0, r6
 8003906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800390a:	89ab      	ldrh	r3, [r5, #12]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d907      	bls.n	8003920 <_fwalk_sglue+0x38>
 8003910:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003914:	3301      	adds	r3, #1
 8003916:	d003      	beq.n	8003920 <_fwalk_sglue+0x38>
 8003918:	4629      	mov	r1, r5
 800391a:	4638      	mov	r0, r7
 800391c:	47c0      	blx	r8
 800391e:	4306      	orrs	r6, r0
 8003920:	3568      	adds	r5, #104	@ 0x68
 8003922:	e7e9      	b.n	80038f8 <_fwalk_sglue+0x10>

08003924 <iprintf>:
 8003924:	b40f      	push	{r0, r1, r2, r3}
 8003926:	b507      	push	{r0, r1, r2, lr}
 8003928:	4906      	ldr	r1, [pc, #24]	@ (8003944 <iprintf+0x20>)
 800392a:	ab04      	add	r3, sp, #16
 800392c:	6808      	ldr	r0, [r1, #0]
 800392e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003932:	6881      	ldr	r1, [r0, #8]
 8003934:	9301      	str	r3, [sp, #4]
 8003936:	f000 fadb 	bl	8003ef0 <_vfiprintf_r>
 800393a:	b003      	add	sp, #12
 800393c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003940:	b004      	add	sp, #16
 8003942:	4770      	bx	lr
 8003944:	20000018 	.word	0x20000018

08003948 <_puts_r>:
 8003948:	6a03      	ldr	r3, [r0, #32]
 800394a:	b570      	push	{r4, r5, r6, lr}
 800394c:	6884      	ldr	r4, [r0, #8]
 800394e:	4605      	mov	r5, r0
 8003950:	460e      	mov	r6, r1
 8003952:	b90b      	cbnz	r3, 8003958 <_puts_r+0x10>
 8003954:	f7ff ffb0 	bl	80038b8 <__sinit>
 8003958:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800395a:	07db      	lsls	r3, r3, #31
 800395c:	d405      	bmi.n	800396a <_puts_r+0x22>
 800395e:	89a3      	ldrh	r3, [r4, #12]
 8003960:	0598      	lsls	r0, r3, #22
 8003962:	d402      	bmi.n	800396a <_puts_r+0x22>
 8003964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003966:	f000 f99e 	bl	8003ca6 <__retarget_lock_acquire_recursive>
 800396a:	89a3      	ldrh	r3, [r4, #12]
 800396c:	0719      	lsls	r1, r3, #28
 800396e:	d502      	bpl.n	8003976 <_puts_r+0x2e>
 8003970:	6923      	ldr	r3, [r4, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d135      	bne.n	80039e2 <_puts_r+0x9a>
 8003976:	4621      	mov	r1, r4
 8003978:	4628      	mov	r0, r5
 800397a:	f000 f8c5 	bl	8003b08 <__swsetup_r>
 800397e:	b380      	cbz	r0, 80039e2 <_puts_r+0x9a>
 8003980:	f04f 35ff 	mov.w	r5, #4294967295
 8003984:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003986:	07da      	lsls	r2, r3, #31
 8003988:	d405      	bmi.n	8003996 <_puts_r+0x4e>
 800398a:	89a3      	ldrh	r3, [r4, #12]
 800398c:	059b      	lsls	r3, r3, #22
 800398e:	d402      	bmi.n	8003996 <_puts_r+0x4e>
 8003990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003992:	f000 f989 	bl	8003ca8 <__retarget_lock_release_recursive>
 8003996:	4628      	mov	r0, r5
 8003998:	bd70      	pop	{r4, r5, r6, pc}
 800399a:	2b00      	cmp	r3, #0
 800399c:	da04      	bge.n	80039a8 <_puts_r+0x60>
 800399e:	69a2      	ldr	r2, [r4, #24]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	dc17      	bgt.n	80039d4 <_puts_r+0x8c>
 80039a4:	290a      	cmp	r1, #10
 80039a6:	d015      	beq.n	80039d4 <_puts_r+0x8c>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	6022      	str	r2, [r4, #0]
 80039ae:	7019      	strb	r1, [r3, #0]
 80039b0:	68a3      	ldr	r3, [r4, #8]
 80039b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80039b6:	3b01      	subs	r3, #1
 80039b8:	60a3      	str	r3, [r4, #8]
 80039ba:	2900      	cmp	r1, #0
 80039bc:	d1ed      	bne.n	800399a <_puts_r+0x52>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	da11      	bge.n	80039e6 <_puts_r+0x9e>
 80039c2:	4622      	mov	r2, r4
 80039c4:	210a      	movs	r1, #10
 80039c6:	4628      	mov	r0, r5
 80039c8:	f000 f85f 	bl	8003a8a <__swbuf_r>
 80039cc:	3001      	adds	r0, #1
 80039ce:	d0d7      	beq.n	8003980 <_puts_r+0x38>
 80039d0:	250a      	movs	r5, #10
 80039d2:	e7d7      	b.n	8003984 <_puts_r+0x3c>
 80039d4:	4622      	mov	r2, r4
 80039d6:	4628      	mov	r0, r5
 80039d8:	f000 f857 	bl	8003a8a <__swbuf_r>
 80039dc:	3001      	adds	r0, #1
 80039de:	d1e7      	bne.n	80039b0 <_puts_r+0x68>
 80039e0:	e7ce      	b.n	8003980 <_puts_r+0x38>
 80039e2:	3e01      	subs	r6, #1
 80039e4:	e7e4      	b.n	80039b0 <_puts_r+0x68>
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	6022      	str	r2, [r4, #0]
 80039ec:	220a      	movs	r2, #10
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	e7ee      	b.n	80039d0 <_puts_r+0x88>
	...

080039f4 <puts>:
 80039f4:	4b02      	ldr	r3, [pc, #8]	@ (8003a00 <puts+0xc>)
 80039f6:	4601      	mov	r1, r0
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	f7ff bfa5 	b.w	8003948 <_puts_r>
 80039fe:	bf00      	nop
 8003a00:	20000018 	.word	0x20000018

08003a04 <__sread>:
 8003a04:	b510      	push	{r4, lr}
 8003a06:	460c      	mov	r4, r1
 8003a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a0c:	f000 f8fc 	bl	8003c08 <_read_r>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	bfab      	itete	ge
 8003a14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a16:	89a3      	ldrhlt	r3, [r4, #12]
 8003a18:	181b      	addge	r3, r3, r0
 8003a1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a1e:	bfac      	ite	ge
 8003a20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a22:	81a3      	strhlt	r3, [r4, #12]
 8003a24:	bd10      	pop	{r4, pc}

08003a26 <__swrite>:
 8003a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a2a:	461f      	mov	r7, r3
 8003a2c:	898b      	ldrh	r3, [r1, #12]
 8003a2e:	05db      	lsls	r3, r3, #23
 8003a30:	4605      	mov	r5, r0
 8003a32:	460c      	mov	r4, r1
 8003a34:	4616      	mov	r6, r2
 8003a36:	d505      	bpl.n	8003a44 <__swrite+0x1e>
 8003a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f000 f8d0 	bl	8003be4 <_lseek_r>
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a4e:	81a3      	strh	r3, [r4, #12]
 8003a50:	4632      	mov	r2, r6
 8003a52:	463b      	mov	r3, r7
 8003a54:	4628      	mov	r0, r5
 8003a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a5a:	f000 b8e7 	b.w	8003c2c <_write_r>

08003a5e <__sseek>:
 8003a5e:	b510      	push	{r4, lr}
 8003a60:	460c      	mov	r4, r1
 8003a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a66:	f000 f8bd 	bl	8003be4 <_lseek_r>
 8003a6a:	1c43      	adds	r3, r0, #1
 8003a6c:	89a3      	ldrh	r3, [r4, #12]
 8003a6e:	bf15      	itete	ne
 8003a70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a7a:	81a3      	strheq	r3, [r4, #12]
 8003a7c:	bf18      	it	ne
 8003a7e:	81a3      	strhne	r3, [r4, #12]
 8003a80:	bd10      	pop	{r4, pc}

08003a82 <__sclose>:
 8003a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a86:	f000 b89d 	b.w	8003bc4 <_close_r>

08003a8a <__swbuf_r>:
 8003a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8c:	460e      	mov	r6, r1
 8003a8e:	4614      	mov	r4, r2
 8003a90:	4605      	mov	r5, r0
 8003a92:	b118      	cbz	r0, 8003a9c <__swbuf_r+0x12>
 8003a94:	6a03      	ldr	r3, [r0, #32]
 8003a96:	b90b      	cbnz	r3, 8003a9c <__swbuf_r+0x12>
 8003a98:	f7ff ff0e 	bl	80038b8 <__sinit>
 8003a9c:	69a3      	ldr	r3, [r4, #24]
 8003a9e:	60a3      	str	r3, [r4, #8]
 8003aa0:	89a3      	ldrh	r3, [r4, #12]
 8003aa2:	071a      	lsls	r2, r3, #28
 8003aa4:	d501      	bpl.n	8003aaa <__swbuf_r+0x20>
 8003aa6:	6923      	ldr	r3, [r4, #16]
 8003aa8:	b943      	cbnz	r3, 8003abc <__swbuf_r+0x32>
 8003aaa:	4621      	mov	r1, r4
 8003aac:	4628      	mov	r0, r5
 8003aae:	f000 f82b 	bl	8003b08 <__swsetup_r>
 8003ab2:	b118      	cbz	r0, 8003abc <__swbuf_r+0x32>
 8003ab4:	f04f 37ff 	mov.w	r7, #4294967295
 8003ab8:	4638      	mov	r0, r7
 8003aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	6922      	ldr	r2, [r4, #16]
 8003ac0:	1a98      	subs	r0, r3, r2
 8003ac2:	6963      	ldr	r3, [r4, #20]
 8003ac4:	b2f6      	uxtb	r6, r6
 8003ac6:	4283      	cmp	r3, r0
 8003ac8:	4637      	mov	r7, r6
 8003aca:	dc05      	bgt.n	8003ad8 <__swbuf_r+0x4e>
 8003acc:	4621      	mov	r1, r4
 8003ace:	4628      	mov	r0, r5
 8003ad0:	f000 fd38 	bl	8004544 <_fflush_r>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d1ed      	bne.n	8003ab4 <__swbuf_r+0x2a>
 8003ad8:	68a3      	ldr	r3, [r4, #8]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	60a3      	str	r3, [r4, #8]
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	6022      	str	r2, [r4, #0]
 8003ae4:	701e      	strb	r6, [r3, #0]
 8003ae6:	6962      	ldr	r2, [r4, #20]
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d004      	beq.n	8003af8 <__swbuf_r+0x6e>
 8003aee:	89a3      	ldrh	r3, [r4, #12]
 8003af0:	07db      	lsls	r3, r3, #31
 8003af2:	d5e1      	bpl.n	8003ab8 <__swbuf_r+0x2e>
 8003af4:	2e0a      	cmp	r6, #10
 8003af6:	d1df      	bne.n	8003ab8 <__swbuf_r+0x2e>
 8003af8:	4621      	mov	r1, r4
 8003afa:	4628      	mov	r0, r5
 8003afc:	f000 fd22 	bl	8004544 <_fflush_r>
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d0d9      	beq.n	8003ab8 <__swbuf_r+0x2e>
 8003b04:	e7d6      	b.n	8003ab4 <__swbuf_r+0x2a>
	...

08003b08 <__swsetup_r>:
 8003b08:	b538      	push	{r3, r4, r5, lr}
 8003b0a:	4b29      	ldr	r3, [pc, #164]	@ (8003bb0 <__swsetup_r+0xa8>)
 8003b0c:	4605      	mov	r5, r0
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	460c      	mov	r4, r1
 8003b12:	b118      	cbz	r0, 8003b1c <__swsetup_r+0x14>
 8003b14:	6a03      	ldr	r3, [r0, #32]
 8003b16:	b90b      	cbnz	r3, 8003b1c <__swsetup_r+0x14>
 8003b18:	f7ff fece 	bl	80038b8 <__sinit>
 8003b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b20:	0719      	lsls	r1, r3, #28
 8003b22:	d422      	bmi.n	8003b6a <__swsetup_r+0x62>
 8003b24:	06da      	lsls	r2, r3, #27
 8003b26:	d407      	bmi.n	8003b38 <__swsetup_r+0x30>
 8003b28:	2209      	movs	r2, #9
 8003b2a:	602a      	str	r2, [r5, #0]
 8003b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b30:	81a3      	strh	r3, [r4, #12]
 8003b32:	f04f 30ff 	mov.w	r0, #4294967295
 8003b36:	e033      	b.n	8003ba0 <__swsetup_r+0x98>
 8003b38:	0758      	lsls	r0, r3, #29
 8003b3a:	d512      	bpl.n	8003b62 <__swsetup_r+0x5a>
 8003b3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b3e:	b141      	cbz	r1, 8003b52 <__swsetup_r+0x4a>
 8003b40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b44:	4299      	cmp	r1, r3
 8003b46:	d002      	beq.n	8003b4e <__swsetup_r+0x46>
 8003b48:	4628      	mov	r0, r5
 8003b4a:	f000 f8af 	bl	8003cac <_free_r>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b52:	89a3      	ldrh	r3, [r4, #12]
 8003b54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003b58:	81a3      	strh	r3, [r4, #12]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	6063      	str	r3, [r4, #4]
 8003b5e:	6923      	ldr	r3, [r4, #16]
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	89a3      	ldrh	r3, [r4, #12]
 8003b64:	f043 0308 	orr.w	r3, r3, #8
 8003b68:	81a3      	strh	r3, [r4, #12]
 8003b6a:	6923      	ldr	r3, [r4, #16]
 8003b6c:	b94b      	cbnz	r3, 8003b82 <__swsetup_r+0x7a>
 8003b6e:	89a3      	ldrh	r3, [r4, #12]
 8003b70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b78:	d003      	beq.n	8003b82 <__swsetup_r+0x7a>
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	f000 fd2f 	bl	80045e0 <__smakebuf_r>
 8003b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b86:	f013 0201 	ands.w	r2, r3, #1
 8003b8a:	d00a      	beq.n	8003ba2 <__swsetup_r+0x9a>
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	60a2      	str	r2, [r4, #8]
 8003b90:	6962      	ldr	r2, [r4, #20]
 8003b92:	4252      	negs	r2, r2
 8003b94:	61a2      	str	r2, [r4, #24]
 8003b96:	6922      	ldr	r2, [r4, #16]
 8003b98:	b942      	cbnz	r2, 8003bac <__swsetup_r+0xa4>
 8003b9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003b9e:	d1c5      	bne.n	8003b2c <__swsetup_r+0x24>
 8003ba0:	bd38      	pop	{r3, r4, r5, pc}
 8003ba2:	0799      	lsls	r1, r3, #30
 8003ba4:	bf58      	it	pl
 8003ba6:	6962      	ldrpl	r2, [r4, #20]
 8003ba8:	60a2      	str	r2, [r4, #8]
 8003baa:	e7f4      	b.n	8003b96 <__swsetup_r+0x8e>
 8003bac:	2000      	movs	r0, #0
 8003bae:	e7f7      	b.n	8003ba0 <__swsetup_r+0x98>
 8003bb0:	20000018 	.word	0x20000018

08003bb4 <memset>:
 8003bb4:	4402      	add	r2, r0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d100      	bne.n	8003bbe <memset+0xa>
 8003bbc:	4770      	bx	lr
 8003bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc2:	e7f9      	b.n	8003bb8 <memset+0x4>

08003bc4 <_close_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	4d06      	ldr	r5, [pc, #24]	@ (8003be0 <_close_r+0x1c>)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	602b      	str	r3, [r5, #0]
 8003bd0:	f7fd f8ab 	bl	8000d2a <_close>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d102      	bne.n	8003bde <_close_r+0x1a>
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	b103      	cbz	r3, 8003bde <_close_r+0x1a>
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	bd38      	pop	{r3, r4, r5, pc}
 8003be0:	20000644 	.word	0x20000644

08003be4 <_lseek_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	4d07      	ldr	r5, [pc, #28]	@ (8003c04 <_lseek_r+0x20>)
 8003be8:	4604      	mov	r4, r0
 8003bea:	4608      	mov	r0, r1
 8003bec:	4611      	mov	r1, r2
 8003bee:	2200      	movs	r2, #0
 8003bf0:	602a      	str	r2, [r5, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f7fd f8c0 	bl	8000d78 <_lseek>
 8003bf8:	1c43      	adds	r3, r0, #1
 8003bfa:	d102      	bne.n	8003c02 <_lseek_r+0x1e>
 8003bfc:	682b      	ldr	r3, [r5, #0]
 8003bfe:	b103      	cbz	r3, 8003c02 <_lseek_r+0x1e>
 8003c00:	6023      	str	r3, [r4, #0]
 8003c02:	bd38      	pop	{r3, r4, r5, pc}
 8003c04:	20000644 	.word	0x20000644

08003c08 <_read_r>:
 8003c08:	b538      	push	{r3, r4, r5, lr}
 8003c0a:	4d07      	ldr	r5, [pc, #28]	@ (8003c28 <_read_r+0x20>)
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	4608      	mov	r0, r1
 8003c10:	4611      	mov	r1, r2
 8003c12:	2200      	movs	r2, #0
 8003c14:	602a      	str	r2, [r5, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	f7fd f86a 	bl	8000cf0 <_read>
 8003c1c:	1c43      	adds	r3, r0, #1
 8003c1e:	d102      	bne.n	8003c26 <_read_r+0x1e>
 8003c20:	682b      	ldr	r3, [r5, #0]
 8003c22:	b103      	cbz	r3, 8003c26 <_read_r+0x1e>
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	bd38      	pop	{r3, r4, r5, pc}
 8003c28:	20000644 	.word	0x20000644

08003c2c <_write_r>:
 8003c2c:	b538      	push	{r3, r4, r5, lr}
 8003c2e:	4d07      	ldr	r5, [pc, #28]	@ (8003c4c <_write_r+0x20>)
 8003c30:	4604      	mov	r4, r0
 8003c32:	4608      	mov	r0, r1
 8003c34:	4611      	mov	r1, r2
 8003c36:	2200      	movs	r2, #0
 8003c38:	602a      	str	r2, [r5, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f7fc ff62 	bl	8000b04 <_write>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d102      	bne.n	8003c4a <_write_r+0x1e>
 8003c44:	682b      	ldr	r3, [r5, #0]
 8003c46:	b103      	cbz	r3, 8003c4a <_write_r+0x1e>
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	bd38      	pop	{r3, r4, r5, pc}
 8003c4c:	20000644 	.word	0x20000644

08003c50 <__errno>:
 8003c50:	4b01      	ldr	r3, [pc, #4]	@ (8003c58 <__errno+0x8>)
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20000018 	.word	0x20000018

08003c5c <__libc_init_array>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8003c94 <__libc_init_array+0x38>)
 8003c60:	4c0d      	ldr	r4, [pc, #52]	@ (8003c98 <__libc_init_array+0x3c>)
 8003c62:	1b64      	subs	r4, r4, r5
 8003c64:	10a4      	asrs	r4, r4, #2
 8003c66:	2600      	movs	r6, #0
 8003c68:	42a6      	cmp	r6, r4
 8003c6a:	d109      	bne.n	8003c80 <__libc_init_array+0x24>
 8003c6c:	4d0b      	ldr	r5, [pc, #44]	@ (8003c9c <__libc_init_array+0x40>)
 8003c6e:	4c0c      	ldr	r4, [pc, #48]	@ (8003ca0 <__libc_init_array+0x44>)
 8003c70:	f000 fd24 	bl	80046bc <_init>
 8003c74:	1b64      	subs	r4, r4, r5
 8003c76:	10a4      	asrs	r4, r4, #2
 8003c78:	2600      	movs	r6, #0
 8003c7a:	42a6      	cmp	r6, r4
 8003c7c:	d105      	bne.n	8003c8a <__libc_init_array+0x2e>
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c84:	4798      	blx	r3
 8003c86:	3601      	adds	r6, #1
 8003c88:	e7ee      	b.n	8003c68 <__libc_init_array+0xc>
 8003c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8e:	4798      	blx	r3
 8003c90:	3601      	adds	r6, #1
 8003c92:	e7f2      	b.n	8003c7a <__libc_init_array+0x1e>
 8003c94:	080048c4 	.word	0x080048c4
 8003c98:	080048c4 	.word	0x080048c4
 8003c9c:	080048c4 	.word	0x080048c4
 8003ca0:	080048c8 	.word	0x080048c8

08003ca4 <__retarget_lock_init_recursive>:
 8003ca4:	4770      	bx	lr

08003ca6 <__retarget_lock_acquire_recursive>:
 8003ca6:	4770      	bx	lr

08003ca8 <__retarget_lock_release_recursive>:
 8003ca8:	4770      	bx	lr
	...

08003cac <_free_r>:
 8003cac:	b538      	push	{r3, r4, r5, lr}
 8003cae:	4605      	mov	r5, r0
 8003cb0:	2900      	cmp	r1, #0
 8003cb2:	d041      	beq.n	8003d38 <_free_r+0x8c>
 8003cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cb8:	1f0c      	subs	r4, r1, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bfb8      	it	lt
 8003cbe:	18e4      	addlt	r4, r4, r3
 8003cc0:	f000 f8e0 	bl	8003e84 <__malloc_lock>
 8003cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d3c <_free_r+0x90>)
 8003cc6:	6813      	ldr	r3, [r2, #0]
 8003cc8:	b933      	cbnz	r3, 8003cd8 <_free_r+0x2c>
 8003cca:	6063      	str	r3, [r4, #4]
 8003ccc:	6014      	str	r4, [r2, #0]
 8003cce:	4628      	mov	r0, r5
 8003cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cd4:	f000 b8dc 	b.w	8003e90 <__malloc_unlock>
 8003cd8:	42a3      	cmp	r3, r4
 8003cda:	d908      	bls.n	8003cee <_free_r+0x42>
 8003cdc:	6820      	ldr	r0, [r4, #0]
 8003cde:	1821      	adds	r1, r4, r0
 8003ce0:	428b      	cmp	r3, r1
 8003ce2:	bf01      	itttt	eq
 8003ce4:	6819      	ldreq	r1, [r3, #0]
 8003ce6:	685b      	ldreq	r3, [r3, #4]
 8003ce8:	1809      	addeq	r1, r1, r0
 8003cea:	6021      	streq	r1, [r4, #0]
 8003cec:	e7ed      	b.n	8003cca <_free_r+0x1e>
 8003cee:	461a      	mov	r2, r3
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	b10b      	cbz	r3, 8003cf8 <_free_r+0x4c>
 8003cf4:	42a3      	cmp	r3, r4
 8003cf6:	d9fa      	bls.n	8003cee <_free_r+0x42>
 8003cf8:	6811      	ldr	r1, [r2, #0]
 8003cfa:	1850      	adds	r0, r2, r1
 8003cfc:	42a0      	cmp	r0, r4
 8003cfe:	d10b      	bne.n	8003d18 <_free_r+0x6c>
 8003d00:	6820      	ldr	r0, [r4, #0]
 8003d02:	4401      	add	r1, r0
 8003d04:	1850      	adds	r0, r2, r1
 8003d06:	4283      	cmp	r3, r0
 8003d08:	6011      	str	r1, [r2, #0]
 8003d0a:	d1e0      	bne.n	8003cce <_free_r+0x22>
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	6053      	str	r3, [r2, #4]
 8003d12:	4408      	add	r0, r1
 8003d14:	6010      	str	r0, [r2, #0]
 8003d16:	e7da      	b.n	8003cce <_free_r+0x22>
 8003d18:	d902      	bls.n	8003d20 <_free_r+0x74>
 8003d1a:	230c      	movs	r3, #12
 8003d1c:	602b      	str	r3, [r5, #0]
 8003d1e:	e7d6      	b.n	8003cce <_free_r+0x22>
 8003d20:	6820      	ldr	r0, [r4, #0]
 8003d22:	1821      	adds	r1, r4, r0
 8003d24:	428b      	cmp	r3, r1
 8003d26:	bf04      	itt	eq
 8003d28:	6819      	ldreq	r1, [r3, #0]
 8003d2a:	685b      	ldreq	r3, [r3, #4]
 8003d2c:	6063      	str	r3, [r4, #4]
 8003d2e:	bf04      	itt	eq
 8003d30:	1809      	addeq	r1, r1, r0
 8003d32:	6021      	streq	r1, [r4, #0]
 8003d34:	6054      	str	r4, [r2, #4]
 8003d36:	e7ca      	b.n	8003cce <_free_r+0x22>
 8003d38:	bd38      	pop	{r3, r4, r5, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000650 	.word	0x20000650

08003d40 <sbrk_aligned>:
 8003d40:	b570      	push	{r4, r5, r6, lr}
 8003d42:	4e0f      	ldr	r6, [pc, #60]	@ (8003d80 <sbrk_aligned+0x40>)
 8003d44:	460c      	mov	r4, r1
 8003d46:	6831      	ldr	r1, [r6, #0]
 8003d48:	4605      	mov	r5, r0
 8003d4a:	b911      	cbnz	r1, 8003d52 <sbrk_aligned+0x12>
 8003d4c:	f000 fca6 	bl	800469c <_sbrk_r>
 8003d50:	6030      	str	r0, [r6, #0]
 8003d52:	4621      	mov	r1, r4
 8003d54:	4628      	mov	r0, r5
 8003d56:	f000 fca1 	bl	800469c <_sbrk_r>
 8003d5a:	1c43      	adds	r3, r0, #1
 8003d5c:	d103      	bne.n	8003d66 <sbrk_aligned+0x26>
 8003d5e:	f04f 34ff 	mov.w	r4, #4294967295
 8003d62:	4620      	mov	r0, r4
 8003d64:	bd70      	pop	{r4, r5, r6, pc}
 8003d66:	1cc4      	adds	r4, r0, #3
 8003d68:	f024 0403 	bic.w	r4, r4, #3
 8003d6c:	42a0      	cmp	r0, r4
 8003d6e:	d0f8      	beq.n	8003d62 <sbrk_aligned+0x22>
 8003d70:	1a21      	subs	r1, r4, r0
 8003d72:	4628      	mov	r0, r5
 8003d74:	f000 fc92 	bl	800469c <_sbrk_r>
 8003d78:	3001      	adds	r0, #1
 8003d7a:	d1f2      	bne.n	8003d62 <sbrk_aligned+0x22>
 8003d7c:	e7ef      	b.n	8003d5e <sbrk_aligned+0x1e>
 8003d7e:	bf00      	nop
 8003d80:	2000064c 	.word	0x2000064c

08003d84 <_malloc_r>:
 8003d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d88:	1ccd      	adds	r5, r1, #3
 8003d8a:	f025 0503 	bic.w	r5, r5, #3
 8003d8e:	3508      	adds	r5, #8
 8003d90:	2d0c      	cmp	r5, #12
 8003d92:	bf38      	it	cc
 8003d94:	250c      	movcc	r5, #12
 8003d96:	2d00      	cmp	r5, #0
 8003d98:	4606      	mov	r6, r0
 8003d9a:	db01      	blt.n	8003da0 <_malloc_r+0x1c>
 8003d9c:	42a9      	cmp	r1, r5
 8003d9e:	d904      	bls.n	8003daa <_malloc_r+0x26>
 8003da0:	230c      	movs	r3, #12
 8003da2:	6033      	str	r3, [r6, #0]
 8003da4:	2000      	movs	r0, #0
 8003da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003daa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e80 <_malloc_r+0xfc>
 8003dae:	f000 f869 	bl	8003e84 <__malloc_lock>
 8003db2:	f8d8 3000 	ldr.w	r3, [r8]
 8003db6:	461c      	mov	r4, r3
 8003db8:	bb44      	cbnz	r4, 8003e0c <_malloc_r+0x88>
 8003dba:	4629      	mov	r1, r5
 8003dbc:	4630      	mov	r0, r6
 8003dbe:	f7ff ffbf 	bl	8003d40 <sbrk_aligned>
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	d158      	bne.n	8003e7a <_malloc_r+0xf6>
 8003dc8:	f8d8 4000 	ldr.w	r4, [r8]
 8003dcc:	4627      	mov	r7, r4
 8003dce:	2f00      	cmp	r7, #0
 8003dd0:	d143      	bne.n	8003e5a <_malloc_r+0xd6>
 8003dd2:	2c00      	cmp	r4, #0
 8003dd4:	d04b      	beq.n	8003e6e <_malloc_r+0xea>
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	4639      	mov	r1, r7
 8003dda:	4630      	mov	r0, r6
 8003ddc:	eb04 0903 	add.w	r9, r4, r3
 8003de0:	f000 fc5c 	bl	800469c <_sbrk_r>
 8003de4:	4581      	cmp	r9, r0
 8003de6:	d142      	bne.n	8003e6e <_malloc_r+0xea>
 8003de8:	6821      	ldr	r1, [r4, #0]
 8003dea:	1a6d      	subs	r5, r5, r1
 8003dec:	4629      	mov	r1, r5
 8003dee:	4630      	mov	r0, r6
 8003df0:	f7ff ffa6 	bl	8003d40 <sbrk_aligned>
 8003df4:	3001      	adds	r0, #1
 8003df6:	d03a      	beq.n	8003e6e <_malloc_r+0xea>
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	442b      	add	r3, r5
 8003dfc:	6023      	str	r3, [r4, #0]
 8003dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	bb62      	cbnz	r2, 8003e60 <_malloc_r+0xdc>
 8003e06:	f8c8 7000 	str.w	r7, [r8]
 8003e0a:	e00f      	b.n	8003e2c <_malloc_r+0xa8>
 8003e0c:	6822      	ldr	r2, [r4, #0]
 8003e0e:	1b52      	subs	r2, r2, r5
 8003e10:	d420      	bmi.n	8003e54 <_malloc_r+0xd0>
 8003e12:	2a0b      	cmp	r2, #11
 8003e14:	d917      	bls.n	8003e46 <_malloc_r+0xc2>
 8003e16:	1961      	adds	r1, r4, r5
 8003e18:	42a3      	cmp	r3, r4
 8003e1a:	6025      	str	r5, [r4, #0]
 8003e1c:	bf18      	it	ne
 8003e1e:	6059      	strne	r1, [r3, #4]
 8003e20:	6863      	ldr	r3, [r4, #4]
 8003e22:	bf08      	it	eq
 8003e24:	f8c8 1000 	streq.w	r1, [r8]
 8003e28:	5162      	str	r2, [r4, r5]
 8003e2a:	604b      	str	r3, [r1, #4]
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	f000 f82f 	bl	8003e90 <__malloc_unlock>
 8003e32:	f104 000b 	add.w	r0, r4, #11
 8003e36:	1d23      	adds	r3, r4, #4
 8003e38:	f020 0007 	bic.w	r0, r0, #7
 8003e3c:	1ac2      	subs	r2, r0, r3
 8003e3e:	bf1c      	itt	ne
 8003e40:	1a1b      	subne	r3, r3, r0
 8003e42:	50a3      	strne	r3, [r4, r2]
 8003e44:	e7af      	b.n	8003da6 <_malloc_r+0x22>
 8003e46:	6862      	ldr	r2, [r4, #4]
 8003e48:	42a3      	cmp	r3, r4
 8003e4a:	bf0c      	ite	eq
 8003e4c:	f8c8 2000 	streq.w	r2, [r8]
 8003e50:	605a      	strne	r2, [r3, #4]
 8003e52:	e7eb      	b.n	8003e2c <_malloc_r+0xa8>
 8003e54:	4623      	mov	r3, r4
 8003e56:	6864      	ldr	r4, [r4, #4]
 8003e58:	e7ae      	b.n	8003db8 <_malloc_r+0x34>
 8003e5a:	463c      	mov	r4, r7
 8003e5c:	687f      	ldr	r7, [r7, #4]
 8003e5e:	e7b6      	b.n	8003dce <_malloc_r+0x4a>
 8003e60:	461a      	mov	r2, r3
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	42a3      	cmp	r3, r4
 8003e66:	d1fb      	bne.n	8003e60 <_malloc_r+0xdc>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	6053      	str	r3, [r2, #4]
 8003e6c:	e7de      	b.n	8003e2c <_malloc_r+0xa8>
 8003e6e:	230c      	movs	r3, #12
 8003e70:	6033      	str	r3, [r6, #0]
 8003e72:	4630      	mov	r0, r6
 8003e74:	f000 f80c 	bl	8003e90 <__malloc_unlock>
 8003e78:	e794      	b.n	8003da4 <_malloc_r+0x20>
 8003e7a:	6005      	str	r5, [r0, #0]
 8003e7c:	e7d6      	b.n	8003e2c <_malloc_r+0xa8>
 8003e7e:	bf00      	nop
 8003e80:	20000650 	.word	0x20000650

08003e84 <__malloc_lock>:
 8003e84:	4801      	ldr	r0, [pc, #4]	@ (8003e8c <__malloc_lock+0x8>)
 8003e86:	f7ff bf0e 	b.w	8003ca6 <__retarget_lock_acquire_recursive>
 8003e8a:	bf00      	nop
 8003e8c:	20000648 	.word	0x20000648

08003e90 <__malloc_unlock>:
 8003e90:	4801      	ldr	r0, [pc, #4]	@ (8003e98 <__malloc_unlock+0x8>)
 8003e92:	f7ff bf09 	b.w	8003ca8 <__retarget_lock_release_recursive>
 8003e96:	bf00      	nop
 8003e98:	20000648 	.word	0x20000648

08003e9c <__sfputc_r>:
 8003e9c:	6893      	ldr	r3, [r2, #8]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	b410      	push	{r4}
 8003ea4:	6093      	str	r3, [r2, #8]
 8003ea6:	da08      	bge.n	8003eba <__sfputc_r+0x1e>
 8003ea8:	6994      	ldr	r4, [r2, #24]
 8003eaa:	42a3      	cmp	r3, r4
 8003eac:	db01      	blt.n	8003eb2 <__sfputc_r+0x16>
 8003eae:	290a      	cmp	r1, #10
 8003eb0:	d103      	bne.n	8003eba <__sfputc_r+0x1e>
 8003eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003eb6:	f7ff bde8 	b.w	8003a8a <__swbuf_r>
 8003eba:	6813      	ldr	r3, [r2, #0]
 8003ebc:	1c58      	adds	r0, r3, #1
 8003ebe:	6010      	str	r0, [r2, #0]
 8003ec0:	7019      	strb	r1, [r3, #0]
 8003ec2:	4608      	mov	r0, r1
 8003ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <__sfputs_r>:
 8003eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ecc:	4606      	mov	r6, r0
 8003ece:	460f      	mov	r7, r1
 8003ed0:	4614      	mov	r4, r2
 8003ed2:	18d5      	adds	r5, r2, r3
 8003ed4:	42ac      	cmp	r4, r5
 8003ed6:	d101      	bne.n	8003edc <__sfputs_r+0x12>
 8003ed8:	2000      	movs	r0, #0
 8003eda:	e007      	b.n	8003eec <__sfputs_r+0x22>
 8003edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee0:	463a      	mov	r2, r7
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f7ff ffda 	bl	8003e9c <__sfputc_r>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	d1f3      	bne.n	8003ed4 <__sfputs_r+0xa>
 8003eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ef0 <_vfiprintf_r>:
 8003ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef4:	460d      	mov	r5, r1
 8003ef6:	b09d      	sub	sp, #116	@ 0x74
 8003ef8:	4614      	mov	r4, r2
 8003efa:	4698      	mov	r8, r3
 8003efc:	4606      	mov	r6, r0
 8003efe:	b118      	cbz	r0, 8003f08 <_vfiprintf_r+0x18>
 8003f00:	6a03      	ldr	r3, [r0, #32]
 8003f02:	b90b      	cbnz	r3, 8003f08 <_vfiprintf_r+0x18>
 8003f04:	f7ff fcd8 	bl	80038b8 <__sinit>
 8003f08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f0a:	07d9      	lsls	r1, r3, #31
 8003f0c:	d405      	bmi.n	8003f1a <_vfiprintf_r+0x2a>
 8003f0e:	89ab      	ldrh	r3, [r5, #12]
 8003f10:	059a      	lsls	r2, r3, #22
 8003f12:	d402      	bmi.n	8003f1a <_vfiprintf_r+0x2a>
 8003f14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f16:	f7ff fec6 	bl	8003ca6 <__retarget_lock_acquire_recursive>
 8003f1a:	89ab      	ldrh	r3, [r5, #12]
 8003f1c:	071b      	lsls	r3, r3, #28
 8003f1e:	d501      	bpl.n	8003f24 <_vfiprintf_r+0x34>
 8003f20:	692b      	ldr	r3, [r5, #16]
 8003f22:	b99b      	cbnz	r3, 8003f4c <_vfiprintf_r+0x5c>
 8003f24:	4629      	mov	r1, r5
 8003f26:	4630      	mov	r0, r6
 8003f28:	f7ff fdee 	bl	8003b08 <__swsetup_r>
 8003f2c:	b170      	cbz	r0, 8003f4c <_vfiprintf_r+0x5c>
 8003f2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f30:	07dc      	lsls	r4, r3, #31
 8003f32:	d504      	bpl.n	8003f3e <_vfiprintf_r+0x4e>
 8003f34:	f04f 30ff 	mov.w	r0, #4294967295
 8003f38:	b01d      	add	sp, #116	@ 0x74
 8003f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f3e:	89ab      	ldrh	r3, [r5, #12]
 8003f40:	0598      	lsls	r0, r3, #22
 8003f42:	d4f7      	bmi.n	8003f34 <_vfiprintf_r+0x44>
 8003f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f46:	f7ff feaf 	bl	8003ca8 <__retarget_lock_release_recursive>
 8003f4a:	e7f3      	b.n	8003f34 <_vfiprintf_r+0x44>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f50:	2320      	movs	r3, #32
 8003f52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f5a:	2330      	movs	r3, #48	@ 0x30
 8003f5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800410c <_vfiprintf_r+0x21c>
 8003f60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f64:	f04f 0901 	mov.w	r9, #1
 8003f68:	4623      	mov	r3, r4
 8003f6a:	469a      	mov	sl, r3
 8003f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f70:	b10a      	cbz	r2, 8003f76 <_vfiprintf_r+0x86>
 8003f72:	2a25      	cmp	r2, #37	@ 0x25
 8003f74:	d1f9      	bne.n	8003f6a <_vfiprintf_r+0x7a>
 8003f76:	ebba 0b04 	subs.w	fp, sl, r4
 8003f7a:	d00b      	beq.n	8003f94 <_vfiprintf_r+0xa4>
 8003f7c:	465b      	mov	r3, fp
 8003f7e:	4622      	mov	r2, r4
 8003f80:	4629      	mov	r1, r5
 8003f82:	4630      	mov	r0, r6
 8003f84:	f7ff ffa1 	bl	8003eca <__sfputs_r>
 8003f88:	3001      	adds	r0, #1
 8003f8a:	f000 80a7 	beq.w	80040dc <_vfiprintf_r+0x1ec>
 8003f8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f90:	445a      	add	r2, fp
 8003f92:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f94:	f89a 3000 	ldrb.w	r3, [sl]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 809f 	beq.w	80040dc <_vfiprintf_r+0x1ec>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fa8:	f10a 0a01 	add.w	sl, sl, #1
 8003fac:	9304      	str	r3, [sp, #16]
 8003fae:	9307      	str	r3, [sp, #28]
 8003fb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003fb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8003fb6:	4654      	mov	r4, sl
 8003fb8:	2205      	movs	r2, #5
 8003fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fbe:	4853      	ldr	r0, [pc, #332]	@ (800410c <_vfiprintf_r+0x21c>)
 8003fc0:	f7fc f90e 	bl	80001e0 <memchr>
 8003fc4:	9a04      	ldr	r2, [sp, #16]
 8003fc6:	b9d8      	cbnz	r0, 8004000 <_vfiprintf_r+0x110>
 8003fc8:	06d1      	lsls	r1, r2, #27
 8003fca:	bf44      	itt	mi
 8003fcc:	2320      	movmi	r3, #32
 8003fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fd2:	0713      	lsls	r3, r2, #28
 8003fd4:	bf44      	itt	mi
 8003fd6:	232b      	movmi	r3, #43	@ 0x2b
 8003fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8003fe0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fe2:	d015      	beq.n	8004010 <_vfiprintf_r+0x120>
 8003fe4:	9a07      	ldr	r2, [sp, #28]
 8003fe6:	4654      	mov	r4, sl
 8003fe8:	2000      	movs	r0, #0
 8003fea:	f04f 0c0a 	mov.w	ip, #10
 8003fee:	4621      	mov	r1, r4
 8003ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ff4:	3b30      	subs	r3, #48	@ 0x30
 8003ff6:	2b09      	cmp	r3, #9
 8003ff8:	d94b      	bls.n	8004092 <_vfiprintf_r+0x1a2>
 8003ffa:	b1b0      	cbz	r0, 800402a <_vfiprintf_r+0x13a>
 8003ffc:	9207      	str	r2, [sp, #28]
 8003ffe:	e014      	b.n	800402a <_vfiprintf_r+0x13a>
 8004000:	eba0 0308 	sub.w	r3, r0, r8
 8004004:	fa09 f303 	lsl.w	r3, r9, r3
 8004008:	4313      	orrs	r3, r2
 800400a:	9304      	str	r3, [sp, #16]
 800400c:	46a2      	mov	sl, r4
 800400e:	e7d2      	b.n	8003fb6 <_vfiprintf_r+0xc6>
 8004010:	9b03      	ldr	r3, [sp, #12]
 8004012:	1d19      	adds	r1, r3, #4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	9103      	str	r1, [sp, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	bfbb      	ittet	lt
 800401c:	425b      	neglt	r3, r3
 800401e:	f042 0202 	orrlt.w	r2, r2, #2
 8004022:	9307      	strge	r3, [sp, #28]
 8004024:	9307      	strlt	r3, [sp, #28]
 8004026:	bfb8      	it	lt
 8004028:	9204      	strlt	r2, [sp, #16]
 800402a:	7823      	ldrb	r3, [r4, #0]
 800402c:	2b2e      	cmp	r3, #46	@ 0x2e
 800402e:	d10a      	bne.n	8004046 <_vfiprintf_r+0x156>
 8004030:	7863      	ldrb	r3, [r4, #1]
 8004032:	2b2a      	cmp	r3, #42	@ 0x2a
 8004034:	d132      	bne.n	800409c <_vfiprintf_r+0x1ac>
 8004036:	9b03      	ldr	r3, [sp, #12]
 8004038:	1d1a      	adds	r2, r3, #4
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	9203      	str	r2, [sp, #12]
 800403e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004042:	3402      	adds	r4, #2
 8004044:	9305      	str	r3, [sp, #20]
 8004046:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800411c <_vfiprintf_r+0x22c>
 800404a:	7821      	ldrb	r1, [r4, #0]
 800404c:	2203      	movs	r2, #3
 800404e:	4650      	mov	r0, sl
 8004050:	f7fc f8c6 	bl	80001e0 <memchr>
 8004054:	b138      	cbz	r0, 8004066 <_vfiprintf_r+0x176>
 8004056:	9b04      	ldr	r3, [sp, #16]
 8004058:	eba0 000a 	sub.w	r0, r0, sl
 800405c:	2240      	movs	r2, #64	@ 0x40
 800405e:	4082      	lsls	r2, r0
 8004060:	4313      	orrs	r3, r2
 8004062:	3401      	adds	r4, #1
 8004064:	9304      	str	r3, [sp, #16]
 8004066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800406a:	4829      	ldr	r0, [pc, #164]	@ (8004110 <_vfiprintf_r+0x220>)
 800406c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004070:	2206      	movs	r2, #6
 8004072:	f7fc f8b5 	bl	80001e0 <memchr>
 8004076:	2800      	cmp	r0, #0
 8004078:	d03f      	beq.n	80040fa <_vfiprintf_r+0x20a>
 800407a:	4b26      	ldr	r3, [pc, #152]	@ (8004114 <_vfiprintf_r+0x224>)
 800407c:	bb1b      	cbnz	r3, 80040c6 <_vfiprintf_r+0x1d6>
 800407e:	9b03      	ldr	r3, [sp, #12]
 8004080:	3307      	adds	r3, #7
 8004082:	f023 0307 	bic.w	r3, r3, #7
 8004086:	3308      	adds	r3, #8
 8004088:	9303      	str	r3, [sp, #12]
 800408a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800408c:	443b      	add	r3, r7
 800408e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004090:	e76a      	b.n	8003f68 <_vfiprintf_r+0x78>
 8004092:	fb0c 3202 	mla	r2, ip, r2, r3
 8004096:	460c      	mov	r4, r1
 8004098:	2001      	movs	r0, #1
 800409a:	e7a8      	b.n	8003fee <_vfiprintf_r+0xfe>
 800409c:	2300      	movs	r3, #0
 800409e:	3401      	adds	r4, #1
 80040a0:	9305      	str	r3, [sp, #20]
 80040a2:	4619      	mov	r1, r3
 80040a4:	f04f 0c0a 	mov.w	ip, #10
 80040a8:	4620      	mov	r0, r4
 80040aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040ae:	3a30      	subs	r2, #48	@ 0x30
 80040b0:	2a09      	cmp	r2, #9
 80040b2:	d903      	bls.n	80040bc <_vfiprintf_r+0x1cc>
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0c6      	beq.n	8004046 <_vfiprintf_r+0x156>
 80040b8:	9105      	str	r1, [sp, #20]
 80040ba:	e7c4      	b.n	8004046 <_vfiprintf_r+0x156>
 80040bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80040c0:	4604      	mov	r4, r0
 80040c2:	2301      	movs	r3, #1
 80040c4:	e7f0      	b.n	80040a8 <_vfiprintf_r+0x1b8>
 80040c6:	ab03      	add	r3, sp, #12
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	462a      	mov	r2, r5
 80040cc:	4b12      	ldr	r3, [pc, #72]	@ (8004118 <_vfiprintf_r+0x228>)
 80040ce:	a904      	add	r1, sp, #16
 80040d0:	4630      	mov	r0, r6
 80040d2:	f3af 8000 	nop.w
 80040d6:	4607      	mov	r7, r0
 80040d8:	1c78      	adds	r0, r7, #1
 80040da:	d1d6      	bne.n	800408a <_vfiprintf_r+0x19a>
 80040dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040de:	07d9      	lsls	r1, r3, #31
 80040e0:	d405      	bmi.n	80040ee <_vfiprintf_r+0x1fe>
 80040e2:	89ab      	ldrh	r3, [r5, #12]
 80040e4:	059a      	lsls	r2, r3, #22
 80040e6:	d402      	bmi.n	80040ee <_vfiprintf_r+0x1fe>
 80040e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040ea:	f7ff fddd 	bl	8003ca8 <__retarget_lock_release_recursive>
 80040ee:	89ab      	ldrh	r3, [r5, #12]
 80040f0:	065b      	lsls	r3, r3, #25
 80040f2:	f53f af1f 	bmi.w	8003f34 <_vfiprintf_r+0x44>
 80040f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040f8:	e71e      	b.n	8003f38 <_vfiprintf_r+0x48>
 80040fa:	ab03      	add	r3, sp, #12
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	462a      	mov	r2, r5
 8004100:	4b05      	ldr	r3, [pc, #20]	@ (8004118 <_vfiprintf_r+0x228>)
 8004102:	a904      	add	r1, sp, #16
 8004104:	4630      	mov	r0, r6
 8004106:	f000 f879 	bl	80041fc <_printf_i>
 800410a:	e7e4      	b.n	80040d6 <_vfiprintf_r+0x1e6>
 800410c:	08004888 	.word	0x08004888
 8004110:	08004892 	.word	0x08004892
 8004114:	00000000 	.word	0x00000000
 8004118:	08003ecb 	.word	0x08003ecb
 800411c:	0800488e 	.word	0x0800488e

08004120 <_printf_common>:
 8004120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004124:	4616      	mov	r6, r2
 8004126:	4698      	mov	r8, r3
 8004128:	688a      	ldr	r2, [r1, #8]
 800412a:	690b      	ldr	r3, [r1, #16]
 800412c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004130:	4293      	cmp	r3, r2
 8004132:	bfb8      	it	lt
 8004134:	4613      	movlt	r3, r2
 8004136:	6033      	str	r3, [r6, #0]
 8004138:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800413c:	4607      	mov	r7, r0
 800413e:	460c      	mov	r4, r1
 8004140:	b10a      	cbz	r2, 8004146 <_printf_common+0x26>
 8004142:	3301      	adds	r3, #1
 8004144:	6033      	str	r3, [r6, #0]
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	0699      	lsls	r1, r3, #26
 800414a:	bf42      	ittt	mi
 800414c:	6833      	ldrmi	r3, [r6, #0]
 800414e:	3302      	addmi	r3, #2
 8004150:	6033      	strmi	r3, [r6, #0]
 8004152:	6825      	ldr	r5, [r4, #0]
 8004154:	f015 0506 	ands.w	r5, r5, #6
 8004158:	d106      	bne.n	8004168 <_printf_common+0x48>
 800415a:	f104 0a19 	add.w	sl, r4, #25
 800415e:	68e3      	ldr	r3, [r4, #12]
 8004160:	6832      	ldr	r2, [r6, #0]
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	42ab      	cmp	r3, r5
 8004166:	dc26      	bgt.n	80041b6 <_printf_common+0x96>
 8004168:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800416c:	6822      	ldr	r2, [r4, #0]
 800416e:	3b00      	subs	r3, #0
 8004170:	bf18      	it	ne
 8004172:	2301      	movne	r3, #1
 8004174:	0692      	lsls	r2, r2, #26
 8004176:	d42b      	bmi.n	80041d0 <_printf_common+0xb0>
 8004178:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800417c:	4641      	mov	r1, r8
 800417e:	4638      	mov	r0, r7
 8004180:	47c8      	blx	r9
 8004182:	3001      	adds	r0, #1
 8004184:	d01e      	beq.n	80041c4 <_printf_common+0xa4>
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	6922      	ldr	r2, [r4, #16]
 800418a:	f003 0306 	and.w	r3, r3, #6
 800418e:	2b04      	cmp	r3, #4
 8004190:	bf02      	ittt	eq
 8004192:	68e5      	ldreq	r5, [r4, #12]
 8004194:	6833      	ldreq	r3, [r6, #0]
 8004196:	1aed      	subeq	r5, r5, r3
 8004198:	68a3      	ldr	r3, [r4, #8]
 800419a:	bf0c      	ite	eq
 800419c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041a0:	2500      	movne	r5, #0
 80041a2:	4293      	cmp	r3, r2
 80041a4:	bfc4      	itt	gt
 80041a6:	1a9b      	subgt	r3, r3, r2
 80041a8:	18ed      	addgt	r5, r5, r3
 80041aa:	2600      	movs	r6, #0
 80041ac:	341a      	adds	r4, #26
 80041ae:	42b5      	cmp	r5, r6
 80041b0:	d11a      	bne.n	80041e8 <_printf_common+0xc8>
 80041b2:	2000      	movs	r0, #0
 80041b4:	e008      	b.n	80041c8 <_printf_common+0xa8>
 80041b6:	2301      	movs	r3, #1
 80041b8:	4652      	mov	r2, sl
 80041ba:	4641      	mov	r1, r8
 80041bc:	4638      	mov	r0, r7
 80041be:	47c8      	blx	r9
 80041c0:	3001      	adds	r0, #1
 80041c2:	d103      	bne.n	80041cc <_printf_common+0xac>
 80041c4:	f04f 30ff 	mov.w	r0, #4294967295
 80041c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041cc:	3501      	adds	r5, #1
 80041ce:	e7c6      	b.n	800415e <_printf_common+0x3e>
 80041d0:	18e1      	adds	r1, r4, r3
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	2030      	movs	r0, #48	@ 0x30
 80041d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041da:	4422      	add	r2, r4
 80041dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041e4:	3302      	adds	r3, #2
 80041e6:	e7c7      	b.n	8004178 <_printf_common+0x58>
 80041e8:	2301      	movs	r3, #1
 80041ea:	4622      	mov	r2, r4
 80041ec:	4641      	mov	r1, r8
 80041ee:	4638      	mov	r0, r7
 80041f0:	47c8      	blx	r9
 80041f2:	3001      	adds	r0, #1
 80041f4:	d0e6      	beq.n	80041c4 <_printf_common+0xa4>
 80041f6:	3601      	adds	r6, #1
 80041f8:	e7d9      	b.n	80041ae <_printf_common+0x8e>
	...

080041fc <_printf_i>:
 80041fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004200:	7e0f      	ldrb	r7, [r1, #24]
 8004202:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004204:	2f78      	cmp	r7, #120	@ 0x78
 8004206:	4691      	mov	r9, r2
 8004208:	4680      	mov	r8, r0
 800420a:	460c      	mov	r4, r1
 800420c:	469a      	mov	sl, r3
 800420e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004212:	d807      	bhi.n	8004224 <_printf_i+0x28>
 8004214:	2f62      	cmp	r7, #98	@ 0x62
 8004216:	d80a      	bhi.n	800422e <_printf_i+0x32>
 8004218:	2f00      	cmp	r7, #0
 800421a:	f000 80d2 	beq.w	80043c2 <_printf_i+0x1c6>
 800421e:	2f58      	cmp	r7, #88	@ 0x58
 8004220:	f000 80b9 	beq.w	8004396 <_printf_i+0x19a>
 8004224:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004228:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800422c:	e03a      	b.n	80042a4 <_printf_i+0xa8>
 800422e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004232:	2b15      	cmp	r3, #21
 8004234:	d8f6      	bhi.n	8004224 <_printf_i+0x28>
 8004236:	a101      	add	r1, pc, #4	@ (adr r1, 800423c <_printf_i+0x40>)
 8004238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800423c:	08004295 	.word	0x08004295
 8004240:	080042a9 	.word	0x080042a9
 8004244:	08004225 	.word	0x08004225
 8004248:	08004225 	.word	0x08004225
 800424c:	08004225 	.word	0x08004225
 8004250:	08004225 	.word	0x08004225
 8004254:	080042a9 	.word	0x080042a9
 8004258:	08004225 	.word	0x08004225
 800425c:	08004225 	.word	0x08004225
 8004260:	08004225 	.word	0x08004225
 8004264:	08004225 	.word	0x08004225
 8004268:	080043a9 	.word	0x080043a9
 800426c:	080042d3 	.word	0x080042d3
 8004270:	08004363 	.word	0x08004363
 8004274:	08004225 	.word	0x08004225
 8004278:	08004225 	.word	0x08004225
 800427c:	080043cb 	.word	0x080043cb
 8004280:	08004225 	.word	0x08004225
 8004284:	080042d3 	.word	0x080042d3
 8004288:	08004225 	.word	0x08004225
 800428c:	08004225 	.word	0x08004225
 8004290:	0800436b 	.word	0x0800436b
 8004294:	6833      	ldr	r3, [r6, #0]
 8004296:	1d1a      	adds	r2, r3, #4
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6032      	str	r2, [r6, #0]
 800429c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042a4:	2301      	movs	r3, #1
 80042a6:	e09d      	b.n	80043e4 <_printf_i+0x1e8>
 80042a8:	6833      	ldr	r3, [r6, #0]
 80042aa:	6820      	ldr	r0, [r4, #0]
 80042ac:	1d19      	adds	r1, r3, #4
 80042ae:	6031      	str	r1, [r6, #0]
 80042b0:	0606      	lsls	r6, r0, #24
 80042b2:	d501      	bpl.n	80042b8 <_printf_i+0xbc>
 80042b4:	681d      	ldr	r5, [r3, #0]
 80042b6:	e003      	b.n	80042c0 <_printf_i+0xc4>
 80042b8:	0645      	lsls	r5, r0, #25
 80042ba:	d5fb      	bpl.n	80042b4 <_printf_i+0xb8>
 80042bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042c0:	2d00      	cmp	r5, #0
 80042c2:	da03      	bge.n	80042cc <_printf_i+0xd0>
 80042c4:	232d      	movs	r3, #45	@ 0x2d
 80042c6:	426d      	negs	r5, r5
 80042c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042cc:	4859      	ldr	r0, [pc, #356]	@ (8004434 <_printf_i+0x238>)
 80042ce:	230a      	movs	r3, #10
 80042d0:	e011      	b.n	80042f6 <_printf_i+0xfa>
 80042d2:	6821      	ldr	r1, [r4, #0]
 80042d4:	6833      	ldr	r3, [r6, #0]
 80042d6:	0608      	lsls	r0, r1, #24
 80042d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80042dc:	d402      	bmi.n	80042e4 <_printf_i+0xe8>
 80042de:	0649      	lsls	r1, r1, #25
 80042e0:	bf48      	it	mi
 80042e2:	b2ad      	uxthmi	r5, r5
 80042e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80042e6:	4853      	ldr	r0, [pc, #332]	@ (8004434 <_printf_i+0x238>)
 80042e8:	6033      	str	r3, [r6, #0]
 80042ea:	bf14      	ite	ne
 80042ec:	230a      	movne	r3, #10
 80042ee:	2308      	moveq	r3, #8
 80042f0:	2100      	movs	r1, #0
 80042f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042f6:	6866      	ldr	r6, [r4, #4]
 80042f8:	60a6      	str	r6, [r4, #8]
 80042fa:	2e00      	cmp	r6, #0
 80042fc:	bfa2      	ittt	ge
 80042fe:	6821      	ldrge	r1, [r4, #0]
 8004300:	f021 0104 	bicge.w	r1, r1, #4
 8004304:	6021      	strge	r1, [r4, #0]
 8004306:	b90d      	cbnz	r5, 800430c <_printf_i+0x110>
 8004308:	2e00      	cmp	r6, #0
 800430a:	d04b      	beq.n	80043a4 <_printf_i+0x1a8>
 800430c:	4616      	mov	r6, r2
 800430e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004312:	fb03 5711 	mls	r7, r3, r1, r5
 8004316:	5dc7      	ldrb	r7, [r0, r7]
 8004318:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800431c:	462f      	mov	r7, r5
 800431e:	42bb      	cmp	r3, r7
 8004320:	460d      	mov	r5, r1
 8004322:	d9f4      	bls.n	800430e <_printf_i+0x112>
 8004324:	2b08      	cmp	r3, #8
 8004326:	d10b      	bne.n	8004340 <_printf_i+0x144>
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	07df      	lsls	r7, r3, #31
 800432c:	d508      	bpl.n	8004340 <_printf_i+0x144>
 800432e:	6923      	ldr	r3, [r4, #16]
 8004330:	6861      	ldr	r1, [r4, #4]
 8004332:	4299      	cmp	r1, r3
 8004334:	bfde      	ittt	le
 8004336:	2330      	movle	r3, #48	@ 0x30
 8004338:	f806 3c01 	strble.w	r3, [r6, #-1]
 800433c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004340:	1b92      	subs	r2, r2, r6
 8004342:	6122      	str	r2, [r4, #16]
 8004344:	f8cd a000 	str.w	sl, [sp]
 8004348:	464b      	mov	r3, r9
 800434a:	aa03      	add	r2, sp, #12
 800434c:	4621      	mov	r1, r4
 800434e:	4640      	mov	r0, r8
 8004350:	f7ff fee6 	bl	8004120 <_printf_common>
 8004354:	3001      	adds	r0, #1
 8004356:	d14a      	bne.n	80043ee <_printf_i+0x1f2>
 8004358:	f04f 30ff 	mov.w	r0, #4294967295
 800435c:	b004      	add	sp, #16
 800435e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	f043 0320 	orr.w	r3, r3, #32
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	4833      	ldr	r0, [pc, #204]	@ (8004438 <_printf_i+0x23c>)
 800436c:	2778      	movs	r7, #120	@ 0x78
 800436e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	6831      	ldr	r1, [r6, #0]
 8004376:	061f      	lsls	r7, r3, #24
 8004378:	f851 5b04 	ldr.w	r5, [r1], #4
 800437c:	d402      	bmi.n	8004384 <_printf_i+0x188>
 800437e:	065f      	lsls	r7, r3, #25
 8004380:	bf48      	it	mi
 8004382:	b2ad      	uxthmi	r5, r5
 8004384:	6031      	str	r1, [r6, #0]
 8004386:	07d9      	lsls	r1, r3, #31
 8004388:	bf44      	itt	mi
 800438a:	f043 0320 	orrmi.w	r3, r3, #32
 800438e:	6023      	strmi	r3, [r4, #0]
 8004390:	b11d      	cbz	r5, 800439a <_printf_i+0x19e>
 8004392:	2310      	movs	r3, #16
 8004394:	e7ac      	b.n	80042f0 <_printf_i+0xf4>
 8004396:	4827      	ldr	r0, [pc, #156]	@ (8004434 <_printf_i+0x238>)
 8004398:	e7e9      	b.n	800436e <_printf_i+0x172>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	f023 0320 	bic.w	r3, r3, #32
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	e7f6      	b.n	8004392 <_printf_i+0x196>
 80043a4:	4616      	mov	r6, r2
 80043a6:	e7bd      	b.n	8004324 <_printf_i+0x128>
 80043a8:	6833      	ldr	r3, [r6, #0]
 80043aa:	6825      	ldr	r5, [r4, #0]
 80043ac:	6961      	ldr	r1, [r4, #20]
 80043ae:	1d18      	adds	r0, r3, #4
 80043b0:	6030      	str	r0, [r6, #0]
 80043b2:	062e      	lsls	r6, r5, #24
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	d501      	bpl.n	80043bc <_printf_i+0x1c0>
 80043b8:	6019      	str	r1, [r3, #0]
 80043ba:	e002      	b.n	80043c2 <_printf_i+0x1c6>
 80043bc:	0668      	lsls	r0, r5, #25
 80043be:	d5fb      	bpl.n	80043b8 <_printf_i+0x1bc>
 80043c0:	8019      	strh	r1, [r3, #0]
 80043c2:	2300      	movs	r3, #0
 80043c4:	6123      	str	r3, [r4, #16]
 80043c6:	4616      	mov	r6, r2
 80043c8:	e7bc      	b.n	8004344 <_printf_i+0x148>
 80043ca:	6833      	ldr	r3, [r6, #0]
 80043cc:	1d1a      	adds	r2, r3, #4
 80043ce:	6032      	str	r2, [r6, #0]
 80043d0:	681e      	ldr	r6, [r3, #0]
 80043d2:	6862      	ldr	r2, [r4, #4]
 80043d4:	2100      	movs	r1, #0
 80043d6:	4630      	mov	r0, r6
 80043d8:	f7fb ff02 	bl	80001e0 <memchr>
 80043dc:	b108      	cbz	r0, 80043e2 <_printf_i+0x1e6>
 80043de:	1b80      	subs	r0, r0, r6
 80043e0:	6060      	str	r0, [r4, #4]
 80043e2:	6863      	ldr	r3, [r4, #4]
 80043e4:	6123      	str	r3, [r4, #16]
 80043e6:	2300      	movs	r3, #0
 80043e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043ec:	e7aa      	b.n	8004344 <_printf_i+0x148>
 80043ee:	6923      	ldr	r3, [r4, #16]
 80043f0:	4632      	mov	r2, r6
 80043f2:	4649      	mov	r1, r9
 80043f4:	4640      	mov	r0, r8
 80043f6:	47d0      	blx	sl
 80043f8:	3001      	adds	r0, #1
 80043fa:	d0ad      	beq.n	8004358 <_printf_i+0x15c>
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	079b      	lsls	r3, r3, #30
 8004400:	d413      	bmi.n	800442a <_printf_i+0x22e>
 8004402:	68e0      	ldr	r0, [r4, #12]
 8004404:	9b03      	ldr	r3, [sp, #12]
 8004406:	4298      	cmp	r0, r3
 8004408:	bfb8      	it	lt
 800440a:	4618      	movlt	r0, r3
 800440c:	e7a6      	b.n	800435c <_printf_i+0x160>
 800440e:	2301      	movs	r3, #1
 8004410:	4632      	mov	r2, r6
 8004412:	4649      	mov	r1, r9
 8004414:	4640      	mov	r0, r8
 8004416:	47d0      	blx	sl
 8004418:	3001      	adds	r0, #1
 800441a:	d09d      	beq.n	8004358 <_printf_i+0x15c>
 800441c:	3501      	adds	r5, #1
 800441e:	68e3      	ldr	r3, [r4, #12]
 8004420:	9903      	ldr	r1, [sp, #12]
 8004422:	1a5b      	subs	r3, r3, r1
 8004424:	42ab      	cmp	r3, r5
 8004426:	dcf2      	bgt.n	800440e <_printf_i+0x212>
 8004428:	e7eb      	b.n	8004402 <_printf_i+0x206>
 800442a:	2500      	movs	r5, #0
 800442c:	f104 0619 	add.w	r6, r4, #25
 8004430:	e7f5      	b.n	800441e <_printf_i+0x222>
 8004432:	bf00      	nop
 8004434:	08004899 	.word	0x08004899
 8004438:	080048aa 	.word	0x080048aa

0800443c <__sflush_r>:
 800443c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004444:	0716      	lsls	r6, r2, #28
 8004446:	4605      	mov	r5, r0
 8004448:	460c      	mov	r4, r1
 800444a:	d454      	bmi.n	80044f6 <__sflush_r+0xba>
 800444c:	684b      	ldr	r3, [r1, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	dc02      	bgt.n	8004458 <__sflush_r+0x1c>
 8004452:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	dd48      	ble.n	80044ea <__sflush_r+0xae>
 8004458:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800445a:	2e00      	cmp	r6, #0
 800445c:	d045      	beq.n	80044ea <__sflush_r+0xae>
 800445e:	2300      	movs	r3, #0
 8004460:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004464:	682f      	ldr	r7, [r5, #0]
 8004466:	6a21      	ldr	r1, [r4, #32]
 8004468:	602b      	str	r3, [r5, #0]
 800446a:	d030      	beq.n	80044ce <__sflush_r+0x92>
 800446c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800446e:	89a3      	ldrh	r3, [r4, #12]
 8004470:	0759      	lsls	r1, r3, #29
 8004472:	d505      	bpl.n	8004480 <__sflush_r+0x44>
 8004474:	6863      	ldr	r3, [r4, #4]
 8004476:	1ad2      	subs	r2, r2, r3
 8004478:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800447a:	b10b      	cbz	r3, 8004480 <__sflush_r+0x44>
 800447c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800447e:	1ad2      	subs	r2, r2, r3
 8004480:	2300      	movs	r3, #0
 8004482:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004484:	6a21      	ldr	r1, [r4, #32]
 8004486:	4628      	mov	r0, r5
 8004488:	47b0      	blx	r6
 800448a:	1c43      	adds	r3, r0, #1
 800448c:	89a3      	ldrh	r3, [r4, #12]
 800448e:	d106      	bne.n	800449e <__sflush_r+0x62>
 8004490:	6829      	ldr	r1, [r5, #0]
 8004492:	291d      	cmp	r1, #29
 8004494:	d82b      	bhi.n	80044ee <__sflush_r+0xb2>
 8004496:	4a2a      	ldr	r2, [pc, #168]	@ (8004540 <__sflush_r+0x104>)
 8004498:	410a      	asrs	r2, r1
 800449a:	07d6      	lsls	r6, r2, #31
 800449c:	d427      	bmi.n	80044ee <__sflush_r+0xb2>
 800449e:	2200      	movs	r2, #0
 80044a0:	6062      	str	r2, [r4, #4]
 80044a2:	04d9      	lsls	r1, r3, #19
 80044a4:	6922      	ldr	r2, [r4, #16]
 80044a6:	6022      	str	r2, [r4, #0]
 80044a8:	d504      	bpl.n	80044b4 <__sflush_r+0x78>
 80044aa:	1c42      	adds	r2, r0, #1
 80044ac:	d101      	bne.n	80044b2 <__sflush_r+0x76>
 80044ae:	682b      	ldr	r3, [r5, #0]
 80044b0:	b903      	cbnz	r3, 80044b4 <__sflush_r+0x78>
 80044b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80044b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044b6:	602f      	str	r7, [r5, #0]
 80044b8:	b1b9      	cbz	r1, 80044ea <__sflush_r+0xae>
 80044ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044be:	4299      	cmp	r1, r3
 80044c0:	d002      	beq.n	80044c8 <__sflush_r+0x8c>
 80044c2:	4628      	mov	r0, r5
 80044c4:	f7ff fbf2 	bl	8003cac <_free_r>
 80044c8:	2300      	movs	r3, #0
 80044ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80044cc:	e00d      	b.n	80044ea <__sflush_r+0xae>
 80044ce:	2301      	movs	r3, #1
 80044d0:	4628      	mov	r0, r5
 80044d2:	47b0      	blx	r6
 80044d4:	4602      	mov	r2, r0
 80044d6:	1c50      	adds	r0, r2, #1
 80044d8:	d1c9      	bne.n	800446e <__sflush_r+0x32>
 80044da:	682b      	ldr	r3, [r5, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0c6      	beq.n	800446e <__sflush_r+0x32>
 80044e0:	2b1d      	cmp	r3, #29
 80044e2:	d001      	beq.n	80044e8 <__sflush_r+0xac>
 80044e4:	2b16      	cmp	r3, #22
 80044e6:	d11e      	bne.n	8004526 <__sflush_r+0xea>
 80044e8:	602f      	str	r7, [r5, #0]
 80044ea:	2000      	movs	r0, #0
 80044ec:	e022      	b.n	8004534 <__sflush_r+0xf8>
 80044ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044f2:	b21b      	sxth	r3, r3
 80044f4:	e01b      	b.n	800452e <__sflush_r+0xf2>
 80044f6:	690f      	ldr	r7, [r1, #16]
 80044f8:	2f00      	cmp	r7, #0
 80044fa:	d0f6      	beq.n	80044ea <__sflush_r+0xae>
 80044fc:	0793      	lsls	r3, r2, #30
 80044fe:	680e      	ldr	r6, [r1, #0]
 8004500:	bf08      	it	eq
 8004502:	694b      	ldreq	r3, [r1, #20]
 8004504:	600f      	str	r7, [r1, #0]
 8004506:	bf18      	it	ne
 8004508:	2300      	movne	r3, #0
 800450a:	eba6 0807 	sub.w	r8, r6, r7
 800450e:	608b      	str	r3, [r1, #8]
 8004510:	f1b8 0f00 	cmp.w	r8, #0
 8004514:	dde9      	ble.n	80044ea <__sflush_r+0xae>
 8004516:	6a21      	ldr	r1, [r4, #32]
 8004518:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800451a:	4643      	mov	r3, r8
 800451c:	463a      	mov	r2, r7
 800451e:	4628      	mov	r0, r5
 8004520:	47b0      	blx	r6
 8004522:	2800      	cmp	r0, #0
 8004524:	dc08      	bgt.n	8004538 <__sflush_r+0xfc>
 8004526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800452a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800452e:	81a3      	strh	r3, [r4, #12]
 8004530:	f04f 30ff 	mov.w	r0, #4294967295
 8004534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004538:	4407      	add	r7, r0
 800453a:	eba8 0800 	sub.w	r8, r8, r0
 800453e:	e7e7      	b.n	8004510 <__sflush_r+0xd4>
 8004540:	dfbffffe 	.word	0xdfbffffe

08004544 <_fflush_r>:
 8004544:	b538      	push	{r3, r4, r5, lr}
 8004546:	690b      	ldr	r3, [r1, #16]
 8004548:	4605      	mov	r5, r0
 800454a:	460c      	mov	r4, r1
 800454c:	b913      	cbnz	r3, 8004554 <_fflush_r+0x10>
 800454e:	2500      	movs	r5, #0
 8004550:	4628      	mov	r0, r5
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	b118      	cbz	r0, 800455e <_fflush_r+0x1a>
 8004556:	6a03      	ldr	r3, [r0, #32]
 8004558:	b90b      	cbnz	r3, 800455e <_fflush_r+0x1a>
 800455a:	f7ff f9ad 	bl	80038b8 <__sinit>
 800455e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f3      	beq.n	800454e <_fflush_r+0xa>
 8004566:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004568:	07d0      	lsls	r0, r2, #31
 800456a:	d404      	bmi.n	8004576 <_fflush_r+0x32>
 800456c:	0599      	lsls	r1, r3, #22
 800456e:	d402      	bmi.n	8004576 <_fflush_r+0x32>
 8004570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004572:	f7ff fb98 	bl	8003ca6 <__retarget_lock_acquire_recursive>
 8004576:	4628      	mov	r0, r5
 8004578:	4621      	mov	r1, r4
 800457a:	f7ff ff5f 	bl	800443c <__sflush_r>
 800457e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004580:	07da      	lsls	r2, r3, #31
 8004582:	4605      	mov	r5, r0
 8004584:	d4e4      	bmi.n	8004550 <_fflush_r+0xc>
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	059b      	lsls	r3, r3, #22
 800458a:	d4e1      	bmi.n	8004550 <_fflush_r+0xc>
 800458c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800458e:	f7ff fb8b 	bl	8003ca8 <__retarget_lock_release_recursive>
 8004592:	e7dd      	b.n	8004550 <_fflush_r+0xc>

08004594 <__swhatbuf_r>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	460c      	mov	r4, r1
 8004598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800459c:	2900      	cmp	r1, #0
 800459e:	b096      	sub	sp, #88	@ 0x58
 80045a0:	4615      	mov	r5, r2
 80045a2:	461e      	mov	r6, r3
 80045a4:	da0d      	bge.n	80045c2 <__swhatbuf_r+0x2e>
 80045a6:	89a3      	ldrh	r3, [r4, #12]
 80045a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80045ac:	f04f 0100 	mov.w	r1, #0
 80045b0:	bf14      	ite	ne
 80045b2:	2340      	movne	r3, #64	@ 0x40
 80045b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80045b8:	2000      	movs	r0, #0
 80045ba:	6031      	str	r1, [r6, #0]
 80045bc:	602b      	str	r3, [r5, #0]
 80045be:	b016      	add	sp, #88	@ 0x58
 80045c0:	bd70      	pop	{r4, r5, r6, pc}
 80045c2:	466a      	mov	r2, sp
 80045c4:	f000 f848 	bl	8004658 <_fstat_r>
 80045c8:	2800      	cmp	r0, #0
 80045ca:	dbec      	blt.n	80045a6 <__swhatbuf_r+0x12>
 80045cc:	9901      	ldr	r1, [sp, #4]
 80045ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80045d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80045d6:	4259      	negs	r1, r3
 80045d8:	4159      	adcs	r1, r3
 80045da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045de:	e7eb      	b.n	80045b8 <__swhatbuf_r+0x24>

080045e0 <__smakebuf_r>:
 80045e0:	898b      	ldrh	r3, [r1, #12]
 80045e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045e4:	079d      	lsls	r5, r3, #30
 80045e6:	4606      	mov	r6, r0
 80045e8:	460c      	mov	r4, r1
 80045ea:	d507      	bpl.n	80045fc <__smakebuf_r+0x1c>
 80045ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	6123      	str	r3, [r4, #16]
 80045f4:	2301      	movs	r3, #1
 80045f6:	6163      	str	r3, [r4, #20]
 80045f8:	b003      	add	sp, #12
 80045fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045fc:	ab01      	add	r3, sp, #4
 80045fe:	466a      	mov	r2, sp
 8004600:	f7ff ffc8 	bl	8004594 <__swhatbuf_r>
 8004604:	9f00      	ldr	r7, [sp, #0]
 8004606:	4605      	mov	r5, r0
 8004608:	4639      	mov	r1, r7
 800460a:	4630      	mov	r0, r6
 800460c:	f7ff fbba 	bl	8003d84 <_malloc_r>
 8004610:	b948      	cbnz	r0, 8004626 <__smakebuf_r+0x46>
 8004612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004616:	059a      	lsls	r2, r3, #22
 8004618:	d4ee      	bmi.n	80045f8 <__smakebuf_r+0x18>
 800461a:	f023 0303 	bic.w	r3, r3, #3
 800461e:	f043 0302 	orr.w	r3, r3, #2
 8004622:	81a3      	strh	r3, [r4, #12]
 8004624:	e7e2      	b.n	80045ec <__smakebuf_r+0xc>
 8004626:	89a3      	ldrh	r3, [r4, #12]
 8004628:	6020      	str	r0, [r4, #0]
 800462a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800462e:	81a3      	strh	r3, [r4, #12]
 8004630:	9b01      	ldr	r3, [sp, #4]
 8004632:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004636:	b15b      	cbz	r3, 8004650 <__smakebuf_r+0x70>
 8004638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800463c:	4630      	mov	r0, r6
 800463e:	f000 f81d 	bl	800467c <_isatty_r>
 8004642:	b128      	cbz	r0, 8004650 <__smakebuf_r+0x70>
 8004644:	89a3      	ldrh	r3, [r4, #12]
 8004646:	f023 0303 	bic.w	r3, r3, #3
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	81a3      	strh	r3, [r4, #12]
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	431d      	orrs	r5, r3
 8004654:	81a5      	strh	r5, [r4, #12]
 8004656:	e7cf      	b.n	80045f8 <__smakebuf_r+0x18>

08004658 <_fstat_r>:
 8004658:	b538      	push	{r3, r4, r5, lr}
 800465a:	4d07      	ldr	r5, [pc, #28]	@ (8004678 <_fstat_r+0x20>)
 800465c:	2300      	movs	r3, #0
 800465e:	4604      	mov	r4, r0
 8004660:	4608      	mov	r0, r1
 8004662:	4611      	mov	r1, r2
 8004664:	602b      	str	r3, [r5, #0]
 8004666:	f7fc fb6c 	bl	8000d42 <_fstat>
 800466a:	1c43      	adds	r3, r0, #1
 800466c:	d102      	bne.n	8004674 <_fstat_r+0x1c>
 800466e:	682b      	ldr	r3, [r5, #0]
 8004670:	b103      	cbz	r3, 8004674 <_fstat_r+0x1c>
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	bd38      	pop	{r3, r4, r5, pc}
 8004676:	bf00      	nop
 8004678:	20000644 	.word	0x20000644

0800467c <_isatty_r>:
 800467c:	b538      	push	{r3, r4, r5, lr}
 800467e:	4d06      	ldr	r5, [pc, #24]	@ (8004698 <_isatty_r+0x1c>)
 8004680:	2300      	movs	r3, #0
 8004682:	4604      	mov	r4, r0
 8004684:	4608      	mov	r0, r1
 8004686:	602b      	str	r3, [r5, #0]
 8004688:	f7fc fb6b 	bl	8000d62 <_isatty>
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	d102      	bne.n	8004696 <_isatty_r+0x1a>
 8004690:	682b      	ldr	r3, [r5, #0]
 8004692:	b103      	cbz	r3, 8004696 <_isatty_r+0x1a>
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	bd38      	pop	{r3, r4, r5, pc}
 8004698:	20000644 	.word	0x20000644

0800469c <_sbrk_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	4d06      	ldr	r5, [pc, #24]	@ (80046b8 <_sbrk_r+0x1c>)
 80046a0:	2300      	movs	r3, #0
 80046a2:	4604      	mov	r4, r0
 80046a4:	4608      	mov	r0, r1
 80046a6:	602b      	str	r3, [r5, #0]
 80046a8:	f7fc fb74 	bl	8000d94 <_sbrk>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d102      	bne.n	80046b6 <_sbrk_r+0x1a>
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	b103      	cbz	r3, 80046b6 <_sbrk_r+0x1a>
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
 80046b8:	20000644 	.word	0x20000644

080046bc <_init>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr

080046c8 <_fini>:
 80046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ca:	bf00      	nop
 80046cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ce:	bc08      	pop	{r3}
 80046d0:	469e      	mov	lr, r3
 80046d2:	4770      	bx	lr
