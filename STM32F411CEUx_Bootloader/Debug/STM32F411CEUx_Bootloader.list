
STM32F411CEUx_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000970  08005698  08005698  00006698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006008  08006008  00008078  2**0
                  CONTENTS
  4 .ARM          00000008  08006008  08006008  00007008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006010  08006010  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006010  08006010  00007010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006014  08006014  00007014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08006018  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  20000078  08006090  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08006090  000086c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de89  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a07  00000000  00000000  00015f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00018938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009fe  00000000  00000000  00019650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f6f  00000000  00000000  0001a04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e55  00000000  00000000  00031fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad4a  00000000  00000000  00042e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cdb5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c3c  00000000  00000000  000cdba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d17dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005680 	.word	0x08005680

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005680 	.word	0x08005680

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f001 f971 	bl	800185c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f863 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f92b 	bl	80007d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000582:	f000 f8ff 	bl	8000784 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000586:	f000 f8c5 	bl	8000714 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	ST7735_Init();
 800058a:	f000 ffe3 	bl	8001554 <ST7735_Init>
	ST7735_FillScreen(ST7735_COLOUR_BLACK);
 800058e:	2000      	movs	r0, #0
 8000590:	f001 f8e4 	bl	800175c <ST7735_FillScreen>
	printf("Bootloader:%d.%d\n",BL_Version[0],BL_Version[1]);
 8000594:	2301      	movs	r3, #1
 8000596:	2201      	movs	r2, #1
 8000598:	4619      	mov	r1, r3
 800059a:	4824      	ldr	r0, [pc, #144]	@ (800062c <main+0xbc>)
 800059c:	f004 fa52 	bl	8004a44 <iprintf>
	/* Check the GPIO for 3 seconds */
	GPIO_PinState OTA_Pin_state;
	uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 80005a0:	f001 f9f8 	bl	8001994 <HAL_GetTick>
 80005a4:	4603      	mov	r3, r0
 80005a6:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 80005aa:	60fb      	str	r3, [r7, #12]
	printf("PRESS BTN FOR FW UPD\n");
 80005ac:	4820      	ldr	r0, [pc, #128]	@ (8000630 <main+0xc0>)
 80005ae:	f004 fab1 	bl	8004b14 <puts>
	do
	{
		OTA_Pin_state = HAL_GPIO_ReadPin( BTN_OTA_GPIO_Port, BTN_OTA_Pin);
 80005b2:	2101      	movs	r1, #1
 80005b4:	481f      	ldr	r0, [pc, #124]	@ (8000634 <main+0xc4>)
 80005b6:	f002 f95d 	bl	8002874 <HAL_GPIO_ReadPin>
 80005ba:	4603      	mov	r3, r0
 80005bc:	72fb      	strb	r3, [r7, #11]
		uint32_t current_tick = HAL_GetTick();
 80005be:	f001 f9e9 	bl	8001994 <HAL_GetTick>
 80005c2:	6078      	str	r0, [r7, #4]

		/* Check the button is pressed or not for 3seconds */
		if( ( OTA_Pin_state != GPIO_PIN_RESET ) || ( current_tick > end_tick ) )
 80005c4:	7afb      	ldrb	r3, [r7, #11]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d104      	bne.n	80005d4 <main+0x64>
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d800      	bhi.n	80005d4 <main+0x64>
	{
 80005d2:	e7ee      	b.n	80005b2 <main+0x42>
			break;
		}
	}while( 1 );

	/*Start the Firmware or Application update */
	if( OTA_Pin_state == GPIO_PIN_SET )
 80005d4:	7afb      	ldrb	r3, [r7, #11]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d120      	bne.n	800061c <main+0xac>
	{
		printf("ENTERED OTA.\n");
 80005da:	4817      	ldr	r0, [pc, #92]	@ (8000638 <main+0xc8>)
 80005dc:	f004 fa9a 	bl	8004b14 <puts>
		HAL_GPIO_WritePin(BOOTMODE_LED_GPIO_Port, BOOTMODE_LED_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2104      	movs	r1, #4
 80005e4:	4813      	ldr	r0, [pc, #76]	@ (8000634 <main+0xc4>)
 80005e6:	f002 f95d 	bl	80028a4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80005ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005ee:	f001 f9dd 	bl	80019ac <HAL_Delay>
		HAL_GPIO_WritePin(BOOTMODE_LED_GPIO_Port, BOOTMODE_LED_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2104      	movs	r1, #4
 80005f6:	480f      	ldr	r0, [pc, #60]	@ (8000634 <main+0xc4>)
 80005f8:	f002 f954 	bl	80028a4 <HAL_GPIO_WritePin>
		//USART1->CR1 |= USART_CR1_RXNEIE;		/* Enable Receive interrupt */
		/* OTA Request. Receive the data from the UART4 and flash */
		if(ota_begin() != ENM_OTA_RET_OK)
 80005fc:	f000 fca4 	bl	8000f48 <ota_begin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d001      	beq.n	800060a <main+0x9a>
		{
			/* Error. Don't process. */
			//  				//printf("OTA Update : ERROR!!! HALT!!!\r\n");
			while(1)
 8000606:	bf00      	nop
 8000608:	e7fd      	b.n	8000606 <main+0x96>
			}
		}
		else
		{
			/* Reset to load the new application */
			printf("UPD SUCCESS.REBOOTING\n");
 800060a:	480c      	ldr	r0, [pc, #48]	@ (800063c <main+0xcc>)
 800060c:	f004 fa82 	bl	8004b14 <puts>
			HAL_Delay(2000);
 8000610:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000614:	f001 f9ca 	bl	80019ac <HAL_Delay>
			HAL_NVIC_SystemReset();
 8000618:	f001 fb39 	bl	8001c8e <HAL_NVIC_SystemReset>
		}
	}

	// Jump to application
	goto_application();
 800061c:	f000 f95c 	bl	80008d8 <goto_application>
	printf("ENTERING BOOT WHILE!!\n");
 8000620:	4807      	ldr	r0, [pc, #28]	@ (8000640 <main+0xd0>)
 8000622:	f004 fa77 	bl	8004b14 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000626:	bf00      	nop
 8000628:	e7fd      	b.n	8000626 <main+0xb6>
 800062a:	bf00      	nop
 800062c:	08005698 	.word	0x08005698
 8000630:	080056ac 	.word	0x080056ac
 8000634:	40020000 	.word	0x40020000
 8000638:	080056c4 	.word	0x080056c4
 800063c:	080056d4 	.word	0x080056d4
 8000640:	080056ec 	.word	0x080056ec

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	@ 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fb3e 	bl	8004cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b27      	ldr	r3, [pc, #156]	@ (800070c <SystemClock_Config+0xc8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a26      	ldr	r2, [pc, #152]	@ (800070c <SystemClock_Config+0xc8>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <SystemClock_Config+0xc8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a20      	ldr	r2, [pc, #128]	@ (8000710 <SystemClock_Config+0xcc>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <SystemClock_Config+0xcc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006b4:	2319      	movs	r3, #25
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006b8:	23c0      	movs	r3, #192	@ 0xc0
 80006ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 f905 	bl	80028d8 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f94a 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2103      	movs	r1, #3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fb67 	bl	8002dc8 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000700:	f000 f934 	bl	800096c <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3750      	adds	r7, #80	@ 0x50
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000718:	4b18      	ldr	r3, [pc, #96]	@ (800077c <MX_SPI1_Init+0x68>)
 800071a:	4a19      	ldr	r2, [pc, #100]	@ (8000780 <MX_SPI1_Init+0x6c>)
 800071c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071e:	4b17      	ldr	r3, [pc, #92]	@ (800077c <MX_SPI1_Init+0x68>)
 8000720:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000724:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <MX_SPI1_Init+0x68>)
 8000728:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800072c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800072e:	4b13      	ldr	r3, [pc, #76]	@ (800077c <MX_SPI1_Init+0x68>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_SPI1_Init+0x68>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_SPI1_Init+0x68>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_SPI1_Init+0x68>)
 8000742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000746:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_SPI1_Init+0x68>)
 800074a:	2208      	movs	r2, #8
 800074c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_SPI1_Init+0x68>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_SPI1_Init+0x68>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_SPI1_Init+0x68>)
 800075c:	2200      	movs	r2, #0
 800075e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_SPI1_Init+0x68>)
 8000762:	220a      	movs	r2, #10
 8000764:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_SPI1_Init+0x68>)
 8000768:	f002 fddc 	bl	8003324 <HAL_SPI_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000772:	f000 f8fb 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000094 	.word	0x20000094
 8000780:	40013000 	.word	0x40013000

08000784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000788:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <MX_USART1_UART_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 8000790:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007bc:	f003 f882 	bl	80038c4 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007c6:	f000 f8d1 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000ec 	.word	0x200000ec
 80007d4:	40011000 	.word	0x40011000

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	@ 0x28
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b36      	ldr	r3, [pc, #216]	@ (80008cc <MX_GPIO_Init+0xf4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a35      	ldr	r2, [pc, #212]	@ (80008cc <MX_GPIO_Init+0xf4>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b33      	ldr	r3, [pc, #204]	@ (80008cc <MX_GPIO_Init+0xf4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b2f      	ldr	r3, [pc, #188]	@ (80008cc <MX_GPIO_Init+0xf4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a2e      	ldr	r2, [pc, #184]	@ (80008cc <MX_GPIO_Init+0xf4>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b2c      	ldr	r3, [pc, #176]	@ (80008cc <MX_GPIO_Init+0xf4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b28      	ldr	r3, [pc, #160]	@ (80008cc <MX_GPIO_Init+0xf4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a27      	ldr	r2, [pc, #156]	@ (80008cc <MX_GPIO_Init+0xf4>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b25      	ldr	r3, [pc, #148]	@ (80008cc <MX_GPIO_Init+0xf4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <MX_GPIO_Init+0xf4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a20      	ldr	r2, [pc, #128]	@ (80008cc <MX_GPIO_Init+0xf4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <MX_GPIO_Init+0xf4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, APPMODE_LED_Pin|BOOTMODE_LED_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2106      	movs	r1, #6
 8000862:	481b      	ldr	r0, [pc, #108]	@ (80008d0 <MX_GPIO_Init+0xf8>)
 8000864:	f002 f81e 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_DC_Pin|ST7735_RES_Pin|ST7735_CS_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2107      	movs	r1, #7
 800086c:	4819      	ldr	r0, [pc, #100]	@ (80008d4 <MX_GPIO_Init+0xfc>)
 800086e:	f002 f819 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_OTA_Pin */
  GPIO_InitStruct.Pin = BTN_OTA_Pin;
 8000872:	2301      	movs	r3, #1
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_OTA_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4812      	ldr	r0, [pc, #72]	@ (80008d0 <MX_GPIO_Init+0xf8>)
 8000886:	f001 fd8d 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : APPMODE_LED_Pin BOOTMODE_LED_Pin */
  GPIO_InitStruct.Pin = APPMODE_LED_Pin|BOOTMODE_LED_Pin;
 800088a:	2306      	movs	r3, #6
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	480b      	ldr	r0, [pc, #44]	@ (80008d0 <MX_GPIO_Init+0xf8>)
 80008a2:	f001 fd7f 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_RES_Pin ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_RES_Pin|ST7735_CS_Pin;
 80008a6:	2307      	movs	r3, #7
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_GPIO_Init+0xfc>)
 80008be:	f001 fd71 	bl	80023a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	@ 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40020400 	.word	0x40020400

080008d8 <goto_application>:
/**
  * @brief Jump to application from the Bootloader
  * @retval None
  */
static void goto_application(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
	printf("ENTERING APPLICATION\n");
 80008de:	4815      	ldr	r0, [pc, #84]	@ (8000934 <goto_application+0x5c>)
 80008e0:	f004 f918 	bl	8004b14 <puts>

  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (OTA_APP_FLASH_ADDR + 4U)));
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <goto_application+0x60>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	607b      	str	r3, [r7, #4]

  // Turn OFF the Green Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF
 80008ea:	2200      	movs	r2, #0
 80008ec:	2101      	movs	r1, #1
 80008ee:	4813      	ldr	r0, [pc, #76]	@ (800093c <goto_application+0x64>)
 80008f0:	f001 ffd8 	bl	80028a4 <HAL_GPIO_WritePin>

  /* Reset the Clock */
  HAL_RCC_DeInit();
 80008f4:	f002 fc48 	bl	8003188 <HAL_RCC_DeInit>
  HAL_DeInit();
 80008f8:	f000 ffd2 	bl	80018a0 <HAL_DeInit>
  HAL_UART_DeInit(&huart1);
 80008fc:	4810      	ldr	r0, [pc, #64]	@ (8000940 <goto_application+0x68>)
 80008fe:	f003 f831 	bl	8003964 <HAL_UART_DeInit>
  HAL_SPI_DeInit(&hspi1);
 8000902:	4810      	ldr	r0, [pc, #64]	@ (8000944 <goto_application+0x6c>)
 8000904:	f002 fd97 	bl	8003436 <HAL_SPI_DeInit>
  __set_MSP(*(volatile uint32_t*) OTA_APP_FLASH_ADDR);
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <goto_application+0x70>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	f383 8808 	msr	MSP, r3
}
 8000914:	bf00      	nop
  SysTick->CTRL = 0;
 8000916:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <goto_application+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 800091c:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <goto_application+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8000922:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <goto_application+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]

  /* Jump to application */
  app_reset_handler();    //call the app reset handler
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4798      	blx	r3
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	08005704 	.word	0x08005704
 8000938:	08020004 	.word	0x08020004
 800093c:	40020400 	.word	0x40020400
 8000940:	200000ec 	.word	0x200000ec
 8000944:	20000094 	.word	0x20000094
 8000948:	08020000 	.word	0x08020000
 800094c:	e000e010 	.word	0xe000e010

08000950 <_write>:
	return len;
}
#else

int _write(int file, char *ptr, int len)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
	ST7735_WriteDebugString(ptr);
 800095c:	68b8      	ldr	r0, [r7, #8]
 800095e:	f000 ff0f 	bl	8001780 <ST7735_WriteDebugString>

	return len;
 8000962:	687b      	ldr	r3, [r7, #4]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <Error_Handler+0x8>

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	@ (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098c:	6453      	str	r3, [r2, #68]	@ 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	@ (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <HAL_SPI_MspInit+0x84>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12b      	bne.n	8000a42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <HAL_SPI_MspInit+0x88>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f2:	4a17      	ldr	r2, [pc, #92]	@ (8000a50 <HAL_SPI_MspInit+0x88>)
 80009f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fa:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <HAL_SPI_MspInit+0x88>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <HAL_SPI_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a10      	ldr	r2, [pc, #64]	@ (8000a50 <HAL_SPI_MspInit+0x88>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <HAL_SPI_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a22:	23a0      	movs	r3, #160	@ 0xa0
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a32:	2305      	movs	r3, #5
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <HAL_SPI_MspInit+0x8c>)
 8000a3e:	f001 fcb1 	bl	80023a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	@ 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40013000 	.word	0x40013000
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000

08000a58 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a08      	ldr	r2, [pc, #32]	@ (8000a88 <HAL_SPI_MspDeInit+0x30>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d109      	bne.n	8000a7e <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <HAL_SPI_MspDeInit+0x34>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6e:	4a07      	ldr	r2, [pc, #28]	@ (8000a8c <HAL_SPI_MspDeInit+0x34>)
 8000a70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a74:	6453      	str	r3, [r2, #68]	@ 0x44

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 8000a76:	21a0      	movs	r1, #160	@ 0xa0
 8000a78:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <HAL_SPI_MspDeInit+0x38>)
 8000a7a:	f001 fe17 	bl	80026ac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40013000 	.word	0x40013000
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b28 <HAL_UART_MspInit+0x94>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d134      	bne.n	8000b20 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	4a1b      	ldr	r2, [pc, #108]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000ac0:	f043 0310 	orr.w	r3, r3, #16
 8000ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac6:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	f003 0310 	and.w	r3, r3, #16
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a14      	ldr	r2, [pc, #80]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b00:	2307      	movs	r3, #7
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4809      	ldr	r0, [pc, #36]	@ (8000b30 <HAL_UART_MspInit+0x9c>)
 8000b0c:	f001 fc4a 	bl	80023a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2025      	movs	r0, #37	@ 0x25
 8000b16:	f001 f882 	bl	8001c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b1a:	2025      	movs	r0, #37	@ 0x25
 8000b1c:	f001 f89b 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	@ 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40011000 	.word	0x40011000
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000

08000b34 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <HAL_UART_MspDeInit+0x38>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d10d      	bne.n	8000b62 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000b46:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <HAL_UART_MspDeInit+0x3c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	4a09      	ldr	r2, [pc, #36]	@ (8000b70 <HAL_UART_MspDeInit+0x3c>)
 8000b4c:	f023 0310 	bic.w	r3, r3, #16
 8000b50:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000b52:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000b56:	4807      	ldr	r0, [pc, #28]	@ (8000b74 <HAL_UART_MspDeInit+0x40>)
 8000b58:	f001 fda8 	bl	80026ac <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000b5c:	2025      	movs	r0, #37	@ 0x25
 8000b5e:	f001 f888 	bl	8001c72 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40011000 	.word	0x40011000
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bce:	f000 fecd 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bdc:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <USART1_IRQHandler+0x10>)
 8000bde:	f002 fef3 	bl	80039c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000ec 	.word	0x200000ec

08000bec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	e00a      	b.n	8000c14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bfe:	f3af 8000 	nop.w
 8000c02:	4601      	mov	r1, r0
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	1c5a      	adds	r2, r3, #1
 8000c08:	60ba      	str	r2, [r7, #8]
 8000c0a:	b2ca      	uxtb	r2, r1
 8000c0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbf0      	blt.n	8000bfe <_read+0x12>
  }

  return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_isatty>:

int _isatty(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	@ (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	@ (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	@ (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d207      	bcs.n	8000cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc0:	f004 f866 	bl	8004d90 <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	e009      	b.n	8000ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a05      	ldr	r2, [pc, #20]	@ (8000cf4 <_sbrk+0x64>)
 8000ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20020000 	.word	0x20020000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	20000540 	.word	0x20000540
 8000cf8:	200006c0 	.word	0x200006c0

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d24:	f7ff ffea 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d28:	480c      	ldr	r0, [pc, #48]	@ (8000d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d2a:	490d      	ldr	r1, [pc, #52]	@ (8000d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d40:	4c0a      	ldr	r4, [pc, #40]	@ (8000d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f004 f825 	bl	8004d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d52:	f7ff fc0d 	bl	8000570 <main>
  bx  lr    
 8000d56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d64:	08006018 	.word	0x08006018
  ldr r2, =_sbss
 8000d68:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d6c:	200006c0 	.word	0x200006c0

08000d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC_IRQHandler>
	...

08000d74 <crc32b>:
instructions, where n is the number of bytes in the input message. It
should be doable in 4 + 61n instructions.
   If the inner loop is strung out (approx. 5*8 = 40 instructions),
it would take about 6 + 46n instructions. */

uint32_t crc32b(unsigned char *message,uint16_t usDataLen) {
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	807b      	strh	r3, [r7, #2]
   uint16_t i;
   uint16_t j;
   uint32_t byte, crc, mask;

   i = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	82fb      	strh	r3, [r7, #22]
   crc = 0xFFFFFFFF;
 8000d84:	f04f 33ff 	mov.w	r3, #4294967295
 8000d88:	613b      	str	r3, [r7, #16]
    while (usDataLen--) /* pass through message buffer  */
 8000d8a:	e020      	b.n	8000dce <crc32b+0x5a>
    {
      byte = message[i];            // Get next byte.
 8000d8c:	8afb      	ldrh	r3, [r7, #22]
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
      crc = crc ^ byte;
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4053      	eors	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
      for (j = 0; j <=7; j++) {    // Do eight times.
 8000d9e:	2300      	movs	r3, #0
 8000da0:	82bb      	strh	r3, [r7, #20]
 8000da2:	e00e      	b.n	8000dc2 <crc32b+0x4e>
         mask = -(crc & 1);
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	425b      	negs	r3, r3
 8000dac:	60bb      	str	r3, [r7, #8]
         crc = (crc >> 1) ^ (0xEDB88320 & mask);
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	085a      	lsrs	r2, r3, #1
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <crc32b+0x74>)
 8000db6:	400b      	ands	r3, r1
 8000db8:	4053      	eors	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
      for (j = 0; j <=7; j++) {    // Do eight times.
 8000dbc:	8abb      	ldrh	r3, [r7, #20]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	82bb      	strh	r3, [r7, #20]
 8000dc2:	8abb      	ldrh	r3, [r7, #20]
 8000dc4:	2b07      	cmp	r3, #7
 8000dc6:	d9ed      	bls.n	8000da4 <crc32b+0x30>
      }
      i = i + 1;
 8000dc8:	8afb      	ldrh	r3, [r7, #22]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	82fb      	strh	r3, [r7, #22]
    while (usDataLen--) /* pass through message buffer  */
 8000dce:	887b      	ldrh	r3, [r7, #2]
 8000dd0:	1e5a      	subs	r2, r3, #1
 8000dd2:	807a      	strh	r2, [r7, #2]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1d9      	bne.n	8000d8c <crc32b+0x18>
   }
   return ~crc;
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	43db      	mvns	r3, r3
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	371c      	adds	r7, #28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	edb88320 	.word	0xedb88320

08000dec <receive_data>:
static ENM_OTA_RET_ ota_process_data( uint8_t *buf, uint16_t len );
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,uint16_t data_len, bool is_first_block );
uint32_t crc32b(unsigned char *message,uint16_t usDataLen);

uint16_t receive_data()		//return the length of packet
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
	uint16_t data_len=0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	807b      	strh	r3, [r7, #2]
	uint16_t index=0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	80fb      	strh	r3, [r7, #6]
	uint16_t i=0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	80bb      	strh	r3, [r7, #4]
	do	//need timeout management.
	{
		/*SOF - 1BYTE   */
		while( !( USART1->SR & USART_SR_RXNE )) {};
 8000dfe:	bf00      	nop
 8000e00:	4b4f      	ldr	r3, [pc, #316]	@ (8000f40 <receive_data+0x154>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0320 	and.w	r3, r3, #32
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0f9      	beq.n	8000e00 <receive_data+0x14>
		Rx_Buffer[index++] = USART1->DR;
 8000e0c:	4b4c      	ldr	r3, [pc, #304]	@ (8000f40 <receive_data+0x154>)
 8000e0e:	6859      	ldr	r1, [r3, #4]
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	80fa      	strh	r2, [r7, #6]
 8000e16:	461a      	mov	r2, r3
 8000e18:	b2c9      	uxtb	r1, r1
 8000e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f44 <receive_data+0x158>)
 8000e1c:	5499      	strb	r1, [r3, r2]
		if(Rx_Buffer[0] != DEF_OTA_SOF)
 8000e1e:	4b49      	ldr	r3, [pc, #292]	@ (8000f44 <receive_data+0x158>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2baa      	cmp	r3, #170	@ 0xaa
 8000e24:	d002      	beq.n	8000e2c <receive_data+0x40>
		{
			index =0;/* SOF error */
 8000e26:	2300      	movs	r3, #0
 8000e28:	80fb      	strh	r3, [r7, #6]
			break;
 8000e2a:	e082      	b.n	8000f32 <receive_data+0x146>
		}

		/* Packet Type - 1 BYTE */
		while( !( USART1->SR & USART_SR_RXNE )) {};
 8000e2c:	bf00      	nop
 8000e2e:	4b44      	ldr	r3, [pc, #272]	@ (8000f40 <receive_data+0x154>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0320 	and.w	r3, r3, #32
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f9      	beq.n	8000e2e <receive_data+0x42>
		Rx_Buffer[index++] = USART1->DR;
 8000e3a:	4b41      	ldr	r3, [pc, #260]	@ (8000f40 <receive_data+0x154>)
 8000e3c:	6859      	ldr	r1, [r3, #4]
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	80fa      	strh	r2, [r7, #6]
 8000e44:	461a      	mov	r2, r3
 8000e46:	b2c9      	uxtb	r1, r1
 8000e48:	4b3e      	ldr	r3, [pc, #248]	@ (8000f44 <receive_data+0x158>)
 8000e4a:	5499      	strb	r1, [r3, r2]

		/* PACKET LENGTH - 2 BYTE*/
		for(i =1; i<=2;i++)
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	80bb      	strh	r3, [r7, #4]
 8000e50:	e012      	b.n	8000e78 <receive_data+0x8c>
		{

			while( !( USART1->SR & USART_SR_RXNE )) {};
 8000e52:	bf00      	nop
 8000e54:	4b3a      	ldr	r3, [pc, #232]	@ (8000f40 <receive_data+0x154>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0320 	and.w	r3, r3, #32
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0f9      	beq.n	8000e54 <receive_data+0x68>
			Rx_Buffer[index++] = USART1->DR;
 8000e60:	4b37      	ldr	r3, [pc, #220]	@ (8000f40 <receive_data+0x154>)
 8000e62:	6859      	ldr	r1, [r3, #4]
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	80fa      	strh	r2, [r7, #6]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	b2c9      	uxtb	r1, r1
 8000e6e:	4b35      	ldr	r3, [pc, #212]	@ (8000f44 <receive_data+0x158>)
 8000e70:	5499      	strb	r1, [r3, r2]
		for(i =1; i<=2;i++)
 8000e72:	88bb      	ldrh	r3, [r7, #4]
 8000e74:	3301      	adds	r3, #1
 8000e76:	80bb      	strh	r3, [r7, #4]
 8000e78:	88bb      	ldrh	r3, [r7, #4]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d9e9      	bls.n	8000e52 <receive_data+0x66>

		}
		data_len = (Rx_Buffer[index-1] << 8) | (Rx_Buffer[index-2]);	//bitwise OR
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	4a30      	ldr	r2, [pc, #192]	@ (8000f44 <receive_data+0x158>)
 8000e84:	5cd3      	ldrb	r3, [r2, r3]
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	b21a      	sxth	r2, r3
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	3b02      	subs	r3, #2
 8000e8e:	492d      	ldr	r1, [pc, #180]	@ (8000f44 <receive_data+0x158>)
 8000e90:	5ccb      	ldrb	r3, [r1, r3]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	807b      	strh	r3, [r7, #2]

		/* DATA or COMMAND */
		for(i =1; i<=data_len;i++)
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	80bb      	strh	r3, [r7, #4]
 8000e9e:	e012      	b.n	8000ec6 <receive_data+0xda>
		{
			while( !( USART1->SR & USART_SR_RXNE )) {};
 8000ea0:	bf00      	nop
 8000ea2:	4b27      	ldr	r3, [pc, #156]	@ (8000f40 <receive_data+0x154>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0320 	and.w	r3, r3, #32
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f9      	beq.n	8000ea2 <receive_data+0xb6>
			Rx_Buffer[index++] = USART1->DR;
 8000eae:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <receive_data+0x154>)
 8000eb0:	6859      	ldr	r1, [r3, #4]
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	1c5a      	adds	r2, r3, #1
 8000eb6:	80fa      	strh	r2, [r7, #6]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	b2c9      	uxtb	r1, r1
 8000ebc:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <receive_data+0x158>)
 8000ebe:	5499      	strb	r1, [r3, r2]
		for(i =1; i<=data_len;i++)
 8000ec0:	88bb      	ldrh	r3, [r7, #4]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	80bb      	strh	r3, [r7, #4]
 8000ec6:	88ba      	ldrh	r2, [r7, #4]
 8000ec8:	887b      	ldrh	r3, [r7, #2]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d9e8      	bls.n	8000ea0 <receive_data+0xb4>
		}

		/* CRC 4 BYTES*/
		for(i =1; i<=4;i++)
 8000ece:	2301      	movs	r3, #1
 8000ed0:	80bb      	strh	r3, [r7, #4]
 8000ed2:	e012      	b.n	8000efa <receive_data+0x10e>
		{
			while( !( USART1->SR & USART_SR_RXNE )) {};
 8000ed4:	bf00      	nop
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <receive_data+0x154>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0320 	and.w	r3, r3, #32
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f9      	beq.n	8000ed6 <receive_data+0xea>
			Rx_Buffer[index++] = USART1->DR;
 8000ee2:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <receive_data+0x154>)
 8000ee4:	6859      	ldr	r1, [r3, #4]
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	1c5a      	adds	r2, r3, #1
 8000eea:	80fa      	strh	r2, [r7, #6]
 8000eec:	461a      	mov	r2, r3
 8000eee:	b2c9      	uxtb	r1, r1
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <receive_data+0x158>)
 8000ef2:	5499      	strb	r1, [r3, r2]
		for(i =1; i<=4;i++)
 8000ef4:	88bb      	ldrh	r3, [r7, #4]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	80bb      	strh	r3, [r7, #4]
 8000efa:	88bb      	ldrh	r3, [r7, #4]
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	d9e9      	bls.n	8000ed4 <receive_data+0xe8>
		}

		/* EOF */
		while( !( USART1->SR & USART_SR_RXNE )) {};
 8000f00:	bf00      	nop
 8000f02:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <receive_data+0x154>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0320 	and.w	r3, r3, #32
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f9      	beq.n	8000f02 <receive_data+0x116>
		Rx_Buffer[index++] = USART1->DR;
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <receive_data+0x154>)
 8000f10:	6859      	ldr	r1, [r3, #4]
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	80fa      	strh	r2, [r7, #6]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	b2c9      	uxtb	r1, r1
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <receive_data+0x158>)
 8000f1e:	5499      	strb	r1, [r3, r2]
		if(Rx_Buffer[index-1] != DEF_OTA_EOF)
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	4a07      	ldr	r2, [pc, #28]	@ (8000f44 <receive_data+0x158>)
 8000f26:	5cd3      	ldrb	r3, [r2, r3]
 8000f28:	2bbb      	cmp	r3, #187	@ 0xbb
 8000f2a:	d002      	beq.n	8000f32 <receive_data+0x146>
		{
			index =0;/* EOF error */
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	80fb      	strh	r3, [r7, #6]
			break;
 8000f30:	bf00      	nop
		}
	}while (0);
	return index;
 8000f32:	88fb      	ldrh	r3, [r7, #6]

}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	40011000 	.word	0x40011000
 8000f44:	20000134 	.word	0x20000134

08000f48 <ota_begin>:

ENM_OTA_RET_ ota_begin(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
	uint32_t crcvalue=0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
	ENM_OTA_RET_ ret = ENM_OTA_RET_ERR;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]

	//clear the buffer
	uint16_t PacketLength;

	/* Reset the variables */
	ota_fw_total_size    = 0u;
 8000f56:	4b33      	ldr	r3, [pc, #204]	@ (8001024 <ota_begin+0xdc>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
	ota_fw_received_size = 0u;
 8000f5c:	4b32      	ldr	r3, [pc, #200]	@ (8001028 <ota_begin+0xe0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
	ota_fw_crc           = 0u;
 8000f62:	4b32      	ldr	r3, [pc, #200]	@ (800102c <ota_begin+0xe4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
	ota_state = ENM_OTA_STATE_START;
 8000f68:	4b31      	ldr	r3, [pc, #196]	@ (8001030 <ota_begin+0xe8>)
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	701a      	strb	r2, [r3, #0]
	do
	{
		memset( Rx_Buffer, 0, DEF_OTA_PACKET_MAX_SIZE );
 8000f6e:	f240 4209 	movw	r2, #1033	@ 0x409
 8000f72:	2100      	movs	r1, #0
 8000f74:	482f      	ldr	r0, [pc, #188]	@ (8001034 <ota_begin+0xec>)
 8000f76:	f003 fead 	bl	8004cd4 <memset>
		PacketLength=receive_data();
 8000f7a:	f7ff ff37 	bl	8000dec <receive_data>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80fb      	strh	r3, [r7, #6]
		if (PacketLength <= 0)
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d105      	bne.n	8000f94 <ota_begin+0x4c>
		{
			ret=ENM_OTA_RET_ERR;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
			printf("RECEIVE ERR!!\n");
 8000f8c:	482a      	ldr	r0, [pc, #168]	@ (8001038 <ota_begin+0xf0>)
 8000f8e:	f003 fdc1 	bl	8004b14 <puts>
			break;	//come out of while loop
 8000f92:	e042      	b.n	800101a <ota_begin+0xd2>
		}
		uint32_t pktcrc = (Rx_Buffer[PacketLength-2]<<24) |
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	3b02      	subs	r3, #2
 8000f98:	4a26      	ldr	r2, [pc, #152]	@ (8001034 <ota_begin+0xec>)
 8000f9a:	5cd3      	ldrb	r3, [r2, r3]
 8000f9c:	061a      	lsls	r2, r3, #24
							(Rx_Buffer[PacketLength-3]<<16) |
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	4924      	ldr	r1, [pc, #144]	@ (8001034 <ota_begin+0xec>)
 8000fa4:	5ccb      	ldrb	r3, [r1, r3]
 8000fa6:	041b      	lsls	r3, r3, #16
		uint32_t pktcrc = (Rx_Buffer[PacketLength-2]<<24) |
 8000fa8:	431a      	orrs	r2, r3
							(Rx_Buffer[PacketLength-4]<<8) |
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	3b04      	subs	r3, #4
 8000fae:	4921      	ldr	r1, [pc, #132]	@ (8001034 <ota_begin+0xec>)
 8000fb0:	5ccb      	ldrb	r3, [r1, r3]
 8000fb2:	021b      	lsls	r3, r3, #8
							(Rx_Buffer[PacketLength-3]<<16) |
 8000fb4:	4313      	orrs	r3, r2
							(Rx_Buffer[PacketLength-5]);
 8000fb6:	88fa      	ldrh	r2, [r7, #6]
 8000fb8:	3a05      	subs	r2, #5
 8000fba:	491e      	ldr	r1, [pc, #120]	@ (8001034 <ota_begin+0xec>)
 8000fbc:	5c8a      	ldrb	r2, [r1, r2]
							(Rx_Buffer[PacketLength-4]<<8) |
 8000fbe:	4313      	orrs	r3, r2
		uint32_t pktcrc = (Rx_Buffer[PacketLength-2]<<24) |
 8000fc0:	603b      	str	r3, [r7, #0]
		crcvalue= crc32b(Rx_Buffer,PacketLength-5);
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	3b05      	subs	r3, #5
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	4619      	mov	r1, r3
 8000fca:	481a      	ldr	r0, [pc, #104]	@ (8001034 <ota_begin+0xec>)
 8000fcc:	f7ff fed2 	bl	8000d74 <crc32b>
 8000fd0:	60b8      	str	r0, [r7, #8]
		if (crcvalue != pktcrc)
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d005      	beq.n	8000fe6 <ota_begin+0x9e>
		{
			printf("CRC error\n");
 8000fda:	4818      	ldr	r0, [pc, #96]	@ (800103c <ota_begin+0xf4>)
 8000fdc:	f003 fd9a 	bl	8004b14 <puts>
			ret= ENM_OTA_RET_ERR;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
			break;
 8000fe4:	e019      	b.n	800101a <ota_begin+0xd2>
		}

		//Else Proceed further
		ret =ota_process_data(Rx_Buffer, PacketLength);
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4812      	ldr	r0, [pc, #72]	@ (8001034 <ota_begin+0xec>)
 8000fec:	f000 f828 	bl	8001040 <ota_process_data>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	73fb      	strb	r3, [r7, #15]
		if(ret == ENM_OTA_RET_OK)
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d105      	bne.n	8001006 <ota_begin+0xbe>
		{
			ota_send_resp(DEF_OTA_ACK);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 f900 	bl	8001200 <ota_send_resp>
			ret = ENM_OTA_RET_OK;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	e005      	b.n	8001012 <ota_begin+0xca>
		}
		else
		{
			ota_send_resp(DEF_OTA_NACK);
 8001006:	2001      	movs	r0, #1
 8001008:	f000 f8fa 	bl	8001200 <ota_send_resp>
			ret = ENM_OTA_RET_ERR;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
			break;
 8001010:	e003      	b.n	800101a <ota_begin+0xd2>
		}
	}while(ota_state != ENM_OTA_STATE_IDLE);
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <ota_begin+0xe8>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d1a9      	bne.n	8000f6e <ota_begin+0x26>
	return ret;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000544 	.word	0x20000544
 8001028:	2000054c 	.word	0x2000054c
 800102c:	20000548 	.word	0x20000548
 8001030:	20000004 	.word	0x20000004
 8001034:	20000134 	.word	0x20000134
 8001038:	0800571c 	.word	0x0800571c
 800103c:	0800572c 	.word	0x0800572c

08001040 <ota_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static ENM_OTA_RET_ ota_process_data( uint8_t *buf, uint16_t len )
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
//	uint32_t crcvalue=0;
	ENM_OTA_RET_ ret = ENM_OTA_RET_ERR;
 800104c:	2300      	movs	r3, #0
 800104e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do
  {
    if( ( buf == NULL ) || ( len == 0u) )
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <ota_process_data+0x1e>
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d103      	bne.n	8001066 <ota_process_data+0x26>
    {
    	printf("BUFFER EMPTY!!\n");
 800105e:	485c      	ldr	r0, [pc, #368]	@ (80011d0 <ota_process_data+0x190>)
 8001060:	f003 fd58 	bl	8004b14 <puts>
    	break;
 8001064:	e0ad      	b.n	80011c2 <ota_process_data+0x182>
    }

    //Check we received OTA Abort command
    STU_OTA_COMMAND_ *cmd = (STU_OTA_COMMAND_*)buf;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	623b      	str	r3, [r7, #32]
    if( (cmd->packet_type == ENM_OTA_PKT_TYP_CMD) &&
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	785b      	ldrb	r3, [r3, #1]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d107      	bne.n	8001082 <ota_process_data+0x42>
    		cmd->cmd == ENM_OTA_CMD_ABORT )
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	791b      	ldrb	r3, [r3, #4]
    if( (cmd->packet_type == ENM_OTA_PKT_TYP_CMD) &&
 8001076:	2b03      	cmp	r3, #3
 8001078:	d103      	bne.n	8001082 <ota_process_data+0x42>
    {
    	//received OTA Abort command. Stop the process
    	printf("ABORT CMD!!\n");
 800107a:	4856      	ldr	r0, [pc, #344]	@ (80011d4 <ota_process_data+0x194>)
 800107c:	f003 fd4a 	bl	8004b14 <puts>
    	break;
 8001080:	e09f      	b.n	80011c2 <ota_process_data+0x182>
    }

    switch( ota_state )
 8001082:	4b55      	ldr	r3, [pc, #340]	@ (80011d8 <ota_process_data+0x198>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	3b01      	subs	r3, #1
 8001088:	2b04      	cmp	r3, #4
 800108a:	f200 808f 	bhi.w	80011ac <ota_process_data+0x16c>
 800108e:	a201      	add	r2, pc, #4	@ (adr r2, 8001094 <ota_process_data+0x54>)
 8001090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001094:	080010a9 	.word	0x080010a9
 8001098:	080010b7 	.word	0x080010b7
 800109c:	080010df 	.word	0x080010df
 80010a0:	08001115 	.word	0x08001115
 80010a4:	08001185 	.word	0x08001185
    {
      case ENM_OTA_STATE_IDLE:
      {
    	  printf("STATE=IDLE!!\n");
 80010a8:	484c      	ldr	r0, [pc, #304]	@ (80011dc <ota_process_data+0x19c>)
 80010aa:	f003 fd33 	bl	8004b14 <puts>
    	  ret = ENM_OTA_RET_OK;
 80010ae:	2301      	movs	r3, #1
 80010b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80010b4:	e085      	b.n	80011c2 <ota_process_data+0x182>

      case ENM_OTA_STATE_START:
      {
    	  STU_OTA_COMMAND_ *cmd = (STU_OTA_COMMAND_*)buf;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]
//    	  crcvalue= crc32b(buf,len-5);
//    	  if (crcvalue != cmd->crc)
//    	  {
//    		  ret= ENM_OTA_RET_ERR;
//    	  }
        if( (cmd->packet_type == ENM_OTA_PKT_TYP_CMD) &&
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	785b      	ldrb	r3, [r3, #1]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d178      	bne.n	80011b4 <ota_process_data+0x174>
        		(cmd->cmd == ENM_OTA_CMD_START) )
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	791b      	ldrb	r3, [r3, #4]
        if( (cmd->packet_type == ENM_OTA_PKT_TYP_CMD) &&
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d174      	bne.n	80011b4 <ota_process_data+0x174>
        {
        	printf("STATE=START!!\n");
 80010ca:	4845      	ldr	r0, [pc, #276]	@ (80011e0 <ota_process_data+0x1a0>)
 80010cc:	f003 fd22 	bl	8004b14 <puts>
        	ota_state = ENM_OTA_STATE_HEADER;
 80010d0:	4b41      	ldr	r3, [pc, #260]	@ (80011d8 <ota_process_data+0x198>)
 80010d2:	2203      	movs	r2, #3
 80010d4:	701a      	strb	r2, [r3, #0]
        	ret = ENM_OTA_RET_OK;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
      }
      break;
 80010dc:	e06a      	b.n	80011b4 <ota_process_data+0x174>

      case ENM_OTA_STATE_HEADER:
      {
        STU_OTA_HEADER_ *header = (STU_OTA_HEADER_*)buf;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	613b      	str	r3, [r7, #16]
        if( header->packet_type == ENM_OTA_PKT_TYP_HEADER )
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	785b      	ldrb	r3, [r3, #1]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d166      	bne.n	80011b8 <ota_process_data+0x178>
//        	{
//        		ret= ENM_OTA_RET_ERR;
//        		break;
//        	}
        	/* Store FW details */
        	ota_fw_total_size = header->meta_data.package_size;
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4a3d      	ldr	r2, [pc, #244]	@ (80011e4 <ota_process_data+0x1a4>)
 80010f0:	6013      	str	r3, [r2, #0]
        	ota_fw_crc        = header->meta_data.package_crc;
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	4a3c      	ldr	r2, [pc, #240]	@ (80011e8 <ota_process_data+0x1a8>)
 80010f8:	6013      	str	r3, [r2, #0]
        	printf("FW size= %ld\n",ota_fw_total_size);
 80010fa:	4b3a      	ldr	r3, [pc, #232]	@ (80011e4 <ota_process_data+0x1a4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4619      	mov	r1, r3
 8001100:	483a      	ldr	r0, [pc, #232]	@ (80011ec <ota_process_data+0x1ac>)
 8001102:	f003 fc9f 	bl	8004a44 <iprintf>
        	ota_state = ENM_OTA_STATE_DATA;
 8001106:	4b34      	ldr	r3, [pc, #208]	@ (80011d8 <ota_process_data+0x198>)
 8001108:	2204      	movs	r2, #4
 800110a:	701a      	strb	r2, [r3, #0]
        	ret = ENM_OTA_RET_OK;
 800110c:	2301      	movs	r3, #1
 800110e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
      }
      break;
 8001112:	e051      	b.n	80011b8 <ota_process_data+0x178>

      case ENM_OTA_STATE_DATA:
      {
        STU_OTA_DATA_     *data     = (STU_OTA_DATA_*)buf;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        uint16_t          data_len = data->data_len;
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	789a      	ldrb	r2, [r3, #2]
 800111c:	78db      	ldrb	r3, [r3, #3]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	4313      	orrs	r3, r2
 8001122:	82fb      	strh	r3, [r7, #22]
        HAL_StatusTypeDef ex;

        printf("OTA STATE=DATA\n");
 8001124:	4832      	ldr	r0, [pc, #200]	@ (80011f0 <ota_process_data+0x1b0>)
 8001126:	f003 fcf5 	bl	8004b14 <puts>
        if( data->packet_type == ENM_OTA_PKT_TYP_DATA )
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	785b      	ldrb	r3, [r3, #1]
 800112e:	2b02      	cmp	r3, #2
 8001130:	d144      	bne.n	80011bc <ota_process_data+0x17c>
//        	{
//        		ret= ENM_OTA_RET_ERR;
//        		break;
//        	}
          /* write the chunk to the Flash (App location) */
          ex = write_data_to_flash_app( buf+4, data_len, ( ota_fw_received_size == 0) );
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	1d18      	adds	r0, r3, #4
 8001136:	4b2f      	ldr	r3, [pc, #188]	@ (80011f4 <ota_process_data+0x1b4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	bf0c      	ite	eq
 800113e:	2301      	moveq	r3, #1
 8001140:	2300      	movne	r3, #0
 8001142:	b2da      	uxtb	r2, r3
 8001144:	8afb      	ldrh	r3, [r7, #22]
 8001146:	4619      	mov	r1, r3
 8001148:	f000 f8a4 	bl	8001294 <write_data_to_flash_app>
 800114c:	4603      	mov	r3, r0
 800114e:	757b      	strb	r3, [r7, #21]
          if( ex == HAL_OK )
 8001150:	7d7b      	ldrb	r3, [r7, #21]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d132      	bne.n	80011bc <ota_process_data+0x17c>
          {
        	  printf("Received [%ld/[%ld]",ota_fw_received_size/DEF_OTA_DATA_MAX_SIZE, ota_fw_total_size/DEF_OTA_DATA_MAX_SIZE);
 8001156:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <ota_process_data+0x1b4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	0a99      	lsrs	r1, r3, #10
 800115c:	4b21      	ldr	r3, [pc, #132]	@ (80011e4 <ota_process_data+0x1a4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	0a9b      	lsrs	r3, r3, #10
 8001162:	461a      	mov	r2, r3
 8001164:	4824      	ldr	r0, [pc, #144]	@ (80011f8 <ota_process_data+0x1b8>)
 8001166:	f003 fc6d 	bl	8004a44 <iprintf>

            if( ota_fw_received_size >= ota_fw_total_size )
 800116a:	4b22      	ldr	r3, [pc, #136]	@ (80011f4 <ota_process_data+0x1b4>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <ota_process_data+0x1a4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d302      	bcc.n	800117c <ota_process_data+0x13c>
            {
              //received the full data. So, move to end
              ota_state = ENM_OTA_STATE_END;
 8001176:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <ota_process_data+0x198>)
 8001178:	2205      	movs	r2, #5
 800117a:	701a      	strb	r2, [r3, #0]

            }
            ret = ENM_OTA_RET_OK;
 800117c:	2301      	movs	r3, #1
 800117e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
        }
      }
      break;
 8001182:	e01b      	b.n	80011bc <ota_process_data+0x17c>

      case ENM_OTA_STATE_END:
      {

    	  STU_OTA_COMMAND_ *cmd = (STU_OTA_COMMAND_*)buf;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	61fb      	str	r3, [r7, #28]

        if( (cmd->packet_type == ENM_OTA_PKT_TYP_CMD) && (cmd->cmd == ENM_OTA_CMD_END) )
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d117      	bne.n	80011c0 <ota_process_data+0x180>
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	791b      	ldrb	r3, [r3, #4]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d113      	bne.n	80011c0 <ota_process_data+0x180>
        {

        	printf("\nSTATE=END\n");
 8001198:	4818      	ldr	r0, [pc, #96]	@ (80011fc <ota_process_data+0x1bc>)
 800119a:	f003 fcbb 	bl	8004b14 <puts>
//        	{
//        		ret= ENM_OTA_RET_ERR;
//        		break;
//        	}

        	ota_state = ENM_OTA_STATE_IDLE;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <ota_process_data+0x198>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
        	ret = ENM_OTA_RET_OK;
 80011a4:	2301      	movs	r3, #1
 80011a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
//        else ota_send_resp(DEF_OTA_NACK,ENM_OTA_PKT_TYP_CMD);
      }
      break;
 80011aa:	e009      	b.n	80011c0 <ota_process_data+0x180>

      default:
      {
        /* Should not come here */
        ret = ENM_OTA_RET_ERR;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80011b2:	e006      	b.n	80011c2 <ota_process_data+0x182>
      break;
 80011b4:	bf00      	nop
 80011b6:	e004      	b.n	80011c2 <ota_process_data+0x182>
      break;
 80011b8:	bf00      	nop
 80011ba:	e002      	b.n	80011c2 <ota_process_data+0x182>
      break;
 80011bc:	bf00      	nop
 80011be:	e000      	b.n	80011c2 <ota_process_data+0x182>
      break;
 80011c0:	bf00      	nop
    };
  }while( false );

  return ret;
 80011c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3728      	adds	r7, #40	@ 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	08005738 	.word	0x08005738
 80011d4:	08005748 	.word	0x08005748
 80011d8:	20000004 	.word	0x20000004
 80011dc:	08005754 	.word	0x08005754
 80011e0:	08005764 	.word	0x08005764
 80011e4:	20000544 	.word	0x20000544
 80011e8:	20000548 	.word	0x20000548
 80011ec:	08005774 	.word	0x08005774
 80011f0:	08005784 	.word	0x08005784
 80011f4:	2000054c 	.word	0x2000054c
 80011f8:	08005794 	.word	0x08005794
 80011fc:	080057a8 	.word	0x080057a8

08001200 <ota_send_resp>:
  * @brief Send the response.
  * @param type ACK or NACK
  * @retval none
  */
static void ota_send_resp( uint8_t feedback)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	STU_OTA_RESP_ *rsp = (STU_OTA_RESP_*)Rx_Buffer;
 800120a:	4b20      	ldr	r3, [pc, #128]	@ (800128c <ota_send_resp+0x8c>)
 800120c:	60bb      	str	r3, [r7, #8]
	memset( Rx_Buffer, 0, sizeof(STU_OTA_RESP_) );		//INSETAD OF CLEARING ENTIRE 1033 BYTES, NOW WE CLEAR ONLY REQUIRED BYTES
 800120e:	220a      	movs	r2, #10
 8001210:	2100      	movs	r1, #0
 8001212:	481e      	ldr	r0, [pc, #120]	@ (800128c <ota_send_resp+0x8c>)
 8001214:	f003 fd5e 	bl	8004cd4 <memset>
	rsp->sof 			=DEF_OTA_SOF;
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	22aa      	movs	r2, #170	@ 0xaa
 800121c:	701a      	strb	r2, [r3, #0]
	rsp->packet_type 	=ENM_OTA_PKT_TYP_RESPONSE;
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	2204      	movs	r2, #4
 8001222:	705a      	strb	r2, [r3, #1]
	rsp->data_len 		= sizeof(STU_OTA_RESP_);
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	2200      	movs	r2, #0
 8001228:	f042 020a 	orr.w	r2, r2, #10
 800122c:	709a      	strb	r2, [r3, #2]
 800122e:	2200      	movs	r2, #0
 8001230:	70da      	strb	r2, [r3, #3]
	rsp->status			= feedback;
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	79fa      	ldrb	r2, [r7, #7]
 8001236:	711a      	strb	r2, [r3, #4]
	rsp-> crc 			= 0;		/* TODO  */
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	2200      	movs	r2, #0
 800123c:	715a      	strb	r2, [r3, #5]
 800123e:	2200      	movs	r2, #0
 8001240:	719a      	strb	r2, [r3, #6]
 8001242:	2200      	movs	r2, #0
 8001244:	71da      	strb	r2, [r3, #7]
 8001246:	2200      	movs	r2, #0
 8001248:	721a      	strb	r2, [r3, #8]
	rsp->eof			= DEF_OTA_EOF;
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	22bb      	movs	r2, #187	@ 0xbb
 800124e:	725a      	strb	r2, [r3, #9]

  //send response
  for (unsigned char c=0; c<(rsp->data_len);c++)
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e00e      	b.n	8001274 <ota_send_resp+0x74>
  {
	  while( !( USART1->SR & USART_SR_TXE) ) {};	//wait till transmit buffer is empty
 8001256:	bf00      	nop
 8001258:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <ota_send_resp+0x90>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f9      	beq.n	8001258 <ota_send_resp+0x58>
	  USART1->DR = Rx_Buffer[c];
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	4a09      	ldr	r2, [pc, #36]	@ (800128c <ota_send_resp+0x8c>)
 8001268:	5cd2      	ldrb	r2, [r2, r3]
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <ota_send_resp+0x90>)
 800126c:	605a      	str	r2, [r3, #4]
  for (unsigned char c=0; c<(rsp->data_len);c++)
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	3301      	adds	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	b29a      	uxth	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	885b      	ldrh	r3, [r3, #2]
 800127c:	b29b      	uxth	r3, r3
 800127e:	429a      	cmp	r2, r3
 8001280:	d3e9      	bcc.n	8001256 <ota_send_resp+0x56>
  }
  //HAL_UART_Transmit(&huart2, (uint8_t *)&rsp, sizeof(ETX_OTA_RESP_), HAL_MAX_DELAY);
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000134 	.word	0x20000134
 8001290:	40011000 	.word	0x40011000

08001294 <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 8001294:	b5b0      	push	{r4, r5, r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
 80012a0:	4613      	mov	r3, r2
 80012a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 80012a4:	f000 fdea 	bl	8001e7c <HAL_FLASH_Unlock>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( ret != HAL_OK )
 80012ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d157      	bne.n	8001366 <write_data_to_flash_app+0xd2>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 80012b6:	787b      	ldrb	r3, [r7, #1]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d019      	beq.n	80012f0 <write_data_to_flash_app+0x5c>
    {

    	printf("Erasing Flash...\n");
 80012bc:	482f      	ldr	r0, [pc, #188]	@ (800137c <write_data_to_flash_app+0xe8>)
 80012be:	f003 fc29 	bl	8004b14 <puts>

      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
      EraseInitStruct.Sector        = FLASH_SECTOR_5;
 80012c6:	2305      	movs	r3, #5
 80012c8:	617b      	str	r3, [r7, #20]
      EraseInitStruct.NbSectors     = 1;                    //erase 2 sectors(5,6)
 80012ca:	2301      	movs	r3, #1
 80012cc:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61fb      	str	r3, [r7, #28]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80012d2:	f107 0208 	add.w	r2, r7, #8
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 ff3f 	bl	8002160 <HAL_FLASHEx_Erase>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if( ret != HAL_OK )
 80012e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d13c      	bne.n	800136a <write_data_to_flash_app+0xd6>
      {
        break;
      }
    }

    for(int i = 0; i < data_len; i++ )
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
 80012f4:	e026      	b.n	8001344 <write_data_to_flash_app+0xb0>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 80012f6:	4b22      	ldr	r3, [pc, #136]	@ (8001380 <write_data_to_flash_app+0xec>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 80012fe:	f501 3100 	add.w	r1, r1, #131072	@ 0x20000
                               (OTA_APP_FLASH_ADDR + ota_fw_received_size),
                               data[i]
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2200      	movs	r2, #0
 800130e:	461c      	mov	r4, r3
 8001310:	4615      	mov	r5, r2
 8001312:	4622      	mov	r2, r4
 8001314:	462b      	mov	r3, r5
 8001316:	2000      	movs	r0, #0
 8001318:	f000 fd5c 	bl	8001dd4 <HAL_FLASH_Program>
 800131c:	4603      	mov	r3, r0
 800131e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                             );
      if( ret == HAL_OK )
 8001322:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001326:	2b00      	cmp	r3, #0
 8001328:	d105      	bne.n	8001336 <write_data_to_flash_app+0xa2>
      {
        //update the data count
        ota_fw_received_size += 1;
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <write_data_to_flash_app+0xec>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	4a13      	ldr	r2, [pc, #76]	@ (8001380 <write_data_to_flash_app+0xec>)
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e003      	b.n	800133e <write_data_to_flash_app+0xaa>
      }
      else
      {

        	printf("FLASH ERROR!\n");
 8001336:	4813      	ldr	r0, [pc, #76]	@ (8001384 <write_data_to_flash_app+0xf0>)
 8001338:	f003 fbec 	bl	8004b14 <puts>
        break;
 800133c:	e006      	b.n	800134c <write_data_to_flash_app+0xb8>
    for(int i = 0; i < data_len; i++ )
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	3301      	adds	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	6a3a      	ldr	r2, [r7, #32]
 8001348:	429a      	cmp	r2, r3
 800134a:	dbd4      	blt.n	80012f6 <write_data_to_flash_app+0x62>
      }
    }

    if( ret != HAL_OK )
 800134c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10c      	bne.n	800136e <write_data_to_flash_app+0xda>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8001354:	f000 fdb4 	bl	8001ec0 <HAL_FLASH_Lock>
 8001358:	4603      	mov	r3, r0
 800135a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( ret != HAL_OK )
 800135e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001362:	2b00      	cmp	r3, #0
 8001364:	e004      	b.n	8001370 <write_data_to_flash_app+0xdc>
      break;
 8001366:	bf00      	nop
 8001368:	e002      	b.n	8001370 <write_data_to_flash_app+0xdc>
        break;
 800136a:	bf00      	nop
 800136c:	e000      	b.n	8001370 <write_data_to_flash_app+0xdc>
      break;
 800136e:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 8001370:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001374:	4618      	mov	r0, r3
 8001376:	3728      	adds	r7, #40	@ 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bdb0      	pop	{r4, r5, r7, pc}
 800137c:	080057b4 	.word	0x080057b4
 8001380:	2000054c 	.word	0x2000054c
 8001384:	080057c8 	.word	0x080057c8

08001388 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2104      	movs	r1, #4
 8001390:	4802      	ldr	r0, [pc, #8]	@ (800139c <ST7735_Select+0x14>)
 8001392:	f001 fa87 	bl	80028a4 <HAL_GPIO_WritePin>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40020400 	.word	0x40020400

080013a0 <ST7735_Unselect>:

void ST7735_Unselect() {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2104      	movs	r1, #4
 80013a8:	4802      	ldr	r0, [pc, #8]	@ (80013b4 <ST7735_Unselect+0x14>)
 80013aa:	f001 fa7b 	bl	80028a4 <HAL_GPIO_WritePin>
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40020400 	.word	0x40020400

080013b8 <ST7735_Reset>:

static void ST7735_Reset() {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	2102      	movs	r1, #2
 80013c0:	4806      	ldr	r0, [pc, #24]	@ (80013dc <ST7735_Reset+0x24>)
 80013c2:	f001 fa6f 	bl	80028a4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80013c6:	2005      	movs	r0, #5
 80013c8:	f000 faf0 	bl	80019ac <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	2102      	movs	r1, #2
 80013d0:	4802      	ldr	r0, [pc, #8]	@ (80013dc <ST7735_Reset+0x24>)
 80013d2:	f001 fa67 	bl	80028a4 <HAL_GPIO_WritePin>
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40020400 	.word	0x40020400

080013e0 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2101      	movs	r1, #1
 80013ee:	4807      	ldr	r0, [pc, #28]	@ (800140c <ST7735_WriteCommand+0x2c>)
 80013f0:	f001 fa58 	bl	80028a4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80013f4:	1df9      	adds	r1, r7, #7
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	2201      	movs	r2, #1
 80013fc:	4804      	ldr	r0, [pc, #16]	@ (8001410 <ST7735_WriteCommand+0x30>)
 80013fe:	f002 f842 	bl	8003486 <HAL_SPI_Transmit>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40020400 	.word	0x40020400
 8001410:	20000094 	.word	0x20000094

08001414 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800141e:	2201      	movs	r2, #1
 8001420:	2101      	movs	r1, #1
 8001422:	4807      	ldr	r0, [pc, #28]	@ (8001440 <ST7735_WriteData+0x2c>)
 8001424:	f001 fa3e 	bl	80028a4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b29a      	uxth	r2, r3
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	4804      	ldr	r0, [pc, #16]	@ (8001444 <ST7735_WriteData+0x30>)
 8001434:	f002 f827 	bl	8003486 <HAL_SPI_Transmit>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40020400 	.word	0x40020400
 8001444:	20000094 	.word	0x20000094

08001448 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800145a:	e034      	b.n	80014c6 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001466:	7afb      	ldrb	r3, [r7, #11]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ffb9 	bl	80013e0 <ST7735_WriteCommand>

        numArgs = *addr++;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001478:	7abb      	ldrb	r3, [r7, #10]
 800147a:	b29b      	uxth	r3, r3
 800147c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001480:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001482:	7abb      	ldrb	r3, [r7, #10]
 8001484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001488:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800148a:	7abb      	ldrb	r3, [r7, #10]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d008      	beq.n	80014a2 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001490:	7abb      	ldrb	r3, [r7, #10]
 8001492:	4619      	mov	r1, r3
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ffbd 	bl	8001414 <ST7735_WriteData>
            addr += numArgs;
 800149a:	7abb      	ldrb	r3, [r7, #10]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80014a2:	89bb      	ldrh	r3, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00e      	beq.n	80014c6 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80014b2:	89bb      	ldrh	r3, [r7, #12]
 80014b4:	2bff      	cmp	r3, #255	@ 0xff
 80014b6:	d102      	bne.n	80014be <ST7735_ExecuteCommandList+0x76>
 80014b8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014bc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80014be:	89bb      	ldrh	r3, [r7, #12]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fa73 	bl	80019ac <HAL_Delay>
    while(numCommands--) {
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	1e5a      	subs	r2, r3, #1
 80014ca:	73fa      	strb	r2, [r7, #15]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1c5      	bne.n	800145c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80014da:	b590      	push	{r4, r7, lr}
 80014dc:	b085      	sub	sp, #20
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4604      	mov	r4, r0
 80014e2:	4608      	mov	r0, r1
 80014e4:	4611      	mov	r1, r2
 80014e6:	461a      	mov	r2, r3
 80014e8:	4623      	mov	r3, r4
 80014ea:	71fb      	strb	r3, [r7, #7]
 80014ec:	4603      	mov	r3, r0
 80014ee:	71bb      	strb	r3, [r7, #6]
 80014f0:	460b      	mov	r3, r1
 80014f2:	717b      	strb	r3, [r7, #5]
 80014f4:	4613      	mov	r3, r2
 80014f6:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80014f8:	202a      	movs	r0, #42	@ 0x2a
 80014fa:	f7ff ff71 	bl	80013e0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80014fe:	2300      	movs	r3, #0
 8001500:	733b      	strb	r3, [r7, #12]
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	3301      	adds	r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	737b      	strb	r3, [r7, #13]
 800150a:	2300      	movs	r3, #0
 800150c:	73bb      	strb	r3, [r7, #14]
 800150e:	797b      	ldrb	r3, [r7, #5]
 8001510:	3301      	adds	r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	2104      	movs	r1, #4
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff79 	bl	8001414 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001522:	202b      	movs	r0, #43	@ 0x2b
 8001524:	f7ff ff5c 	bl	80013e0 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001528:	79bb      	ldrb	r3, [r7, #6]
 800152a:	3302      	adds	r3, #2
 800152c:	b2db      	uxtb	r3, r3
 800152e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001530:	793b      	ldrb	r3, [r7, #4]
 8001532:	3302      	adds	r3, #2
 8001534:	b2db      	uxtb	r3, r3
 8001536:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2104      	movs	r1, #4
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff68 	bl	8001414 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001544:	202c      	movs	r0, #44	@ 0x2c
 8001546:	f7ff ff4b 	bl	80013e0 <ST7735_WriteCommand>
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bd90      	pop	{r4, r7, pc}
	...

08001554 <ST7735_Init>:

void ST7735_Init() {
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001558:	f7ff ff16 	bl	8001388 <ST7735_Select>
    ST7735_Reset();
 800155c:	f7ff ff2c 	bl	80013b8 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001560:	4806      	ldr	r0, [pc, #24]	@ (800157c <ST7735_Init+0x28>)
 8001562:	f7ff ff71 	bl	8001448 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001566:	4806      	ldr	r0, [pc, #24]	@ (8001580 <ST7735_Init+0x2c>)
 8001568:	f7ff ff6e 	bl	8001448 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800156c:	4805      	ldr	r0, [pc, #20]	@ (8001584 <ST7735_Init+0x30>)
 800156e:	f7ff ff6b 	bl	8001448 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001572:	f7ff ff15 	bl	80013a0 <ST7735_Unselect>
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	08005f5c 	.word	0x08005f5c
 8001580:	08005f98 	.word	0x08005f98
 8001584:	08005fa8 	.word	0x08005fa8

08001588 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001588:	b082      	sub	sp, #8
 800158a:	b590      	push	{r4, r7, lr}
 800158c:	b089      	sub	sp, #36	@ 0x24
 800158e:	af00      	add	r7, sp, #0
 8001590:	637b      	str	r3, [r7, #52]	@ 0x34
 8001592:	4603      	mov	r3, r0
 8001594:	80fb      	strh	r3, [r7, #6]
 8001596:	460b      	mov	r3, r1
 8001598:	80bb      	strh	r3, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	b2d8      	uxtb	r0, r3
 80015a2:	88bb      	ldrh	r3, [r7, #4]
 80015a4:	b2d9      	uxtb	r1, r3
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80015ae:	4413      	add	r3, r2
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	3b01      	subs	r3, #1
 80015b4:	b2dc      	uxtb	r4, r3
 80015b6:	88bb      	ldrh	r3, [r7, #4]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80015be:	4413      	add	r3, r2
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	3b01      	subs	r3, #1
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4622      	mov	r2, r4
 80015c8:	f7ff ff87 	bl	80014da <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	e043      	b.n	800165a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80015d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015d4:	78fb      	ldrb	r3, [r7, #3]
 80015d6:	3b20      	subs	r3, #32
 80015d8:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	4619      	mov	r1, r3
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	440b      	add	r3, r1
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	e029      	b.n	8001648 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00e      	beq.n	8001622 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001604:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001606:	0a1b      	lsrs	r3, r3, #8
 8001608:	b29b      	uxth	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	743b      	strb	r3, [r7, #16]
 800160e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001610:	b2db      	uxtb	r3, r3
 8001612:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	2102      	movs	r1, #2
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fefa 	bl	8001414 <ST7735_WriteData>
 8001620:	e00f      	b.n	8001642 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001622:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	b29b      	uxth	r3, r3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	733b      	strb	r3, [r7, #12]
 800162e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001632:	b2db      	uxtb	r3, r3
 8001634:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	2102      	movs	r1, #2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fee9 	bl	8001414 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	3301      	adds	r3, #1
 8001646:	61bb      	str	r3, [r7, #24]
 8001648:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800164c:	461a      	mov	r2, r3
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4293      	cmp	r3, r2
 8001652:	d3cf      	bcc.n	80015f4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	3301      	adds	r3, #1
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800165e:	461a      	mov	r2, r3
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	4293      	cmp	r3, r2
 8001664:	d3b5      	bcc.n	80015d2 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001666:	bf00      	nop
 8001668:	bf00      	nop
 800166a:	3724      	adds	r7, #36	@ 0x24
 800166c:	46bd      	mov	sp, r7
 800166e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001672:	b002      	add	sp, #8
 8001674:	4770      	bx	lr
	...

08001678 <ST7735_FillRectangle>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	4604      	mov	r4, r0
 8001680:	4608      	mov	r0, r1
 8001682:	4611      	mov	r1, r2
 8001684:	461a      	mov	r2, r3
 8001686:	4623      	mov	r3, r4
 8001688:	80fb      	strh	r3, [r7, #6]
 800168a:	4603      	mov	r3, r0
 800168c:	80bb      	strh	r3, [r7, #4]
 800168e:	460b      	mov	r3, r1
 8001690:	807b      	strh	r3, [r7, #2]
 8001692:	4613      	mov	r3, r2
 8001694:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_LCD_WIDTH) || (y >= ST7735_LCD_HEIGHT)) return;
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	2b9f      	cmp	r3, #159	@ 0x9f
 800169a:	d857      	bhi.n	800174c <ST7735_FillRectangle+0xd4>
 800169c:	88bb      	ldrh	r3, [r7, #4]
 800169e:	2b7f      	cmp	r3, #127	@ 0x7f
 80016a0:	d854      	bhi.n	800174c <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_LCD_WIDTH) w = ST7735_LCD_WIDTH - x;
 80016a2:	88fa      	ldrh	r2, [r7, #6]
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	4413      	add	r3, r2
 80016a8:	2ba0      	cmp	r3, #160	@ 0xa0
 80016aa:	dd03      	ble.n	80016b4 <ST7735_FillRectangle+0x3c>
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 80016b2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_LCD_HEIGHT) h = ST7735_LCD_HEIGHT - y;
 80016b4:	88ba      	ldrh	r2, [r7, #4]
 80016b6:	883b      	ldrh	r3, [r7, #0]
 80016b8:	4413      	add	r3, r2
 80016ba:	2b80      	cmp	r3, #128	@ 0x80
 80016bc:	dd03      	ble.n	80016c6 <ST7735_FillRectangle+0x4e>
 80016be:	88bb      	ldrh	r3, [r7, #4]
 80016c0:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80016c4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80016c6:	f7ff fe5f 	bl	8001388 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	b2d8      	uxtb	r0, r3
 80016ce:	88bb      	ldrh	r3, [r7, #4]
 80016d0:	b2d9      	uxtb	r1, r3
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	4413      	add	r3, r2
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	3b01      	subs	r3, #1
 80016e0:	b2dc      	uxtb	r4, r3
 80016e2:	88bb      	ldrh	r3, [r7, #4]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	883b      	ldrh	r3, [r7, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	3b01      	subs	r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	4622      	mov	r2, r4
 80016f4:	f7ff fef1 	bl	80014da <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80016f8:	8c3b      	ldrh	r3, [r7, #32]
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	733b      	strb	r3, [r7, #12]
 8001702:	8c3b      	ldrh	r3, [r7, #32]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	2101      	movs	r1, #1
 800170c:	4811      	ldr	r0, [pc, #68]	@ (8001754 <ST7735_FillRectangle+0xdc>)
 800170e:	f001 f8c9 	bl	80028a4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001712:	883b      	ldrh	r3, [r7, #0]
 8001714:	80bb      	strh	r3, [r7, #4]
 8001716:	e013      	b.n	8001740 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8001718:	887b      	ldrh	r3, [r7, #2]
 800171a:	80fb      	strh	r3, [r7, #6]
 800171c:	e00a      	b.n	8001734 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800171e:	f107 010c 	add.w	r1, r7, #12
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	2202      	movs	r2, #2
 8001728:	480b      	ldr	r0, [pc, #44]	@ (8001758 <ST7735_FillRectangle+0xe0>)
 800172a:	f001 feac 	bl	8003486 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	3b01      	subs	r3, #1
 8001732:	80fb      	strh	r3, [r7, #6]
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f1      	bne.n	800171e <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800173a:	88bb      	ldrh	r3, [r7, #4]
 800173c:	3b01      	subs	r3, #1
 800173e:	80bb      	strh	r3, [r7, #4]
 8001740:	88bb      	ldrh	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1e8      	bne.n	8001718 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8001746:	f7ff fe2b 	bl	80013a0 <ST7735_Unselect>
 800174a:	e000      	b.n	800174e <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_LCD_WIDTH) || (y >= ST7735_LCD_HEIGHT)) return;
 800174c:	bf00      	nop
}
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bd90      	pop	{r4, r7, pc}
 8001754:	40020400 	.word	0x40020400
 8001758:	20000094 	.word	0x20000094

0800175c <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af02      	add	r7, sp, #8
 8001762:	4603      	mov	r3, r0
 8001764:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_LCD_WIDTH, ST7735_LCD_HEIGHT, color);
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2380      	movs	r3, #128	@ 0x80
 800176c:	22a0      	movs	r2, #160	@ 0xa0
 800176e:	2100      	movs	r1, #0
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff ff81 	bl	8001678 <ST7735_FillRectangle>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <ST7735_WriteDebugString>:
	ST7735_TestFilledRoundRectangles();
}

uint16_t _currentX=ST7735_XSTART, _currentY=ST7735_YSTART, _currentLineNum=1;

void ST7735_WriteDebugString(char* str) {
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b087      	sub	sp, #28
 8001784:	af04      	add	r7, sp, #16
 8001786:	6078      	str	r0, [r7, #4]
	_currentX=ST7735_XSTART;
 8001788:	4b31      	ldr	r3, [pc, #196]	@ (8001850 <ST7735_WriteDebugString+0xd0>)
 800178a:	2201      	movs	r2, #1
 800178c:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(_currentX, _currentY, ST7735_LCD_WIDTH, Font_7x10.height, ST7735_COLOUR_BLACK);
 800178e:	4b30      	ldr	r3, [pc, #192]	@ (8001850 <ST7735_WriteDebugString+0xd0>)
 8001790:	8818      	ldrh	r0, [r3, #0]
 8001792:	4b30      	ldr	r3, [pc, #192]	@ (8001854 <ST7735_WriteDebugString+0xd4>)
 8001794:	8819      	ldrh	r1, [r3, #0]
 8001796:	4b30      	ldr	r3, [pc, #192]	@ (8001858 <ST7735_WriteDebugString+0xd8>)
 8001798:	785b      	ldrb	r3, [r3, #1]
 800179a:	461a      	mov	r2, r3
 800179c:	2300      	movs	r3, #0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	4613      	mov	r3, r2
 80017a2:	22a0      	movs	r2, #160	@ 0xa0
 80017a4:	f7ff ff68 	bl	8001678 <ST7735_FillRectangle>


	ST7735_Select();
 80017a8:	f7ff fdee 	bl	8001388 <ST7735_Select>

    while(*str)
 80017ac:	e044      	b.n	8001838 <ST7735_WriteDebugString+0xb8>
    {
        if(_currentY + Font_7x10.height >= ST7735_LCD_HEIGHT)
 80017ae:	4b29      	ldr	r3, [pc, #164]	@ (8001854 <ST7735_WriteDebugString+0xd4>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b28      	ldr	r3, [pc, #160]	@ (8001858 <ST7735_WriteDebugString+0xd8>)
 80017b6:	785b      	ldrb	r3, [r3, #1]
 80017b8:	4413      	add	r3, r2
 80017ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80017bc:	dd05      	ble.n	80017ca <ST7735_WriteDebugString+0x4a>
        {
        	ST7735_FillScreen(ST7735_COLOUR_BLACK);
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff ffcc 	bl	800175c <ST7735_FillScreen>
        	_currentY=ST7735_YSTART;
 80017c4:	4b23      	ldr	r3, [pc, #140]	@ (8001854 <ST7735_WriteDebugString+0xd4>)
 80017c6:	2202      	movs	r2, #2
 80017c8:	801a      	strh	r2, [r3, #0]
        }
        if(_currentX + Font_7x10.width >= ST7735_LCD_WIDTH)
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <ST7735_WriteDebugString+0xd0>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <ST7735_WriteDebugString+0xd8>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	2b9f      	cmp	r3, #159	@ 0x9f
 80017d8:	dc33      	bgt.n	8001842 <ST7735_WriteDebugString+0xc2>
        {
        	break;
        	//_currentX = 0;
        }
        if(*str == '\n')
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b0a      	cmp	r3, #10
 80017e0:	d10c      	bne.n	80017fc <ST7735_WriteDebugString+0x7c>
        {
        	_currentY = (_currentY ) + (Font_7x10.height);
 80017e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <ST7735_WriteDebugString+0xd8>)
 80017e4:	785b      	ldrb	r3, [r3, #1]
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <ST7735_WriteDebugString+0xd4>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	4b18      	ldr	r3, [pc, #96]	@ (8001854 <ST7735_WriteDebugString+0xd4>)
 80017f2:	801a      	strh	r2, [r3, #0]
        	_currentX=ST7735_XSTART;
 80017f4:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <ST7735_WriteDebugString+0xd0>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	801a      	strh	r2, [r3, #0]
        	break;
 80017fa:	e023      	b.n	8001844 <ST7735_WriteDebugString+0xc4>
//        	str++;
//        	continue;
        }

        ST7735_WriteChar(_currentX, _currentY, *str, Font_7x10, ST7735_COLOUR_WHITE, ST7735_COLOUR_BLACK);
 80017fc:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <ST7735_WriteDebugString+0xd0>)
 80017fe:	8818      	ldrh	r0, [r3, #0]
 8001800:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <ST7735_WriteDebugString+0xd4>)
 8001802:	8819      	ldrh	r1, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	781c      	ldrb	r4, [r3, #0]
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <ST7735_WriteDebugString+0xd8>)
 800180a:	2200      	movs	r2, #0
 800180c:	9202      	str	r2, [sp, #8]
 800180e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001812:	9201      	str	r2, [sp, #4]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	9200      	str	r2, [sp, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4622      	mov	r2, r4
 800181c:	f7ff feb4 	bl	8001588 <ST7735_WriteChar>
        _currentX += Font_7x10.width;
 8001820:	4b0d      	ldr	r3, [pc, #52]	@ (8001858 <ST7735_WriteDebugString+0xd8>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <ST7735_WriteDebugString+0xd0>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	b29a      	uxth	r2, r3
 800182e:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <ST7735_WriteDebugString+0xd0>)
 8001830:	801a      	strh	r2, [r3, #0]
        str++;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3301      	adds	r3, #1
 8001836:	607b      	str	r3, [r7, #4]
    while(*str)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1b6      	bne.n	80017ae <ST7735_WriteDebugString+0x2e>
 8001840:	e000      	b.n	8001844 <ST7735_WriteDebugString+0xc4>
        	break;
 8001842:	bf00      	nop
    }

    //_currentY = (_currentY ) + (Font_7x10.height);
    ST7735_Unselect();
 8001844:	f7ff fdac 	bl	80013a0 <ST7735_Unselect>
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	20000010 	.word	0x20000010
 8001854:	20000012 	.word	0x20000012
 8001858:	20000008 	.word	0x20000008

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001860:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0d      	ldr	r2, [pc, #52]	@ (800189c <HAL_Init+0x40>)
 8001866:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800186a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800186c:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <HAL_Init+0x40>)
 8001872:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001878:	4b08      	ldr	r3, [pc, #32]	@ (800189c <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a07      	ldr	r2, [pc, #28]	@ (800189c <HAL_Init+0x40>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001884:	2003      	movs	r0, #3
 8001886:	f000 f9bf 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188a:	200f      	movs	r0, #15
 800188c:	f000 f83e 	bl	800190c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001890:	f7ff f872 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00

080018a0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80018a4:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <HAL_DeInit+0x4c>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	@ (80018f0 <HAL_DeInit+0x50>)
 80018a8:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80018aa:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <HAL_DeInit+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80018b0:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <HAL_DeInit+0x4c>)
 80018b2:	4a10      	ldr	r2, [pc, #64]	@ (80018f4 <HAL_DeInit+0x54>)
 80018b4:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80018b6:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <HAL_DeInit+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <HAL_DeInit+0x4c>)
 80018be:	4a0e      	ldr	r2, [pc, #56]	@ (80018f8 <HAL_DeInit+0x58>)
 80018c0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80018c2:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <HAL_DeInit+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80018c8:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <HAL_DeInit+0x4c>)
 80018ca:	2280      	movs	r2, #128	@ 0x80
 80018cc:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80018ce:	4b07      	ldr	r3, [pc, #28]	@ (80018ec <HAL_DeInit+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <HAL_DeInit+0x4c>)
 80018d6:	f04f 32ff 	mov.w	r2, #4294967295
 80018da:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80018dc:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <HAL_DeInit+0x4c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80018e2:	f000 f80b 	bl	80018fc <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	10e2c80f 	.word	0x10e2c80f
 80018f4:	00177931 	.word	0x00177931
 80018f8:	0060109f 	.word	0x0060109f

080018fc <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_InitTick+0x54>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_InitTick+0x58>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001922:	fbb3 f3f1 	udiv	r3, r3, r1
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f9b3 	bl	8001c96 <HAL_SYSTICK_Config>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e00e      	b.n	8001958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b0f      	cmp	r3, #15
 800193e:	d80a      	bhi.n	8001956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001940:	2200      	movs	r2, #0
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f000 f969 	bl	8001c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800194c:	4a06      	ldr	r2, [pc, #24]	@ (8001968 <HAL_InitTick+0x5c>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e000      	b.n	8001958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000000 	.word	0x20000000
 8001964:	20000018 	.word	0x20000018
 8001968:	20000014 	.word	0x20000014

0800196c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_IncTick+0x20>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_IncTick+0x24>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4413      	add	r3, r2
 800197c:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <HAL_IncTick+0x24>)
 800197e:	6013      	str	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000018 	.word	0x20000018
 8001990:	20000550 	.word	0x20000550

08001994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return uwTick;
 8001998:	4b03      	ldr	r3, [pc, #12]	@ (80019a8 <HAL_GetTick+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000550 	.word	0x20000550

080019ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff ffee 	bl	8001994 <HAL_GetTick>
 80019b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d005      	beq.n	80019d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_Delay+0x44>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019d2:	bf00      	nop
 80019d4:	f7ff ffde 	bl	8001994 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d8f7      	bhi.n	80019d4 <HAL_Delay+0x28>
  {
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000018 	.word	0x20000018

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	@ (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	@ (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4907      	ldr	r1, [pc, #28]	@ (8001a90 <__NVIC_EnableIRQ+0x38>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db12      	blt.n	8001acc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	490a      	ldr	r1, [pc, #40]	@ (8001ad8 <__NVIC_DisableIRQ+0x44>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	3320      	adds	r3, #32
 8001abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ac0:	f3bf 8f4f 	dsb	sy
}
 8001ac4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ac6:	f3bf 8f6f 	isb	sy
}
 8001aca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	@ (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	@ (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	@ 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001b9c:	f3bf 8f4f 	dsb	sy
}
 8001ba0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <__NVIC_SystemReset+0x24>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001baa:	4904      	ldr	r1, [pc, #16]	@ (8001bbc <__NVIC_SystemReset+0x24>)
 8001bac:	4b04      	ldr	r3, [pc, #16]	@ (8001bc0 <__NVIC_SystemReset+0x28>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb2:	f3bf 8f4f 	dsb	sy
}
 8001bb6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <__NVIC_SystemReset+0x20>
 8001bbc:	e000ed00 	.word	0xe000ed00
 8001bc0:	05fa0004 	.word	0x05fa0004

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f7ff ff78 	bl	8001adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff feef 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff04 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff78 	bl	8001b30 <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff47 	bl	8001adc <__NVIC_SetPriority>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fef7 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff07 	bl	8001a94 <__NVIC_DisableIRQ>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001c92:	f7ff ff81 	bl	8001b98 <__NVIC_SystemReset>

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ff90 	bl	8001bc4 <SysTick_Config>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7ff fe6a 	bl	8001994 <HAL_GetTick>
 8001cc0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d008      	beq.n	8001ce0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2280      	movs	r2, #128	@ 0x80
 8001cd2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e052      	b.n	8001d86 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0216 	bic.w	r2, r2, #22
 8001cee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cfe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d103      	bne.n	8001d10 <HAL_DMA_Abort+0x62>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0208 	bic.w	r2, r2, #8
 8001d1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d30:	e013      	b.n	8001d5a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d32:	f7ff fe2f 	bl	8001994 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d90c      	bls.n	8001d5a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2220      	movs	r2, #32
 8001d44:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2203      	movs	r2, #3
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e015      	b.n	8001d86 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1e4      	bne.n	8001d32 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6c:	223f      	movs	r2, #63	@ 0x3f
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d004      	beq.n	8001dac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2280      	movs	r2, #128	@ 0x80
 8001da6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e00c      	b.n	8001dc6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2205      	movs	r2, #5
 8001db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001de6:	4b23      	ldr	r3, [pc, #140]	@ (8001e74 <HAL_FLASH_Program+0xa0>)
 8001de8:	7e1b      	ldrb	r3, [r3, #24]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_FLASH_Program+0x1e>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e03b      	b.n	8001e6a <HAL_FLASH_Program+0x96>
 8001df2:	4b20      	ldr	r3, [pc, #128]	@ (8001e74 <HAL_FLASH_Program+0xa0>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001df8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001dfc:	f000 f870 	bl	8001ee0 <FLASH_WaitForLastOperation>
 8001e00:	4603      	mov	r3, r0
 8001e02:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d12b      	bne.n	8001e62 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d105      	bne.n	8001e1c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001e10:	783b      	ldrb	r3, [r7, #0]
 8001e12:	4619      	mov	r1, r3
 8001e14:	68b8      	ldr	r0, [r7, #8]
 8001e16:	f000 f91b 	bl	8002050 <FLASH_Program_Byte>
 8001e1a:	e016      	b.n	8001e4a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d105      	bne.n	8001e2e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001e22:	883b      	ldrh	r3, [r7, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	68b8      	ldr	r0, [r7, #8]
 8001e28:	f000 f8ee 	bl	8002008 <FLASH_Program_HalfWord>
 8001e2c:	e00d      	b.n	8001e4a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d105      	bne.n	8001e40 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4619      	mov	r1, r3
 8001e38:	68b8      	ldr	r0, [r7, #8]
 8001e3a:	f000 f8c3 	bl	8001fc4 <FLASH_Program_Word>
 8001e3e:	e004      	b.n	8001e4a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e44:	68b8      	ldr	r0, [r7, #8]
 8001e46:	f000 f88b 	bl	8001f60 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e4a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001e4e:	f000 f847 	bl	8001ee0 <FLASH_WaitForLastOperation>
 8001e52:	4603      	mov	r3, r0
 8001e54:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001e56:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <HAL_FLASH_Program+0xa4>)
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	4a07      	ldr	r2, [pc, #28]	@ (8001e78 <HAL_FLASH_Program+0xa4>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e62:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <HAL_FLASH_Program+0xa0>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000554 	.word	0x20000554
 8001e78:	40023c00 	.word	0x40023c00

08001e7c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e86:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <HAL_FLASH_Unlock+0x38>)
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	da0b      	bge.n	8001ea6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e8e:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <HAL_FLASH_Unlock+0x38>)
 8001e90:	4a09      	ldr	r2, [pc, #36]	@ (8001eb8 <HAL_FLASH_Unlock+0x3c>)
 8001e92:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e94:	4b07      	ldr	r3, [pc, #28]	@ (8001eb4 <HAL_FLASH_Unlock+0x38>)
 8001e96:	4a09      	ldr	r2, [pc, #36]	@ (8001ebc <HAL_FLASH_Unlock+0x40>)
 8001e98:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_FLASH_Unlock+0x38>)
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	da01      	bge.n	8001ea6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40023c00 	.word	0x40023c00
 8001eb8:	45670123 	.word	0x45670123
 8001ebc:	cdef89ab 	.word	0xcdef89ab

08001ec0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ec4:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <HAL_FLASH_Lock+0x1c>)
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	4a04      	ldr	r2, [pc, #16]	@ (8001edc <HAL_FLASH_Lock+0x1c>)
 8001eca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001ece:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	40023c00 	.word	0x40023c00

08001ee0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001eec:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <FLASH_WaitForLastOperation+0x78>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ef2:	f7ff fd4f 	bl	8001994 <HAL_GetTick>
 8001ef6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ef8:	e010      	b.n	8001f1c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f00:	d00c      	beq.n	8001f1c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <FLASH_WaitForLastOperation+0x38>
 8001f08:	f7ff fd44 	bl	8001994 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d201      	bcs.n	8001f1c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e019      	b.n	8001f50 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f5c <FLASH_WaitForLastOperation+0x7c>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1e8      	bne.n	8001efa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001f28:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <FLASH_WaitForLastOperation+0x7c>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001f34:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <FLASH_WaitForLastOperation+0x7c>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001f3a:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <FLASH_WaitForLastOperation+0x7c>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001f46:	f000 f8a5 	bl	8002094 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
  
}  
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000554 	.word	0x20000554
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f6c:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <FLASH_Program_DoubleWord+0x60>)
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	4a13      	ldr	r2, [pc, #76]	@ (8001fc0 <FLASH_Program_DoubleWord+0x60>)
 8001f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001f78:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <FLASH_Program_DoubleWord+0x60>)
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	4a10      	ldr	r2, [pc, #64]	@ (8001fc0 <FLASH_Program_DoubleWord+0x60>)
 8001f7e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001f82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f84:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <FLASH_Program_DoubleWord+0x60>)
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc0 <FLASH_Program_DoubleWord+0x60>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001f96:	f3bf 8f6f 	isb	sy
}
 8001f9a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001f9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	000a      	movs	r2, r1
 8001faa:	2300      	movs	r3, #0
 8001fac:	68f9      	ldr	r1, [r7, #12]
 8001fae:	3104      	adds	r1, #4
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40023c00 	.word	0x40023c00

08001fc4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fce:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <FLASH_Program_Word+0x40>)
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8002004 <FLASH_Program_Word+0x40>)
 8001fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001fda:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <FLASH_Program_Word+0x40>)
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	4a09      	ldr	r2, [pc, #36]	@ (8002004 <FLASH_Program_Word+0x40>)
 8001fe0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fe4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <FLASH_Program_Word+0x40>)
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	4a06      	ldr	r2, [pc, #24]	@ (8002004 <FLASH_Program_Word+0x40>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	601a      	str	r2, [r3, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40023c00 	.word	0x40023c00

08002008 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002014:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <FLASH_Program_HalfWord+0x44>)
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	4a0c      	ldr	r2, [pc, #48]	@ (800204c <FLASH_Program_HalfWord+0x44>)
 800201a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800201e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002020:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <FLASH_Program_HalfWord+0x44>)
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	4a09      	ldr	r2, [pc, #36]	@ (800204c <FLASH_Program_HalfWord+0x44>)
 8002026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800202c:	4b07      	ldr	r3, [pc, #28]	@ (800204c <FLASH_Program_HalfWord+0x44>)
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	4a06      	ldr	r2, [pc, #24]	@ (800204c <FLASH_Program_HalfWord+0x44>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	801a      	strh	r2, [r3, #0]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023c00 	.word	0x40023c00

08002050 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800205c:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <FLASH_Program_Byte+0x40>)
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	4a0b      	ldr	r2, [pc, #44]	@ (8002090 <FLASH_Program_Byte+0x40>)
 8002062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002066:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002068:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <FLASH_Program_Byte+0x40>)
 800206a:	4a09      	ldr	r2, [pc, #36]	@ (8002090 <FLASH_Program_Byte+0x40>)
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002070:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <FLASH_Program_Byte+0x40>)
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	4a06      	ldr	r2, [pc, #24]	@ (8002090 <FLASH_Program_Byte+0x40>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	78fa      	ldrb	r2, [r7, #3]
 8002080:	701a      	strb	r2, [r3, #0]
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40023c00 	.word	0x40023c00

08002094 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002098:	4b2f      	ldr	r3, [pc, #188]	@ (8002158 <FLASH_SetErrorCode+0xc4>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80020a4:	4b2d      	ldr	r3, [pc, #180]	@ (800215c <FLASH_SetErrorCode+0xc8>)
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f043 0310 	orr.w	r3, r3, #16
 80020ac:	4a2b      	ldr	r2, [pc, #172]	@ (800215c <FLASH_SetErrorCode+0xc8>)
 80020ae:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80020b0:	4b29      	ldr	r3, [pc, #164]	@ (8002158 <FLASH_SetErrorCode+0xc4>)
 80020b2:	2210      	movs	r2, #16
 80020b4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80020b6:	4b28      	ldr	r3, [pc, #160]	@ (8002158 <FLASH_SetErrorCode+0xc4>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80020c2:	4b26      	ldr	r3, [pc, #152]	@ (800215c <FLASH_SetErrorCode+0xc8>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f043 0308 	orr.w	r3, r3, #8
 80020ca:	4a24      	ldr	r2, [pc, #144]	@ (800215c <FLASH_SetErrorCode+0xc8>)
 80020cc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80020ce:	4b22      	ldr	r3, [pc, #136]	@ (8002158 <FLASH_SetErrorCode+0xc4>)
 80020d0:	2220      	movs	r2, #32
 80020d2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80020d4:	4b20      	ldr	r3, [pc, #128]	@ (8002158 <FLASH_SetErrorCode+0xc4>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80020e0:	4b1e      	ldr	r3, [pc, #120]	@ (800215c <FLASH_SetErrorCode+0xc8>)
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	4a1c      	ldr	r2, [pc, #112]	@ (800215c <FLASH_SetErrorCode+0xc8>)
 80020ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80020ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <FLASH_SetErrorCode+0xc4>)
 80020ee:	2240      	movs	r2, #64	@ 0x40
 80020f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80020f2:	4b19      	ldr	r3, [pc, #100]	@ (8002158 <FLASH_SetErrorCode+0xc4>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80020fe:	4b17      	ldr	r3, [pc, #92]	@ (800215c <FLASH_SetErrorCode+0xc8>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f043 0302 	orr.w	r3, r3, #2
 8002106:	4a15      	ldr	r2, [pc, #84]	@ (800215c <FLASH_SetErrorCode+0xc8>)
 8002108:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800210a:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <FLASH_SetErrorCode+0xc4>)
 800210c:	2280      	movs	r2, #128	@ 0x80
 800210e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002110:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <FLASH_SetErrorCode+0xc4>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d009      	beq.n	8002130 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800211c:	4b0f      	ldr	r3, [pc, #60]	@ (800215c <FLASH_SetErrorCode+0xc8>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	4a0d      	ldr	r2, [pc, #52]	@ (800215c <FLASH_SetErrorCode+0xc8>)
 8002126:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <FLASH_SetErrorCode+0xc4>)
 800212a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800212e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002130:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <FLASH_SetErrorCode+0xc4>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800213c:	4b07      	ldr	r3, [pc, #28]	@ (800215c <FLASH_SetErrorCode+0xc8>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	f043 0320 	orr.w	r3, r3, #32
 8002144:	4a05      	ldr	r2, [pc, #20]	@ (800215c <FLASH_SetErrorCode+0xc8>)
 8002146:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002148:	4b03      	ldr	r3, [pc, #12]	@ (8002158 <FLASH_SetErrorCode+0xc4>)
 800214a:	2202      	movs	r2, #2
 800214c:	60da      	str	r2, [r3, #12]
  }
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	40023c00 	.word	0x40023c00
 800215c:	20000554 	.word	0x20000554

08002160 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002172:	4b31      	ldr	r3, [pc, #196]	@ (8002238 <HAL_FLASHEx_Erase+0xd8>)
 8002174:	7e1b      	ldrb	r3, [r3, #24]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_FLASHEx_Erase+0x1e>
 800217a:	2302      	movs	r3, #2
 800217c:	e058      	b.n	8002230 <HAL_FLASHEx_Erase+0xd0>
 800217e:	4b2e      	ldr	r3, [pc, #184]	@ (8002238 <HAL_FLASHEx_Erase+0xd8>)
 8002180:	2201      	movs	r2, #1
 8002182:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002184:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002188:	f7ff feaa 	bl	8001ee0 <FLASH_WaitForLastOperation>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d148      	bne.n	8002228 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f04f 32ff 	mov.w	r2, #4294967295
 800219c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d115      	bne.n	80021d2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4619      	mov	r1, r3
 80021b2:	4610      	mov	r0, r2
 80021b4:	f000 f844 	bl	8002240 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021b8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80021bc:	f7ff fe90 	bl	8001ee0 <FLASH_WaitForLastOperation>
 80021c0:	4603      	mov	r3, r0
 80021c2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80021c4:	4b1d      	ldr	r3, [pc, #116]	@ (800223c <HAL_FLASHEx_Erase+0xdc>)
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	4a1c      	ldr	r2, [pc, #112]	@ (800223c <HAL_FLASHEx_Erase+0xdc>)
 80021ca:	f023 0304 	bic.w	r3, r3, #4
 80021ce:	6113      	str	r3, [r2, #16]
 80021d0:	e028      	b.n	8002224 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	e01c      	b.n	8002214 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	4619      	mov	r1, r3
 80021e2:	68b8      	ldr	r0, [r7, #8]
 80021e4:	f000 f850 	bl	8002288 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021e8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80021ec:	f7ff fe78 	bl	8001ee0 <FLASH_WaitForLastOperation>
 80021f0:	4603      	mov	r3, r0
 80021f2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80021f4:	4b11      	ldr	r3, [pc, #68]	@ (800223c <HAL_FLASHEx_Erase+0xdc>)
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	4a10      	ldr	r2, [pc, #64]	@ (800223c <HAL_FLASHEx_Erase+0xdc>)
 80021fa:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80021fe:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	601a      	str	r2, [r3, #0]
          break;
 800220c:	e00a      	b.n	8002224 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3301      	adds	r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4413      	add	r3, r2
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	429a      	cmp	r2, r3
 8002222:	d3da      	bcc.n	80021da <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002224:	f000 f878 	bl	8002318 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002228:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <HAL_FLASHEx_Erase+0xd8>)
 800222a:	2200      	movs	r2, #0
 800222c:	761a      	strb	r2, [r3, #24]

  return status;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000554 	.word	0x20000554
 800223c:	40023c00 	.word	0x40023c00

08002240 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800224c:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <FLASH_MassErase+0x44>)
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	4a0c      	ldr	r2, [pc, #48]	@ (8002284 <FLASH_MassErase+0x44>)
 8002252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002256:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002258:	4b0a      	ldr	r3, [pc, #40]	@ (8002284 <FLASH_MassErase+0x44>)
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	4a09      	ldr	r2, [pc, #36]	@ (8002284 <FLASH_MassErase+0x44>)
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002264:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <FLASH_MassErase+0x44>)
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	4313      	orrs	r3, r2
 800226e:	4a05      	ldr	r2, [pc, #20]	@ (8002284 <FLASH_MassErase+0x44>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002274:	6113      	str	r3, [r2, #16]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40023c00 	.word	0x40023c00

08002288 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	e010      	b.n	80022c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d103      	bne.n	80022b2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80022aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e009      	b.n	80022c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d103      	bne.n	80022c0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80022b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	e002      	b.n	80022c6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80022c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022c4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80022c6:	4b13      	ldr	r3, [pc, #76]	@ (8002314 <FLASH_Erase_Sector+0x8c>)
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	4a12      	ldr	r2, [pc, #72]	@ (8002314 <FLASH_Erase_Sector+0x8c>)
 80022cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80022d2:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <FLASH_Erase_Sector+0x8c>)
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	490f      	ldr	r1, [pc, #60]	@ (8002314 <FLASH_Erase_Sector+0x8c>)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80022de:	4b0d      	ldr	r3, [pc, #52]	@ (8002314 <FLASH_Erase_Sector+0x8c>)
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002314 <FLASH_Erase_Sector+0x8c>)
 80022e4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80022e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <FLASH_Erase_Sector+0x8c>)
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4313      	orrs	r3, r2
 80022f4:	4a07      	ldr	r2, [pc, #28]	@ (8002314 <FLASH_Erase_Sector+0x8c>)
 80022f6:	f043 0302 	orr.w	r3, r3, #2
 80022fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80022fc:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <FLASH_Erase_Sector+0x8c>)
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <FLASH_Erase_Sector+0x8c>)
 8002302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002306:	6113      	str	r3, [r2, #16]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40023c00 	.word	0x40023c00

08002318 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800231c:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002324:	2b00      	cmp	r3, #0
 8002326:	d017      	beq.n	8002358 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002328:	4b1d      	ldr	r3, [pc, #116]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1c      	ldr	r2, [pc, #112]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 800232e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002332:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002334:	4b1a      	ldr	r3, [pc, #104]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a19      	ldr	r2, [pc, #100]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 800233a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b17      	ldr	r3, [pc, #92]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a16      	ldr	r2, [pc, #88]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 8002346:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800234a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800234c:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a13      	ldr	r2, [pc, #76]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 8002352:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002356:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d017      	beq.n	8002394 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002364:	4b0e      	ldr	r3, [pc, #56]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0d      	ldr	r2, [pc, #52]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 800236a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800236e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002370:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 8002376:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a07      	ldr	r2, [pc, #28]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 8002382:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002386:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002388:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <FLASH_FlushCaches+0x88>)
 800238e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002392:	6013      	str	r3, [r2, #0]
  }
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40023c00 	.word	0x40023c00

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	@ 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e159      	b.n	8002674 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	f040 8148 	bne.w	800266e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d005      	beq.n	80023f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d130      	bne.n	8002458 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800242c:	2201      	movs	r2, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 0201 	and.w	r2, r3, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b03      	cmp	r3, #3
 8002462:	d017      	beq.n	8002494 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d123      	bne.n	80024e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	69b9      	ldr	r1, [r7, #24]
 80024e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0203 	and.w	r2, r3, #3
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80a2 	beq.w	800266e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b57      	ldr	r3, [pc, #348]	@ (800268c <HAL_GPIO_Init+0x2e8>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	4a56      	ldr	r2, [pc, #344]	@ (800268c <HAL_GPIO_Init+0x2e8>)
 8002534:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002538:	6453      	str	r3, [r2, #68]	@ 0x44
 800253a:	4b54      	ldr	r3, [pc, #336]	@ (800268c <HAL_GPIO_Init+0x2e8>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002546:	4a52      	ldr	r2, [pc, #328]	@ (8002690 <HAL_GPIO_Init+0x2ec>)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a49      	ldr	r2, [pc, #292]	@ (8002694 <HAL_GPIO_Init+0x2f0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d019      	beq.n	80025a6 <HAL_GPIO_Init+0x202>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a48      	ldr	r2, [pc, #288]	@ (8002698 <HAL_GPIO_Init+0x2f4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d013      	beq.n	80025a2 <HAL_GPIO_Init+0x1fe>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a47      	ldr	r2, [pc, #284]	@ (800269c <HAL_GPIO_Init+0x2f8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00d      	beq.n	800259e <HAL_GPIO_Init+0x1fa>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a46      	ldr	r2, [pc, #280]	@ (80026a0 <HAL_GPIO_Init+0x2fc>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d007      	beq.n	800259a <HAL_GPIO_Init+0x1f6>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a45      	ldr	r2, [pc, #276]	@ (80026a4 <HAL_GPIO_Init+0x300>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d101      	bne.n	8002596 <HAL_GPIO_Init+0x1f2>
 8002592:	2304      	movs	r3, #4
 8002594:	e008      	b.n	80025a8 <HAL_GPIO_Init+0x204>
 8002596:	2307      	movs	r3, #7
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x204>
 800259a:	2303      	movs	r3, #3
 800259c:	e004      	b.n	80025a8 <HAL_GPIO_Init+0x204>
 800259e:	2302      	movs	r3, #2
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_Init+0x204>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_GPIO_Init+0x204>
 80025a6:	2300      	movs	r3, #0
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	f002 0203 	and.w	r2, r2, #3
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	4093      	lsls	r3, r2
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b8:	4935      	ldr	r1, [pc, #212]	@ (8002690 <HAL_GPIO_Init+0x2ec>)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	3302      	adds	r3, #2
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025c6:	4b38      	ldr	r3, [pc, #224]	@ (80026a8 <HAL_GPIO_Init+0x304>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ea:	4a2f      	ldr	r2, [pc, #188]	@ (80026a8 <HAL_GPIO_Init+0x304>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025f0:	4b2d      	ldr	r3, [pc, #180]	@ (80026a8 <HAL_GPIO_Init+0x304>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002614:	4a24      	ldr	r2, [pc, #144]	@ (80026a8 <HAL_GPIO_Init+0x304>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800261a:	4b23      	ldr	r3, [pc, #140]	@ (80026a8 <HAL_GPIO_Init+0x304>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800263e:	4a1a      	ldr	r2, [pc, #104]	@ (80026a8 <HAL_GPIO_Init+0x304>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002644:	4b18      	ldr	r3, [pc, #96]	@ (80026a8 <HAL_GPIO_Init+0x304>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002668:	4a0f      	ldr	r2, [pc, #60]	@ (80026a8 <HAL_GPIO_Init+0x304>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3301      	adds	r3, #1
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	2b0f      	cmp	r3, #15
 8002678:	f67f aea2 	bls.w	80023c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3724      	adds	r7, #36	@ 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800
 8002690:	40013800 	.word	0x40013800
 8002694:	40020000 	.word	0x40020000
 8002698:	40020400 	.word	0x40020400
 800269c:	40020800 	.word	0x40020800
 80026a0:	40020c00 	.word	0x40020c00
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40013c00 	.word	0x40013c00

080026ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	e0bb      	b.n	8002840 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c8:	2201      	movs	r2, #1
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	429a      	cmp	r2, r3
 80026e0:	f040 80ab 	bne.w	800283a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80026e4:	4a5c      	ldr	r2, [pc, #368]	@ (8002858 <HAL_GPIO_DeInit+0x1ac>)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	089b      	lsrs	r3, r3, #2
 80026ea:	3302      	adds	r3, #2
 80026ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	220f      	movs	r2, #15
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	4013      	ands	r3, r2
 8002704:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a54      	ldr	r2, [pc, #336]	@ (800285c <HAL_GPIO_DeInit+0x1b0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d019      	beq.n	8002742 <HAL_GPIO_DeInit+0x96>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a53      	ldr	r2, [pc, #332]	@ (8002860 <HAL_GPIO_DeInit+0x1b4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_GPIO_DeInit+0x92>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a52      	ldr	r2, [pc, #328]	@ (8002864 <HAL_GPIO_DeInit+0x1b8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00d      	beq.n	800273a <HAL_GPIO_DeInit+0x8e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a51      	ldr	r2, [pc, #324]	@ (8002868 <HAL_GPIO_DeInit+0x1bc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_DeInit+0x8a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a50      	ldr	r2, [pc, #320]	@ (800286c <HAL_GPIO_DeInit+0x1c0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_GPIO_DeInit+0x86>
 800272e:	2304      	movs	r3, #4
 8002730:	e008      	b.n	8002744 <HAL_GPIO_DeInit+0x98>
 8002732:	2307      	movs	r3, #7
 8002734:	e006      	b.n	8002744 <HAL_GPIO_DeInit+0x98>
 8002736:	2303      	movs	r3, #3
 8002738:	e004      	b.n	8002744 <HAL_GPIO_DeInit+0x98>
 800273a:	2302      	movs	r3, #2
 800273c:	e002      	b.n	8002744 <HAL_GPIO_DeInit+0x98>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_GPIO_DeInit+0x98>
 8002742:	2300      	movs	r3, #0
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	f002 0203 	and.w	r2, r2, #3
 800274a:	0092      	lsls	r2, r2, #2
 800274c:	4093      	lsls	r3, r2
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	429a      	cmp	r2, r3
 8002752:	d132      	bne.n	80027ba <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002754:	4b46      	ldr	r3, [pc, #280]	@ (8002870 <HAL_GPIO_DeInit+0x1c4>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43db      	mvns	r3, r3
 800275c:	4944      	ldr	r1, [pc, #272]	@ (8002870 <HAL_GPIO_DeInit+0x1c4>)
 800275e:	4013      	ands	r3, r2
 8002760:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002762:	4b43      	ldr	r3, [pc, #268]	@ (8002870 <HAL_GPIO_DeInit+0x1c4>)
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	43db      	mvns	r3, r3
 800276a:	4941      	ldr	r1, [pc, #260]	@ (8002870 <HAL_GPIO_DeInit+0x1c4>)
 800276c:	4013      	ands	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002770:	4b3f      	ldr	r3, [pc, #252]	@ (8002870 <HAL_GPIO_DeInit+0x1c4>)
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	43db      	mvns	r3, r3
 8002778:	493d      	ldr	r1, [pc, #244]	@ (8002870 <HAL_GPIO_DeInit+0x1c4>)
 800277a:	4013      	ands	r3, r2
 800277c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800277e:	4b3c      	ldr	r3, [pc, #240]	@ (8002870 <HAL_GPIO_DeInit+0x1c4>)
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	43db      	mvns	r3, r3
 8002786:	493a      	ldr	r1, [pc, #232]	@ (8002870 <HAL_GPIO_DeInit+0x1c4>)
 8002788:	4013      	ands	r3, r2
 800278a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	220f      	movs	r2, #15
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800279c:	4a2e      	ldr	r2, [pc, #184]	@ (8002858 <HAL_GPIO_DeInit+0x1ac>)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	43da      	mvns	r2, r3
 80027ac:	482a      	ldr	r0, [pc, #168]	@ (8002858 <HAL_GPIO_DeInit+0x1ac>)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	089b      	lsrs	r3, r3, #2
 80027b2:	400a      	ands	r2, r1
 80027b4:	3302      	adds	r3, #2
 80027b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2103      	movs	r1, #3
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	401a      	ands	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	08da      	lsrs	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3208      	adds	r2, #8
 80027d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	220f      	movs	r2, #15
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	08d2      	lsrs	r2, r2, #3
 80027f0:	4019      	ands	r1, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3208      	adds	r2, #8
 80027f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2103      	movs	r1, #3
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	401a      	ands	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	2101      	movs	r1, #1
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	401a      	ands	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	2103      	movs	r1, #3
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	401a      	ands	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	3301      	adds	r3, #1
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2b0f      	cmp	r3, #15
 8002844:	f67f af40 	bls.w	80026c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40013800 	.word	0x40013800
 800285c:	40020000 	.word	0x40020000
 8002860:	40020400 	.word	0x40020400
 8002864:	40020800 	.word	0x40020800
 8002868:	40020c00 	.word	0x40020c00
 800286c:	40021000 	.word	0x40021000
 8002870:	40013c00 	.word	0x40013c00

08002874 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	887b      	ldrh	r3, [r7, #2]
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
 8002890:	e001      	b.n	8002896 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
 80028b0:	4613      	mov	r3, r2
 80028b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b4:	787b      	ldrb	r3, [r7, #1]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028c0:	e003      	b.n	80028ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028c2:	887b      	ldrh	r3, [r7, #2]
 80028c4:	041a      	lsls	r2, r3, #16
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	619a      	str	r2, [r3, #24]
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e267      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d075      	beq.n	80029e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028f6:	4b88      	ldr	r3, [pc, #544]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d00c      	beq.n	800291c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002902:	4b85      	ldr	r3, [pc, #532]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800290a:	2b08      	cmp	r3, #8
 800290c:	d112      	bne.n	8002934 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800290e:	4b82      	ldr	r3, [pc, #520]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002916:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800291a:	d10b      	bne.n	8002934 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d05b      	beq.n	80029e0 <HAL_RCC_OscConfig+0x108>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d157      	bne.n	80029e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e242      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800293c:	d106      	bne.n	800294c <HAL_RCC_OscConfig+0x74>
 800293e:	4b76      	ldr	r3, [pc, #472]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a75      	ldr	r2, [pc, #468]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e01d      	b.n	8002988 <HAL_RCC_OscConfig+0xb0>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x98>
 8002956:	4b70      	ldr	r3, [pc, #448]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a6f      	ldr	r2, [pc, #444]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 800295c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b6d      	ldr	r3, [pc, #436]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a6c      	ldr	r2, [pc, #432]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e00b      	b.n	8002988 <HAL_RCC_OscConfig+0xb0>
 8002970:	4b69      	ldr	r3, [pc, #420]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a68      	ldr	r2, [pc, #416]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b66      	ldr	r3, [pc, #408]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a65      	ldr	r2, [pc, #404]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d013      	beq.n	80029b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7ff f800 	bl	8001994 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002998:	f7fe fffc 	bl	8001994 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	@ 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e207      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0xc0>
 80029b6:	e014      	b.n	80029e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7fe ffec 	bl	8001994 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c0:	f7fe ffe8 	bl	8001994 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	@ 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e1f3      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d2:	4b51      	ldr	r3, [pc, #324]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0xe8>
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d063      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00b      	beq.n	8002a12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029fa:	4b47      	ldr	r3, [pc, #284]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d11c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a06:	4b44      	ldr	r3, [pc, #272]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d116      	bne.n	8002a40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a12:	4b41      	ldr	r3, [pc, #260]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_RCC_OscConfig+0x152>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d001      	beq.n	8002a2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e1c7      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4937      	ldr	r1, [pc, #220]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3e:	e03a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d020      	beq.n	8002a8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a48:	4b34      	ldr	r3, [pc, #208]	@ (8002b1c <HAL_RCC_OscConfig+0x244>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4e:	f7fe ffa1 	bl	8001994 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a56:	f7fe ff9d 	bl	8001994 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e1a8      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a68:	4b2b      	ldr	r3, [pc, #172]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a74:	4b28      	ldr	r3, [pc, #160]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4925      	ldr	r1, [pc, #148]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	600b      	str	r3, [r1, #0]
 8002a88:	e015      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8a:	4b24      	ldr	r3, [pc, #144]	@ (8002b1c <HAL_RCC_OscConfig+0x244>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe ff80 	bl	8001994 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a98:	f7fe ff7c 	bl	8001994 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e187      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d036      	beq.n	8002b30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d016      	beq.n	8002af8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aca:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <HAL_RCC_OscConfig+0x248>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7fe ff60 	bl	8001994 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad8:	f7fe ff5c 	bl	8001994 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e167      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aea:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <HAL_RCC_OscConfig+0x240>)
 8002aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x200>
 8002af6:	e01b      	b.n	8002b30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af8:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <HAL_RCC_OscConfig+0x248>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afe:	f7fe ff49 	bl	8001994 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b04:	e00e      	b.n	8002b24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b06:	f7fe ff45 	bl	8001994 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d907      	bls.n	8002b24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e150      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	42470000 	.word	0x42470000
 8002b20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b24:	4b88      	ldr	r3, [pc, #544]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1ea      	bne.n	8002b06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 8097 	beq.w	8002c6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b42:	4b81      	ldr	r3, [pc, #516]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10f      	bne.n	8002b6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	4b7d      	ldr	r3, [pc, #500]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	4a7c      	ldr	r2, [pc, #496]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6e:	4b77      	ldr	r3, [pc, #476]	@ (8002d4c <HAL_RCC_OscConfig+0x474>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d118      	bne.n	8002bac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7a:	4b74      	ldr	r3, [pc, #464]	@ (8002d4c <HAL_RCC_OscConfig+0x474>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a73      	ldr	r2, [pc, #460]	@ (8002d4c <HAL_RCC_OscConfig+0x474>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b86:	f7fe ff05 	bl	8001994 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8e:	f7fe ff01 	bl	8001994 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e10c      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	4b6a      	ldr	r3, [pc, #424]	@ (8002d4c <HAL_RCC_OscConfig+0x474>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x2ea>
 8002bb4:	4b64      	ldr	r3, [pc, #400]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb8:	4a63      	ldr	r2, [pc, #396]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc0:	e01c      	b.n	8002bfc <HAL_RCC_OscConfig+0x324>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b05      	cmp	r3, #5
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x30c>
 8002bca:	4b5f      	ldr	r3, [pc, #380]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bce:	4a5e      	ldr	r2, [pc, #376]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bd0:	f043 0304 	orr.w	r3, r3, #4
 8002bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd6:	4b5c      	ldr	r3, [pc, #368]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bda:	4a5b      	ldr	r2, [pc, #364]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be2:	e00b      	b.n	8002bfc <HAL_RCC_OscConfig+0x324>
 8002be4:	4b58      	ldr	r3, [pc, #352]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be8:	4a57      	ldr	r2, [pc, #348]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf0:	4b55      	ldr	r3, [pc, #340]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf4:	4a54      	ldr	r2, [pc, #336]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	f023 0304 	bic.w	r3, r3, #4
 8002bfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d015      	beq.n	8002c30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7fe fec6 	bl	8001994 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0c:	f7fe fec2 	bl	8001994 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e0cb      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c22:	4b49      	ldr	r3, [pc, #292]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0ee      	beq.n	8002c0c <HAL_RCC_OscConfig+0x334>
 8002c2e:	e014      	b.n	8002c5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c30:	f7fe feb0 	bl	8001994 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c38:	f7fe feac 	bl	8001994 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e0b5      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ee      	bne.n	8002c38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d105      	bne.n	8002c6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c60:	4b39      	ldr	r3, [pc, #228]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	4a38      	ldr	r2, [pc, #224]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002c66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80a1 	beq.w	8002db8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c76:	4b34      	ldr	r3, [pc, #208]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d05c      	beq.n	8002d3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d141      	bne.n	8002d0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	4b31      	ldr	r3, [pc, #196]	@ (8002d50 <HAL_RCC_OscConfig+0x478>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe fe80 	bl	8001994 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe fe7c 	bl	8001994 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e087      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	4b27      	ldr	r3, [pc, #156]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69da      	ldr	r2, [r3, #28]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	019b      	lsls	r3, r3, #6
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	041b      	lsls	r3, r3, #16
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	491b      	ldr	r1, [pc, #108]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d50 <HAL_RCC_OscConfig+0x478>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fe55 	bl	8001994 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cee:	f7fe fe51 	bl	8001994 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e05c      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d00:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x416>
 8002d0c:	e054      	b.n	8002db8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0e:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <HAL_RCC_OscConfig+0x478>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fe fe3e 	bl	8001994 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe fe3a 	bl	8001994 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e045      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2e:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <HAL_RCC_OscConfig+0x470>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x444>
 8002d3a:	e03d      	b.n	8002db8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e038      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc4 <HAL_RCC_OscConfig+0x4ec>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d028      	beq.n	8002db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d121      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d11a      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d84:	4013      	ands	r3, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d111      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9a:	085b      	lsrs	r3, r3, #1
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800

08002dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0cc      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b68      	ldr	r3, [pc, #416]	@ (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d90c      	bls.n	8002e04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b65      	ldr	r3, [pc, #404]	@ (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df2:	4b63      	ldr	r3, [pc, #396]	@ (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0b8      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e1c:	4b59      	ldr	r3, [pc, #356]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	4a58      	ldr	r2, [pc, #352]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e34:	4b53      	ldr	r3, [pc, #332]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4a52      	ldr	r2, [pc, #328]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e40:	4b50      	ldr	r3, [pc, #320]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	494d      	ldr	r1, [pc, #308]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d044      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e66:	4b47      	ldr	r3, [pc, #284]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d119      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e07f      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d003      	beq.n	8002e86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e86:	4b3f      	ldr	r3, [pc, #252]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e06f      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e96:	4b3b      	ldr	r3, [pc, #236]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e067      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea6:	4b37      	ldr	r3, [pc, #220]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4934      	ldr	r1, [pc, #208]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb8:	f7fe fd6c 	bl	8001994 <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec0:	f7fe fd68 	bl	8001994 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e04f      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 020c 	and.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1eb      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b25      	ldr	r3, [pc, #148]	@ (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d20c      	bcs.n	8002f10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b22      	ldr	r3, [pc, #136]	@ (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b20      	ldr	r3, [pc, #128]	@ (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e032      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f1c:	4b19      	ldr	r3, [pc, #100]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4916      	ldr	r1, [pc, #88]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f3a:	4b12      	ldr	r3, [pc, #72]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	490e      	ldr	r1, [pc, #56]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f4e:	f000 f821 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8002f52:	4602      	mov	r2, r0
 8002f54:	4b0b      	ldr	r3, [pc, #44]	@ (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	490a      	ldr	r1, [pc, #40]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	5ccb      	ldrb	r3, [r1, r3]
 8002f62:	fa22 f303 	lsr.w	r3, r2, r3
 8002f66:	4a09      	ldr	r2, [pc, #36]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f6a:	4b09      	ldr	r3, [pc, #36]	@ (8002f90 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fccc 	bl	800190c <HAL_InitTick>

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023c00 	.word	0x40023c00
 8002f84:	40023800 	.word	0x40023800
 8002f88:	080057d8 	.word	0x080057d8
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	20000014 	.word	0x20000014

08002f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f98:	b090      	sub	sp, #64	@ 0x40
 8002f9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fac:	4b59      	ldr	r3, [pc, #356]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d00d      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	f200 80a1 	bhi.w	8003100 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d003      	beq.n	8002fce <HAL_RCC_GetSysClockFreq+0x3a>
 8002fc6:	e09b      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc8:	4b53      	ldr	r3, [pc, #332]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fca:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002fcc:	e09b      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fce:	4b53      	ldr	r3, [pc, #332]	@ (800311c <HAL_RCC_GetSysClockFreq+0x188>)
 8002fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fd2:	e098      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd4:	4b4f      	ldr	r3, [pc, #316]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fdc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fde:	4b4d      	ldr	r3, [pc, #308]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d028      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fea:	4b4a      	ldr	r3, [pc, #296]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	099b      	lsrs	r3, r3, #6
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	623b      	str	r3, [r7, #32]
 8002ff4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4b47      	ldr	r3, [pc, #284]	@ (800311c <HAL_RCC_GetSysClockFreq+0x188>)
 8003000:	fb03 f201 	mul.w	r2, r3, r1
 8003004:	2300      	movs	r3, #0
 8003006:	fb00 f303 	mul.w	r3, r0, r3
 800300a:	4413      	add	r3, r2
 800300c:	4a43      	ldr	r2, [pc, #268]	@ (800311c <HAL_RCC_GetSysClockFreq+0x188>)
 800300e:	fba0 1202 	umull	r1, r2, r0, r2
 8003012:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003014:	460a      	mov	r2, r1
 8003016:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003018:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800301a:	4413      	add	r3, r2
 800301c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800301e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003020:	2200      	movs	r2, #0
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	61fa      	str	r2, [r7, #28]
 8003026:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800302a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800302e:	f7fd f927 	bl	8000280 <__aeabi_uldivmod>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4613      	mov	r3, r2
 8003038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800303a:	e053      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303c:	4b35      	ldr	r3, [pc, #212]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x180>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	099b      	lsrs	r3, r3, #6
 8003042:	2200      	movs	r2, #0
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	617a      	str	r2, [r7, #20]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800304e:	f04f 0b00 	mov.w	fp, #0
 8003052:	4652      	mov	r2, sl
 8003054:	465b      	mov	r3, fp
 8003056:	f04f 0000 	mov.w	r0, #0
 800305a:	f04f 0100 	mov.w	r1, #0
 800305e:	0159      	lsls	r1, r3, #5
 8003060:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003064:	0150      	lsls	r0, r2, #5
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	ebb2 080a 	subs.w	r8, r2, sl
 800306e:	eb63 090b 	sbc.w	r9, r3, fp
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800307e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003082:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003086:	ebb2 0408 	subs.w	r4, r2, r8
 800308a:	eb63 0509 	sbc.w	r5, r3, r9
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	00eb      	lsls	r3, r5, #3
 8003098:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800309c:	00e2      	lsls	r2, r4, #3
 800309e:	4614      	mov	r4, r2
 80030a0:	461d      	mov	r5, r3
 80030a2:	eb14 030a 	adds.w	r3, r4, sl
 80030a6:	603b      	str	r3, [r7, #0]
 80030a8:	eb45 030b 	adc.w	r3, r5, fp
 80030ac:	607b      	str	r3, [r7, #4]
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ba:	4629      	mov	r1, r5
 80030bc:	028b      	lsls	r3, r1, #10
 80030be:	4621      	mov	r1, r4
 80030c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030c4:	4621      	mov	r1, r4
 80030c6:	028a      	lsls	r2, r1, #10
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ce:	2200      	movs	r2, #0
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	60fa      	str	r2, [r7, #12]
 80030d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030d8:	f7fd f8d2 	bl	8000280 <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4613      	mov	r3, r2
 80030e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x180>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	0c1b      	lsrs	r3, r3, #16
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	3301      	adds	r3, #1
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80030f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030fe:	e002      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003100:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x184>)
 8003102:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003108:	4618      	mov	r0, r3
 800310a:	3740      	adds	r7, #64	@ 0x40
 800310c:	46bd      	mov	sp, r7
 800310e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800
 8003118:	00f42400 	.word	0x00f42400
 800311c:	017d7840 	.word	0x017d7840

08003120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003124:	4b03      	ldr	r3, [pc, #12]	@ (8003134 <HAL_RCC_GetHCLKFreq+0x14>)
 8003126:	681b      	ldr	r3, [r3, #0]
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20000000 	.word	0x20000000

08003138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800313c:	f7ff fff0 	bl	8003120 <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b05      	ldr	r3, [pc, #20]	@ (8003158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	0a9b      	lsrs	r3, r3, #10
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4903      	ldr	r1, [pc, #12]	@ (800315c <HAL_RCC_GetPCLK1Freq+0x24>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40023800 	.word	0x40023800
 800315c:	080057e8 	.word	0x080057e8

08003160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003164:	f7ff ffdc 	bl	8003120 <HAL_RCC_GetHCLKFreq>
 8003168:	4602      	mov	r2, r0
 800316a:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	0b5b      	lsrs	r3, r3, #13
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	4903      	ldr	r1, [pc, #12]	@ (8003184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003176:	5ccb      	ldrb	r3, [r1, r3]
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800317c:	4618      	mov	r0, r3
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40023800 	.word	0x40023800
 8003184:	080057e8 	.word	0x080057e8

08003188 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800318e:	f7fe fc01 	bl	8001994 <HAL_GetTick>
 8003192:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003194:	4b5d      	ldr	r3, [pc, #372]	@ (800330c <HAL_RCC_DeInit+0x184>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a5c      	ldr	r2, [pc, #368]	@ (800330c <HAL_RCC_DeInit+0x184>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a2:	f7fe fbf7 	bl	8001994 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e0a7      	b.n	8003304 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80031b4:	4b55      	ldr	r3, [pc, #340]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80031c0:	4b52      	ldr	r3, [pc, #328]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a51      	ldr	r2, [pc, #324]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80031c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80031cc:	f7fe fbe2 	bl	8001994 <HAL_GetTick>
 80031d0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80031d2:	4b4e      	ldr	r3, [pc, #312]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80031d8:	e00a      	b.n	80031f0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031da:	f7fe fbdb 	bl	8001994 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e089      	b.n	8003304 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80031f0:	4b46      	ldr	r3, [pc, #280]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1ee      	bne.n	80031da <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80031fc:	f7fe fbca 	bl	8001994 <HAL_GetTick>
 8003200:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003202:	4b42      	ldr	r3, [pc, #264]	@ (800330c <HAL_RCC_DeInit+0x184>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a41      	ldr	r2, [pc, #260]	@ (800330c <HAL_RCC_DeInit+0x184>)
 8003208:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 800320c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7fe fbc0 	bl	8001994 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	@ 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e070      	b.n	8003304 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003222:	4b3a      	ldr	r3, [pc, #232]	@ (800330c <HAL_RCC_DeInit+0x184>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800322e:	f7fe fbb1 	bl	8001994 <HAL_GetTick>
 8003232:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003234:	4b35      	ldr	r3, [pc, #212]	@ (800330c <HAL_RCC_DeInit+0x184>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a34      	ldr	r2, [pc, #208]	@ (800330c <HAL_RCC_DeInit+0x184>)
 800323a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800323e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003240:	e008      	b.n	8003254 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003242:	f7fe fba7 	bl	8001994 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e057      	b.n	8003304 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003254:	4b2d      	ldr	r3, [pc, #180]	@ (800330c <HAL_RCC_DeInit+0x184>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f0      	bne.n	8003242 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003260:	f7fe fb98 	bl	8001994 <HAL_GetTick>
 8003264:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003266:	4b29      	ldr	r3, [pc, #164]	@ (800330c <HAL_RCC_DeInit+0x184>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a28      	ldr	r2, [pc, #160]	@ (800330c <HAL_RCC_DeInit+0x184>)
 800326c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003270:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003274:	f7fe fb8e 	bl	8001994 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e03e      	b.n	8003304 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003286:	4b21      	ldr	r3, [pc, #132]	@ (800330c <HAL_RCC_DeInit+0x184>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003292:	4b1e      	ldr	r3, [pc, #120]	@ (800330c <HAL_RCC_DeInit+0x184>)
 8003294:	4a1e      	ldr	r2, [pc, #120]	@ (8003310 <HAL_RCC_DeInit+0x188>)
 8003296:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003298:	4b1c      	ldr	r3, [pc, #112]	@ (800330c <HAL_RCC_DeInit+0x184>)
 800329a:	4a1e      	ldr	r2, [pc, #120]	@ (8003314 <HAL_RCC_DeInit+0x18c>)
 800329c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80032a0:	4b1a      	ldr	r3, [pc, #104]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4a19      	ldr	r2, [pc, #100]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80032a6:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80032aa:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80032ac:	4b17      	ldr	r3, [pc, #92]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4a16      	ldr	r2, [pc, #88]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80032b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032b6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80032b8:	4b14      	ldr	r3, [pc, #80]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4a13      	ldr	r2, [pc, #76]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80032be:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 80032c2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80032c4:	4b11      	ldr	r3, [pc, #68]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4a10      	ldr	r2, [pc, #64]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80032ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80032ce:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80032d0:	4b0e      	ldr	r3, [pc, #56]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80032d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d4:	4a0d      	ldr	r2, [pc, #52]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80032d6:	f023 0301 	bic.w	r3, r3, #1
 80032da:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80032dc:	4b0b      	ldr	r3, [pc, #44]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80032de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e0:	4a0a      	ldr	r2, [pc, #40]	@ (800330c <HAL_RCC_DeInit+0x184>)
 80032e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032e6:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80032e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003318 <HAL_RCC_DeInit+0x190>)
 80032ea:	4a0c      	ldr	r2, [pc, #48]	@ (800331c <HAL_RCC_DeInit+0x194>)
 80032ec:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80032ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <HAL_RCC_DeInit+0x198>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe fb0a 	bl	800190c <HAL_InitTick>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8003302:	2300      	movs	r3, #0
  }
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40023800 	.word	0x40023800
 8003310:	04003010 	.word	0x04003010
 8003314:	20003010 	.word	0x20003010
 8003318:	20000000 	.word	0x20000000
 800331c:	00f42400 	.word	0x00f42400
 8003320:	20000014 	.word	0x20000014

08003324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e07b      	b.n	800342e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d108      	bne.n	8003350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003346:	d009      	beq.n	800335c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	61da      	str	r2, [r3, #28]
 800334e:	e005      	b.n	800335c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd fb26 	bl	80009c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003392:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e0:	ea42 0103 	orr.w	r1, r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	f003 0104 	and.w	r1, r3, #4
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	f003 0210 	and.w	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800341c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e01a      	b.n	800347e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800345e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7fd faf9 	bl	8000a58 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b088      	sub	sp, #32
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	603b      	str	r3, [r7, #0]
 8003492:	4613      	mov	r3, r2
 8003494:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_SPI_Transmit+0x22>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e12d      	b.n	8003704 <HAL_SPI_Transmit+0x27e>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034b0:	f7fe fa70 	bl	8001994 <HAL_GetTick>
 80034b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d002      	beq.n	80034cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
 80034c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034ca:	e116      	b.n	80036fa <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_SPI_Transmit+0x52>
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034dc:	e10d      	b.n	80036fa <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2203      	movs	r2, #3
 80034e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	88fa      	ldrh	r2, [r7, #6]
 80034f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003524:	d10f      	bne.n	8003546 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003534:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003544:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003550:	2b40      	cmp	r3, #64	@ 0x40
 8003552:	d007      	beq.n	8003564 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800356c:	d14f      	bne.n	800360e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_SPI_Transmit+0xf6>
 8003576:	8afb      	ldrh	r3, [r7, #22]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d142      	bne.n	8003602 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003580:	881a      	ldrh	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	1c9a      	adds	r2, r3, #2
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035a0:	e02f      	b.n	8003602 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d112      	bne.n	80035d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b4:	881a      	ldrh	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c0:	1c9a      	adds	r2, r3, #2
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80035d4:	e015      	b.n	8003602 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035d6:	f7fe f9dd 	bl	8001994 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d803      	bhi.n	80035ee <HAL_SPI_Transmit+0x168>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d102      	bne.n	80035f4 <HAL_SPI_Transmit+0x16e>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d106      	bne.n	8003602 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003600:	e07b      	b.n	80036fa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1ca      	bne.n	80035a2 <HAL_SPI_Transmit+0x11c>
 800360c:	e050      	b.n	80036b0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_SPI_Transmit+0x196>
 8003616:	8afb      	ldrh	r3, [r7, #22]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d144      	bne.n	80036a6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	330c      	adds	r3, #12
 8003626:	7812      	ldrb	r2, [r2, #0]
 8003628:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003638:	b29b      	uxth	r3, r3
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003642:	e030      	b.n	80036a6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b02      	cmp	r3, #2
 8003650:	d113      	bne.n	800367a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	330c      	adds	r3, #12
 800365c:	7812      	ldrb	r2, [r2, #0]
 800365e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003678:	e015      	b.n	80036a6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800367a:	f7fe f98b 	bl	8001994 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d803      	bhi.n	8003692 <HAL_SPI_Transmit+0x20c>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d102      	bne.n	8003698 <HAL_SPI_Transmit+0x212>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80036a4:	e029      	b.n	80036fa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1c9      	bne.n	8003644 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	6839      	ldr	r1, [r7, #0]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f8b1 	bl	800381c <SPI_EndRxTxTransaction>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e003      	b.n	80036fa <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003702:	7ffb      	ldrb	r3, [r7, #31]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800371c:	f7fe f93a 	bl	8001994 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	4413      	add	r3, r2
 800372a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800372c:	f7fe f932 	bl	8001994 <HAL_GetTick>
 8003730:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003732:	4b39      	ldr	r3, [pc, #228]	@ (8003818 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	015b      	lsls	r3, r3, #5
 8003738:	0d1b      	lsrs	r3, r3, #20
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	fb02 f303 	mul.w	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003742:	e054      	b.n	80037ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d050      	beq.n	80037ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800374c:	f7fe f922 	bl	8001994 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	429a      	cmp	r2, r3
 800375a:	d902      	bls.n	8003762 <SPI_WaitFlagStateUntilTimeout+0x56>
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d13d      	bne.n	80037de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003770:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800377a:	d111      	bne.n	80037a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003784:	d004      	beq.n	8003790 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800378e:	d107      	bne.n	80037a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800379e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a8:	d10f      	bne.n	80037ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e017      	b.n	800380e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4013      	ands	r3, r2
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	429a      	cmp	r2, r3
 800380a:	d19b      	bne.n	8003744 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000000 	.word	0x20000000

0800381c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2201      	movs	r2, #1
 8003830:	2102      	movs	r1, #2
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff ff6a 	bl	800370c <SPI_WaitFlagStateUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003842:	f043 0220 	orr.w	r2, r3, #32
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e032      	b.n	80038b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800384e:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <SPI_EndRxTxTransaction+0xa0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1b      	ldr	r2, [pc, #108]	@ (80038c0 <SPI_EndRxTxTransaction+0xa4>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	0d5b      	lsrs	r3, r3, #21
 800385a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800386c:	d112      	bne.n	8003894 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2200      	movs	r2, #0
 8003876:	2180      	movs	r1, #128	@ 0x80
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f7ff ff47 	bl	800370c <SPI_WaitFlagStateUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d016      	beq.n	80038b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003888:	f043 0220 	orr.w	r2, r3, #32
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e00f      	b.n	80038b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	3b01      	subs	r3, #1
 800389e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038aa:	2b80      	cmp	r3, #128	@ 0x80
 80038ac:	d0f2      	beq.n	8003894 <SPI_EndRxTxTransaction+0x78>
 80038ae:	e000      	b.n	80038b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80038b0:	bf00      	nop
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000000 	.word	0x20000000
 80038c0:	165e9f81 	.word	0x165e9f81

080038c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e042      	b.n	800395c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd f8d2 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2224      	movs	r2, #36	@ 0x24
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fcb7 	bl	800427c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800391c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800392c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800393c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e024      	b.n	80039c0 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2224      	movs	r2, #36	@ 0x24
 800397a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800398c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fd f8d0 	bl	8000b34 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b0ba      	sub	sp, #232	@ 0xe8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10f      	bne.n	8003a2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d009      	beq.n	8003a2e <HAL_UART_IRQHandler+0x66>
 8003a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fb69 	bl	80040fe <UART_Receive_IT>
      return;
 8003a2c:	e25b      	b.n	8003ee6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 80de 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x22c>
 8003a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d106      	bne.n	8003a52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80d1 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_UART_IRQHandler+0xae>
 8003a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6e:	f043 0201 	orr.w	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <HAL_UART_IRQHandler+0xd2>
 8003a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a92:	f043 0202 	orr.w	r2, r3, #2
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <HAL_UART_IRQHandler+0xf6>
 8003aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab6:	f043 0204 	orr.w	r2, r3, #4
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d011      	beq.n	8003aee <HAL_UART_IRQHandler+0x126>
 8003aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d105      	bne.n	8003ae2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae6:	f043 0208 	orr.w	r2, r3, #8
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 81f2 	beq.w	8003edc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_UART_IRQHandler+0x14e>
 8003b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 faf4 	bl	80040fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b20:	2b40      	cmp	r3, #64	@ 0x40
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <HAL_UART_IRQHandler+0x17a>
 8003b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d04f      	beq.n	8003be2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f9fc 	bl	8003f40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b52:	2b40      	cmp	r3, #64	@ 0x40
 8003b54:	d141      	bne.n	8003bda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3314      	adds	r3, #20
 8003b5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3314      	adds	r3, #20
 8003b7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b92:	e841 2300 	strex	r3, r2, [r1]
 8003b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1d9      	bne.n	8003b56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d013      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bae:	4a7e      	ldr	r2, [pc, #504]	@ (8003da8 <HAL_UART_IRQHandler+0x3e0>)
 8003bb0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe f8e9 	bl	8001d8e <HAL_DMA_Abort_IT>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d016      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd0:	e00e      	b.n	8003bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f99e 	bl	8003f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd8:	e00a      	b.n	8003bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f99a 	bl	8003f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be0:	e006      	b.n	8003bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f996 	bl	8003f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003bee:	e175      	b.n	8003edc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf0:	bf00      	nop
    return;
 8003bf2:	e173      	b.n	8003edc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	f040 814f 	bne.w	8003e9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 8148 	beq.w	8003e9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8141 	beq.w	8003e9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3a:	2b40      	cmp	r3, #64	@ 0x40
 8003c3c:	f040 80b6 	bne.w	8003dac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8145 	beq.w	8003ee0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	f080 813e 	bcs.w	8003ee0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c76:	f000 8088 	beq.w	8003d8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	330c      	adds	r3, #12
 8003ca2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ca6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003caa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1d9      	bne.n	8003c7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3314      	adds	r3, #20
 8003ccc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3314      	adds	r3, #20
 8003ce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003cee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003cf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003cf6:	e841 2300 	strex	r3, r2, [r1]
 8003cfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003cfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e1      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3314      	adds	r3, #20
 8003d08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3314      	adds	r3, #20
 8003d22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e3      	bne.n	8003d02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d5a:	f023 0310 	bic.w	r3, r3, #16
 8003d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	330c      	adds	r3, #12
 8003d68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e3      	bne.n	8003d48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fd ff92 	bl	8001cae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	4619      	mov	r1, r3
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f8c1 	bl	8003f28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003da6:	e09b      	b.n	8003ee0 <HAL_UART_IRQHandler+0x518>
 8003da8:	08004007 	.word	0x08004007
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 808e 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8089 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	330c      	adds	r3, #12
 8003dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003de8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	330c      	adds	r3, #12
 8003df2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003df6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003df8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003dfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1e3      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3314      	adds	r3, #20
 8003e10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	e853 3f00 	ldrex	r3, [r3]
 8003e18:	623b      	str	r3, [r7, #32]
   return(result);
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3314      	adds	r3, #20
 8003e2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e3      	bne.n	8003e0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	330c      	adds	r3, #12
 8003e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0310 	bic.w	r3, r3, #16
 8003e66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e74:	61fa      	str	r2, [r7, #28]
 8003e76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	69b9      	ldr	r1, [r7, #24]
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	617b      	str	r3, [r7, #20]
   return(result);
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e3      	bne.n	8003e50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e92:	4619      	mov	r1, r3
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f847 	bl	8003f28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e9a:	e023      	b.n	8003ee4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d009      	beq.n	8003ebc <HAL_UART_IRQHandler+0x4f4>
 8003ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f8ba 	bl	800402e <UART_Transmit_IT>
    return;
 8003eba:	e014      	b.n	8003ee6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x51e>
 8003ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f8fa 	bl	80040ce <UART_EndTransmit_IT>
    return;
 8003eda:	e004      	b.n	8003ee6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003edc:	bf00      	nop
 8003ede:	e002      	b.n	8003ee6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ee0:	bf00      	nop
 8003ee2:	e000      	b.n	8003ee6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ee4:	bf00      	nop
  }
}
 8003ee6:	37e8      	adds	r7, #232	@ 0xe8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b095      	sub	sp, #84	@ 0x54
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f68:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e5      	bne.n	8003f48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3314      	adds	r3, #20
 8003f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3314      	adds	r3, #20
 8003f9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e5      	bne.n	8003f7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d119      	bne.n	8003fec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	e853 3f00 	ldrex	r3, [r3]
 8003fc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f023 0310 	bic.w	r3, r3, #16
 8003fce:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fd8:	61ba      	str	r2, [r7, #24]
 8003fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	6979      	ldr	r1, [r7, #20]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e5      	bne.n	8003fb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ffa:	bf00      	nop
 8003ffc:	3754      	adds	r7, #84	@ 0x54
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004012:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff ff77 	bl	8003f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b21      	cmp	r3, #33	@ 0x21
 8004040:	d13e      	bne.n	80040c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800404a:	d114      	bne.n	8004076 <UART_Transmit_IT+0x48>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d110      	bne.n	8004076 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004068:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	1c9a      	adds	r2, r3, #2
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	621a      	str	r2, [r3, #32]
 8004074:	e008      	b.n	8004088 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	1c59      	adds	r1, r3, #1
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6211      	str	r1, [r2, #32]
 8004080:	781a      	ldrb	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29b      	uxth	r3, r3
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4619      	mov	r1, r3
 8004096:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10f      	bne.n	80040bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	e000      	b.n	80040c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
  }
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff fefc 	bl	8003eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b08c      	sub	sp, #48	@ 0x30
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b22      	cmp	r3, #34	@ 0x22
 8004110:	f040 80ae 	bne.w	8004270 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800411c:	d117      	bne.n	800414e <UART_Receive_IT+0x50>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d113      	bne.n	800414e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004126:	2300      	movs	r3, #0
 8004128:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	b29b      	uxth	r3, r3
 8004138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413c:	b29a      	uxth	r2, r3
 800413e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004140:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	1c9a      	adds	r2, r3, #2
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	629a      	str	r2, [r3, #40]	@ 0x28
 800414c:	e026      	b.n	800419c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004152:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004154:	2300      	movs	r3, #0
 8004156:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004160:	d007      	beq.n	8004172 <UART_Receive_IT+0x74>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <UART_Receive_IT+0x82>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	b2da      	uxtb	r2, r3
 800417a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800417c:	701a      	strb	r2, [r3, #0]
 800417e:	e008      	b.n	8004192 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800418c:	b2da      	uxtb	r2, r3
 800418e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004190:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	4619      	mov	r1, r3
 80041aa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d15d      	bne.n	800426c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0220 	bic.w	r2, r2, #32
 80041be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d135      	bne.n	8004262 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	613b      	str	r3, [r7, #16]
   return(result);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f023 0310 	bic.w	r3, r3, #16
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421c:	623a      	str	r2, [r7, #32]
 800421e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	69f9      	ldr	r1, [r7, #28]
 8004222:	6a3a      	ldr	r2, [r7, #32]
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	61bb      	str	r3, [r7, #24]
   return(result);
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e5      	bne.n	80041fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b10      	cmp	r3, #16
 800423c:	d10a      	bne.n	8004254 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff fe64 	bl	8003f28 <HAL_UARTEx_RxEventCallback>
 8004260:	e002      	b.n	8004268 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff fe4c 	bl	8003f00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	e002      	b.n	8004272 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	e000      	b.n	8004272 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004270:	2302      	movs	r3, #2
  }
}
 8004272:	4618      	mov	r0, r3
 8004274:	3730      	adds	r7, #48	@ 0x30
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800427c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004280:	b0c0      	sub	sp, #256	@ 0x100
 8004282:	af00      	add	r7, sp, #0
 8004284:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004298:	68d9      	ldr	r1, [r3, #12]
 800429a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	ea40 0301 	orr.w	r3, r0, r1
 80042a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042d4:	f021 010c 	bic.w	r1, r1, #12
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042e2:	430b      	orrs	r3, r1
 80042e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f6:	6999      	ldr	r1, [r3, #24]
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	ea40 0301 	orr.w	r3, r0, r1
 8004302:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4b8f      	ldr	r3, [pc, #572]	@ (8004548 <UART_SetConfig+0x2cc>)
 800430c:	429a      	cmp	r2, r3
 800430e:	d005      	beq.n	800431c <UART_SetConfig+0xa0>
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	4b8d      	ldr	r3, [pc, #564]	@ (800454c <UART_SetConfig+0x2d0>)
 8004318:	429a      	cmp	r2, r3
 800431a:	d104      	bne.n	8004326 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800431c:	f7fe ff20 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8004320:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004324:	e003      	b.n	800432e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004326:	f7fe ff07 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 800432a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800432e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004338:	f040 810c 	bne.w	8004554 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800433c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004340:	2200      	movs	r2, #0
 8004342:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004346:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800434a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800434e:	4622      	mov	r2, r4
 8004350:	462b      	mov	r3, r5
 8004352:	1891      	adds	r1, r2, r2
 8004354:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004356:	415b      	adcs	r3, r3
 8004358:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800435a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800435e:	4621      	mov	r1, r4
 8004360:	eb12 0801 	adds.w	r8, r2, r1
 8004364:	4629      	mov	r1, r5
 8004366:	eb43 0901 	adc.w	r9, r3, r1
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004376:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800437a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800437e:	4690      	mov	r8, r2
 8004380:	4699      	mov	r9, r3
 8004382:	4623      	mov	r3, r4
 8004384:	eb18 0303 	adds.w	r3, r8, r3
 8004388:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800438c:	462b      	mov	r3, r5
 800438e:	eb49 0303 	adc.w	r3, r9, r3
 8004392:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043aa:	460b      	mov	r3, r1
 80043ac:	18db      	adds	r3, r3, r3
 80043ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80043b0:	4613      	mov	r3, r2
 80043b2:	eb42 0303 	adc.w	r3, r2, r3
 80043b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80043b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043c0:	f7fb ff5e 	bl	8000280 <__aeabi_uldivmod>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4b61      	ldr	r3, [pc, #388]	@ (8004550 <UART_SetConfig+0x2d4>)
 80043ca:	fba3 2302 	umull	r2, r3, r3, r2
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	011c      	lsls	r4, r3, #4
 80043d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043e4:	4642      	mov	r2, r8
 80043e6:	464b      	mov	r3, r9
 80043e8:	1891      	adds	r1, r2, r2
 80043ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043ec:	415b      	adcs	r3, r3
 80043ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043f4:	4641      	mov	r1, r8
 80043f6:	eb12 0a01 	adds.w	sl, r2, r1
 80043fa:	4649      	mov	r1, r9
 80043fc:	eb43 0b01 	adc.w	fp, r3, r1
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800440c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004410:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004414:	4692      	mov	sl, r2
 8004416:	469b      	mov	fp, r3
 8004418:	4643      	mov	r3, r8
 800441a:	eb1a 0303 	adds.w	r3, sl, r3
 800441e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004422:	464b      	mov	r3, r9
 8004424:	eb4b 0303 	adc.w	r3, fp, r3
 8004428:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004438:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800443c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004440:	460b      	mov	r3, r1
 8004442:	18db      	adds	r3, r3, r3
 8004444:	643b      	str	r3, [r7, #64]	@ 0x40
 8004446:	4613      	mov	r3, r2
 8004448:	eb42 0303 	adc.w	r3, r2, r3
 800444c:	647b      	str	r3, [r7, #68]	@ 0x44
 800444e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004452:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004456:	f7fb ff13 	bl	8000280 <__aeabi_uldivmod>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4611      	mov	r1, r2
 8004460:	4b3b      	ldr	r3, [pc, #236]	@ (8004550 <UART_SetConfig+0x2d4>)
 8004462:	fba3 2301 	umull	r2, r3, r3, r1
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	2264      	movs	r2, #100	@ 0x64
 800446a:	fb02 f303 	mul.w	r3, r2, r3
 800446e:	1acb      	subs	r3, r1, r3
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004476:	4b36      	ldr	r3, [pc, #216]	@ (8004550 <UART_SetConfig+0x2d4>)
 8004478:	fba3 2302 	umull	r2, r3, r3, r2
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004484:	441c      	add	r4, r3
 8004486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800448a:	2200      	movs	r2, #0
 800448c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004490:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004494:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004498:	4642      	mov	r2, r8
 800449a:	464b      	mov	r3, r9
 800449c:	1891      	adds	r1, r2, r2
 800449e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044a0:	415b      	adcs	r3, r3
 80044a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044a8:	4641      	mov	r1, r8
 80044aa:	1851      	adds	r1, r2, r1
 80044ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80044ae:	4649      	mov	r1, r9
 80044b0:	414b      	adcs	r3, r1
 80044b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044c0:	4659      	mov	r1, fp
 80044c2:	00cb      	lsls	r3, r1, #3
 80044c4:	4651      	mov	r1, sl
 80044c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ca:	4651      	mov	r1, sl
 80044cc:	00ca      	lsls	r2, r1, #3
 80044ce:	4610      	mov	r0, r2
 80044d0:	4619      	mov	r1, r3
 80044d2:	4603      	mov	r3, r0
 80044d4:	4642      	mov	r2, r8
 80044d6:	189b      	adds	r3, r3, r2
 80044d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044dc:	464b      	mov	r3, r9
 80044de:	460a      	mov	r2, r1
 80044e0:	eb42 0303 	adc.w	r3, r2, r3
 80044e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044fc:	460b      	mov	r3, r1
 80044fe:	18db      	adds	r3, r3, r3
 8004500:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004502:	4613      	mov	r3, r2
 8004504:	eb42 0303 	adc.w	r3, r2, r3
 8004508:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800450a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800450e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004512:	f7fb feb5 	bl	8000280 <__aeabi_uldivmod>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	4b0d      	ldr	r3, [pc, #52]	@ (8004550 <UART_SetConfig+0x2d4>)
 800451c:	fba3 1302 	umull	r1, r3, r3, r2
 8004520:	095b      	lsrs	r3, r3, #5
 8004522:	2164      	movs	r1, #100	@ 0x64
 8004524:	fb01 f303 	mul.w	r3, r1, r3
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	3332      	adds	r3, #50	@ 0x32
 800452e:	4a08      	ldr	r2, [pc, #32]	@ (8004550 <UART_SetConfig+0x2d4>)
 8004530:	fba2 2303 	umull	r2, r3, r2, r3
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	f003 0207 	and.w	r2, r3, #7
 800453a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4422      	add	r2, r4
 8004542:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004544:	e106      	b.n	8004754 <UART_SetConfig+0x4d8>
 8004546:	bf00      	nop
 8004548:	40011000 	.word	0x40011000
 800454c:	40011400 	.word	0x40011400
 8004550:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004558:	2200      	movs	r2, #0
 800455a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800455e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004562:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004566:	4642      	mov	r2, r8
 8004568:	464b      	mov	r3, r9
 800456a:	1891      	adds	r1, r2, r2
 800456c:	6239      	str	r1, [r7, #32]
 800456e:	415b      	adcs	r3, r3
 8004570:	627b      	str	r3, [r7, #36]	@ 0x24
 8004572:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004576:	4641      	mov	r1, r8
 8004578:	1854      	adds	r4, r2, r1
 800457a:	4649      	mov	r1, r9
 800457c:	eb43 0501 	adc.w	r5, r3, r1
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	00eb      	lsls	r3, r5, #3
 800458a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800458e:	00e2      	lsls	r2, r4, #3
 8004590:	4614      	mov	r4, r2
 8004592:	461d      	mov	r5, r3
 8004594:	4643      	mov	r3, r8
 8004596:	18e3      	adds	r3, r4, r3
 8004598:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800459c:	464b      	mov	r3, r9
 800459e:	eb45 0303 	adc.w	r3, r5, r3
 80045a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045c2:	4629      	mov	r1, r5
 80045c4:	008b      	lsls	r3, r1, #2
 80045c6:	4621      	mov	r1, r4
 80045c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045cc:	4621      	mov	r1, r4
 80045ce:	008a      	lsls	r2, r1, #2
 80045d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045d4:	f7fb fe54 	bl	8000280 <__aeabi_uldivmod>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4b60      	ldr	r3, [pc, #384]	@ (8004760 <UART_SetConfig+0x4e4>)
 80045de:	fba3 2302 	umull	r2, r3, r3, r2
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	011c      	lsls	r4, r3, #4
 80045e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045f8:	4642      	mov	r2, r8
 80045fa:	464b      	mov	r3, r9
 80045fc:	1891      	adds	r1, r2, r2
 80045fe:	61b9      	str	r1, [r7, #24]
 8004600:	415b      	adcs	r3, r3
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004608:	4641      	mov	r1, r8
 800460a:	1851      	adds	r1, r2, r1
 800460c:	6139      	str	r1, [r7, #16]
 800460e:	4649      	mov	r1, r9
 8004610:	414b      	adcs	r3, r1
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004620:	4659      	mov	r1, fp
 8004622:	00cb      	lsls	r3, r1, #3
 8004624:	4651      	mov	r1, sl
 8004626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800462a:	4651      	mov	r1, sl
 800462c:	00ca      	lsls	r2, r1, #3
 800462e:	4610      	mov	r0, r2
 8004630:	4619      	mov	r1, r3
 8004632:	4603      	mov	r3, r0
 8004634:	4642      	mov	r2, r8
 8004636:	189b      	adds	r3, r3, r2
 8004638:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800463c:	464b      	mov	r3, r9
 800463e:	460a      	mov	r2, r1
 8004640:	eb42 0303 	adc.w	r3, r2, r3
 8004644:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004652:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004660:	4649      	mov	r1, r9
 8004662:	008b      	lsls	r3, r1, #2
 8004664:	4641      	mov	r1, r8
 8004666:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800466a:	4641      	mov	r1, r8
 800466c:	008a      	lsls	r2, r1, #2
 800466e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004672:	f7fb fe05 	bl	8000280 <__aeabi_uldivmod>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4611      	mov	r1, r2
 800467c:	4b38      	ldr	r3, [pc, #224]	@ (8004760 <UART_SetConfig+0x4e4>)
 800467e:	fba3 2301 	umull	r2, r3, r3, r1
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2264      	movs	r2, #100	@ 0x64
 8004686:	fb02 f303 	mul.w	r3, r2, r3
 800468a:	1acb      	subs	r3, r1, r3
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	3332      	adds	r3, #50	@ 0x32
 8004690:	4a33      	ldr	r2, [pc, #204]	@ (8004760 <UART_SetConfig+0x4e4>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800469c:	441c      	add	r4, r3
 800469e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046a2:	2200      	movs	r2, #0
 80046a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80046a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80046a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046ac:	4642      	mov	r2, r8
 80046ae:	464b      	mov	r3, r9
 80046b0:	1891      	adds	r1, r2, r2
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	415b      	adcs	r3, r3
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046bc:	4641      	mov	r1, r8
 80046be:	1851      	adds	r1, r2, r1
 80046c0:	6039      	str	r1, [r7, #0]
 80046c2:	4649      	mov	r1, r9
 80046c4:	414b      	adcs	r3, r1
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046d4:	4659      	mov	r1, fp
 80046d6:	00cb      	lsls	r3, r1, #3
 80046d8:	4651      	mov	r1, sl
 80046da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046de:	4651      	mov	r1, sl
 80046e0:	00ca      	lsls	r2, r1, #3
 80046e2:	4610      	mov	r0, r2
 80046e4:	4619      	mov	r1, r3
 80046e6:	4603      	mov	r3, r0
 80046e8:	4642      	mov	r2, r8
 80046ea:	189b      	adds	r3, r3, r2
 80046ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046ee:	464b      	mov	r3, r9
 80046f0:	460a      	mov	r2, r1
 80046f2:	eb42 0303 	adc.w	r3, r2, r3
 80046f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	663b      	str	r3, [r7, #96]	@ 0x60
 8004702:	667a      	str	r2, [r7, #100]	@ 0x64
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004710:	4649      	mov	r1, r9
 8004712:	008b      	lsls	r3, r1, #2
 8004714:	4641      	mov	r1, r8
 8004716:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800471a:	4641      	mov	r1, r8
 800471c:	008a      	lsls	r2, r1, #2
 800471e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004722:	f7fb fdad 	bl	8000280 <__aeabi_uldivmod>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4b0d      	ldr	r3, [pc, #52]	@ (8004760 <UART_SetConfig+0x4e4>)
 800472c:	fba3 1302 	umull	r1, r3, r3, r2
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	2164      	movs	r1, #100	@ 0x64
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	3332      	adds	r3, #50	@ 0x32
 800473e:	4a08      	ldr	r2, [pc, #32]	@ (8004760 <UART_SetConfig+0x4e4>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	f003 020f 	and.w	r2, r3, #15
 800474a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4422      	add	r2, r4
 8004752:	609a      	str	r2, [r3, #8]
}
 8004754:	bf00      	nop
 8004756:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800475a:	46bd      	mov	sp, r7
 800475c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004760:	51eb851f 	.word	0x51eb851f

08004764 <sbrk_aligned>:
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	4e0f      	ldr	r6, [pc, #60]	@ (80047a4 <sbrk_aligned+0x40>)
 8004768:	460c      	mov	r4, r1
 800476a:	6831      	ldr	r1, [r6, #0]
 800476c:	4605      	mov	r5, r0
 800476e:	b911      	cbnz	r1, 8004776 <sbrk_aligned+0x12>
 8004770:	f000 faec 	bl	8004d4c <_sbrk_r>
 8004774:	6030      	str	r0, [r6, #0]
 8004776:	4621      	mov	r1, r4
 8004778:	4628      	mov	r0, r5
 800477a:	f000 fae7 	bl	8004d4c <_sbrk_r>
 800477e:	1c43      	adds	r3, r0, #1
 8004780:	d103      	bne.n	800478a <sbrk_aligned+0x26>
 8004782:	f04f 34ff 	mov.w	r4, #4294967295
 8004786:	4620      	mov	r0, r4
 8004788:	bd70      	pop	{r4, r5, r6, pc}
 800478a:	1cc4      	adds	r4, r0, #3
 800478c:	f024 0403 	bic.w	r4, r4, #3
 8004790:	42a0      	cmp	r0, r4
 8004792:	d0f8      	beq.n	8004786 <sbrk_aligned+0x22>
 8004794:	1a21      	subs	r1, r4, r0
 8004796:	4628      	mov	r0, r5
 8004798:	f000 fad8 	bl	8004d4c <_sbrk_r>
 800479c:	3001      	adds	r0, #1
 800479e:	d1f2      	bne.n	8004786 <sbrk_aligned+0x22>
 80047a0:	e7ef      	b.n	8004782 <sbrk_aligned+0x1e>
 80047a2:	bf00      	nop
 80047a4:	20000574 	.word	0x20000574

080047a8 <_malloc_r>:
 80047a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047ac:	1ccd      	adds	r5, r1, #3
 80047ae:	f025 0503 	bic.w	r5, r5, #3
 80047b2:	3508      	adds	r5, #8
 80047b4:	2d0c      	cmp	r5, #12
 80047b6:	bf38      	it	cc
 80047b8:	250c      	movcc	r5, #12
 80047ba:	2d00      	cmp	r5, #0
 80047bc:	4606      	mov	r6, r0
 80047be:	db01      	blt.n	80047c4 <_malloc_r+0x1c>
 80047c0:	42a9      	cmp	r1, r5
 80047c2:	d904      	bls.n	80047ce <_malloc_r+0x26>
 80047c4:	230c      	movs	r3, #12
 80047c6:	6033      	str	r3, [r6, #0]
 80047c8:	2000      	movs	r0, #0
 80047ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048a4 <_malloc_r+0xfc>
 80047d2:	f000 f869 	bl	80048a8 <__malloc_lock>
 80047d6:	f8d8 3000 	ldr.w	r3, [r8]
 80047da:	461c      	mov	r4, r3
 80047dc:	bb44      	cbnz	r4, 8004830 <_malloc_r+0x88>
 80047de:	4629      	mov	r1, r5
 80047e0:	4630      	mov	r0, r6
 80047e2:	f7ff ffbf 	bl	8004764 <sbrk_aligned>
 80047e6:	1c43      	adds	r3, r0, #1
 80047e8:	4604      	mov	r4, r0
 80047ea:	d158      	bne.n	800489e <_malloc_r+0xf6>
 80047ec:	f8d8 4000 	ldr.w	r4, [r8]
 80047f0:	4627      	mov	r7, r4
 80047f2:	2f00      	cmp	r7, #0
 80047f4:	d143      	bne.n	800487e <_malloc_r+0xd6>
 80047f6:	2c00      	cmp	r4, #0
 80047f8:	d04b      	beq.n	8004892 <_malloc_r+0xea>
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	4639      	mov	r1, r7
 80047fe:	4630      	mov	r0, r6
 8004800:	eb04 0903 	add.w	r9, r4, r3
 8004804:	f000 faa2 	bl	8004d4c <_sbrk_r>
 8004808:	4581      	cmp	r9, r0
 800480a:	d142      	bne.n	8004892 <_malloc_r+0xea>
 800480c:	6821      	ldr	r1, [r4, #0]
 800480e:	1a6d      	subs	r5, r5, r1
 8004810:	4629      	mov	r1, r5
 8004812:	4630      	mov	r0, r6
 8004814:	f7ff ffa6 	bl	8004764 <sbrk_aligned>
 8004818:	3001      	adds	r0, #1
 800481a:	d03a      	beq.n	8004892 <_malloc_r+0xea>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	442b      	add	r3, r5
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	f8d8 3000 	ldr.w	r3, [r8]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	bb62      	cbnz	r2, 8004884 <_malloc_r+0xdc>
 800482a:	f8c8 7000 	str.w	r7, [r8]
 800482e:	e00f      	b.n	8004850 <_malloc_r+0xa8>
 8004830:	6822      	ldr	r2, [r4, #0]
 8004832:	1b52      	subs	r2, r2, r5
 8004834:	d420      	bmi.n	8004878 <_malloc_r+0xd0>
 8004836:	2a0b      	cmp	r2, #11
 8004838:	d917      	bls.n	800486a <_malloc_r+0xc2>
 800483a:	1961      	adds	r1, r4, r5
 800483c:	42a3      	cmp	r3, r4
 800483e:	6025      	str	r5, [r4, #0]
 8004840:	bf18      	it	ne
 8004842:	6059      	strne	r1, [r3, #4]
 8004844:	6863      	ldr	r3, [r4, #4]
 8004846:	bf08      	it	eq
 8004848:	f8c8 1000 	streq.w	r1, [r8]
 800484c:	5162      	str	r2, [r4, r5]
 800484e:	604b      	str	r3, [r1, #4]
 8004850:	4630      	mov	r0, r6
 8004852:	f000 f82f 	bl	80048b4 <__malloc_unlock>
 8004856:	f104 000b 	add.w	r0, r4, #11
 800485a:	1d23      	adds	r3, r4, #4
 800485c:	f020 0007 	bic.w	r0, r0, #7
 8004860:	1ac2      	subs	r2, r0, r3
 8004862:	bf1c      	itt	ne
 8004864:	1a1b      	subne	r3, r3, r0
 8004866:	50a3      	strne	r3, [r4, r2]
 8004868:	e7af      	b.n	80047ca <_malloc_r+0x22>
 800486a:	6862      	ldr	r2, [r4, #4]
 800486c:	42a3      	cmp	r3, r4
 800486e:	bf0c      	ite	eq
 8004870:	f8c8 2000 	streq.w	r2, [r8]
 8004874:	605a      	strne	r2, [r3, #4]
 8004876:	e7eb      	b.n	8004850 <_malloc_r+0xa8>
 8004878:	4623      	mov	r3, r4
 800487a:	6864      	ldr	r4, [r4, #4]
 800487c:	e7ae      	b.n	80047dc <_malloc_r+0x34>
 800487e:	463c      	mov	r4, r7
 8004880:	687f      	ldr	r7, [r7, #4]
 8004882:	e7b6      	b.n	80047f2 <_malloc_r+0x4a>
 8004884:	461a      	mov	r2, r3
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	42a3      	cmp	r3, r4
 800488a:	d1fb      	bne.n	8004884 <_malloc_r+0xdc>
 800488c:	2300      	movs	r3, #0
 800488e:	6053      	str	r3, [r2, #4]
 8004890:	e7de      	b.n	8004850 <_malloc_r+0xa8>
 8004892:	230c      	movs	r3, #12
 8004894:	6033      	str	r3, [r6, #0]
 8004896:	4630      	mov	r0, r6
 8004898:	f000 f80c 	bl	80048b4 <__malloc_unlock>
 800489c:	e794      	b.n	80047c8 <_malloc_r+0x20>
 800489e:	6005      	str	r5, [r0, #0]
 80048a0:	e7d6      	b.n	8004850 <_malloc_r+0xa8>
 80048a2:	bf00      	nop
 80048a4:	20000578 	.word	0x20000578

080048a8 <__malloc_lock>:
 80048a8:	4801      	ldr	r0, [pc, #4]	@ (80048b0 <__malloc_lock+0x8>)
 80048aa:	f000 ba9c 	b.w	8004de6 <__retarget_lock_acquire_recursive>
 80048ae:	bf00      	nop
 80048b0:	200006bc 	.word	0x200006bc

080048b4 <__malloc_unlock>:
 80048b4:	4801      	ldr	r0, [pc, #4]	@ (80048bc <__malloc_unlock+0x8>)
 80048b6:	f000 ba97 	b.w	8004de8 <__retarget_lock_release_recursive>
 80048ba:	bf00      	nop
 80048bc:	200006bc 	.word	0x200006bc

080048c0 <std>:
 80048c0:	2300      	movs	r3, #0
 80048c2:	b510      	push	{r4, lr}
 80048c4:	4604      	mov	r4, r0
 80048c6:	e9c0 3300 	strd	r3, r3, [r0]
 80048ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048ce:	6083      	str	r3, [r0, #8]
 80048d0:	8181      	strh	r1, [r0, #12]
 80048d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80048d4:	81c2      	strh	r2, [r0, #14]
 80048d6:	6183      	str	r3, [r0, #24]
 80048d8:	4619      	mov	r1, r3
 80048da:	2208      	movs	r2, #8
 80048dc:	305c      	adds	r0, #92	@ 0x5c
 80048de:	f000 f9f9 	bl	8004cd4 <memset>
 80048e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004918 <std+0x58>)
 80048e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80048e6:	4b0d      	ldr	r3, [pc, #52]	@ (800491c <std+0x5c>)
 80048e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004920 <std+0x60>)
 80048ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004924 <std+0x64>)
 80048f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80048f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004928 <std+0x68>)
 80048f4:	6224      	str	r4, [r4, #32]
 80048f6:	429c      	cmp	r4, r3
 80048f8:	d006      	beq.n	8004908 <std+0x48>
 80048fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048fe:	4294      	cmp	r4, r2
 8004900:	d002      	beq.n	8004908 <std+0x48>
 8004902:	33d0      	adds	r3, #208	@ 0xd0
 8004904:	429c      	cmp	r4, r3
 8004906:	d105      	bne.n	8004914 <std+0x54>
 8004908:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800490c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004910:	f000 ba68 	b.w	8004de4 <__retarget_lock_init_recursive>
 8004914:	bd10      	pop	{r4, pc}
 8004916:	bf00      	nop
 8004918:	08004b25 	.word	0x08004b25
 800491c:	08004b47 	.word	0x08004b47
 8004920:	08004b7f 	.word	0x08004b7f
 8004924:	08004ba3 	.word	0x08004ba3
 8004928:	2000057c 	.word	0x2000057c

0800492c <stdio_exit_handler>:
 800492c:	4a02      	ldr	r2, [pc, #8]	@ (8004938 <stdio_exit_handler+0xc>)
 800492e:	4903      	ldr	r1, [pc, #12]	@ (800493c <stdio_exit_handler+0x10>)
 8004930:	4803      	ldr	r0, [pc, #12]	@ (8004940 <stdio_exit_handler+0x14>)
 8004932:	f000 b869 	b.w	8004a08 <_fwalk_sglue>
 8004936:	bf00      	nop
 8004938:	2000001c 	.word	0x2000001c
 800493c:	08005529 	.word	0x08005529
 8004940:	2000002c 	.word	0x2000002c

08004944 <cleanup_stdio>:
 8004944:	6841      	ldr	r1, [r0, #4]
 8004946:	4b0c      	ldr	r3, [pc, #48]	@ (8004978 <cleanup_stdio+0x34>)
 8004948:	4299      	cmp	r1, r3
 800494a:	b510      	push	{r4, lr}
 800494c:	4604      	mov	r4, r0
 800494e:	d001      	beq.n	8004954 <cleanup_stdio+0x10>
 8004950:	f000 fdea 	bl	8005528 <_fflush_r>
 8004954:	68a1      	ldr	r1, [r4, #8]
 8004956:	4b09      	ldr	r3, [pc, #36]	@ (800497c <cleanup_stdio+0x38>)
 8004958:	4299      	cmp	r1, r3
 800495a:	d002      	beq.n	8004962 <cleanup_stdio+0x1e>
 800495c:	4620      	mov	r0, r4
 800495e:	f000 fde3 	bl	8005528 <_fflush_r>
 8004962:	68e1      	ldr	r1, [r4, #12]
 8004964:	4b06      	ldr	r3, [pc, #24]	@ (8004980 <cleanup_stdio+0x3c>)
 8004966:	4299      	cmp	r1, r3
 8004968:	d004      	beq.n	8004974 <cleanup_stdio+0x30>
 800496a:	4620      	mov	r0, r4
 800496c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004970:	f000 bdda 	b.w	8005528 <_fflush_r>
 8004974:	bd10      	pop	{r4, pc}
 8004976:	bf00      	nop
 8004978:	2000057c 	.word	0x2000057c
 800497c:	200005e4 	.word	0x200005e4
 8004980:	2000064c 	.word	0x2000064c

08004984 <global_stdio_init.part.0>:
 8004984:	b510      	push	{r4, lr}
 8004986:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <global_stdio_init.part.0+0x30>)
 8004988:	4c0b      	ldr	r4, [pc, #44]	@ (80049b8 <global_stdio_init.part.0+0x34>)
 800498a:	4a0c      	ldr	r2, [pc, #48]	@ (80049bc <global_stdio_init.part.0+0x38>)
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	4620      	mov	r0, r4
 8004990:	2200      	movs	r2, #0
 8004992:	2104      	movs	r1, #4
 8004994:	f7ff ff94 	bl	80048c0 <std>
 8004998:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800499c:	2201      	movs	r2, #1
 800499e:	2109      	movs	r1, #9
 80049a0:	f7ff ff8e 	bl	80048c0 <std>
 80049a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80049a8:	2202      	movs	r2, #2
 80049aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ae:	2112      	movs	r1, #18
 80049b0:	f7ff bf86 	b.w	80048c0 <std>
 80049b4:	200006b4 	.word	0x200006b4
 80049b8:	2000057c 	.word	0x2000057c
 80049bc:	0800492d 	.word	0x0800492d

080049c0 <__sfp_lock_acquire>:
 80049c0:	4801      	ldr	r0, [pc, #4]	@ (80049c8 <__sfp_lock_acquire+0x8>)
 80049c2:	f000 ba10 	b.w	8004de6 <__retarget_lock_acquire_recursive>
 80049c6:	bf00      	nop
 80049c8:	200006bd 	.word	0x200006bd

080049cc <__sfp_lock_release>:
 80049cc:	4801      	ldr	r0, [pc, #4]	@ (80049d4 <__sfp_lock_release+0x8>)
 80049ce:	f000 ba0b 	b.w	8004de8 <__retarget_lock_release_recursive>
 80049d2:	bf00      	nop
 80049d4:	200006bd 	.word	0x200006bd

080049d8 <__sinit>:
 80049d8:	b510      	push	{r4, lr}
 80049da:	4604      	mov	r4, r0
 80049dc:	f7ff fff0 	bl	80049c0 <__sfp_lock_acquire>
 80049e0:	6a23      	ldr	r3, [r4, #32]
 80049e2:	b11b      	cbz	r3, 80049ec <__sinit+0x14>
 80049e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049e8:	f7ff bff0 	b.w	80049cc <__sfp_lock_release>
 80049ec:	4b04      	ldr	r3, [pc, #16]	@ (8004a00 <__sinit+0x28>)
 80049ee:	6223      	str	r3, [r4, #32]
 80049f0:	4b04      	ldr	r3, [pc, #16]	@ (8004a04 <__sinit+0x2c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f5      	bne.n	80049e4 <__sinit+0xc>
 80049f8:	f7ff ffc4 	bl	8004984 <global_stdio_init.part.0>
 80049fc:	e7f2      	b.n	80049e4 <__sinit+0xc>
 80049fe:	bf00      	nop
 8004a00:	08004945 	.word	0x08004945
 8004a04:	200006b4 	.word	0x200006b4

08004a08 <_fwalk_sglue>:
 8004a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a0c:	4607      	mov	r7, r0
 8004a0e:	4688      	mov	r8, r1
 8004a10:	4614      	mov	r4, r2
 8004a12:	2600      	movs	r6, #0
 8004a14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a18:	f1b9 0901 	subs.w	r9, r9, #1
 8004a1c:	d505      	bpl.n	8004a2a <_fwalk_sglue+0x22>
 8004a1e:	6824      	ldr	r4, [r4, #0]
 8004a20:	2c00      	cmp	r4, #0
 8004a22:	d1f7      	bne.n	8004a14 <_fwalk_sglue+0xc>
 8004a24:	4630      	mov	r0, r6
 8004a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a2a:	89ab      	ldrh	r3, [r5, #12]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d907      	bls.n	8004a40 <_fwalk_sglue+0x38>
 8004a30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a34:	3301      	adds	r3, #1
 8004a36:	d003      	beq.n	8004a40 <_fwalk_sglue+0x38>
 8004a38:	4629      	mov	r1, r5
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	47c0      	blx	r8
 8004a3e:	4306      	orrs	r6, r0
 8004a40:	3568      	adds	r5, #104	@ 0x68
 8004a42:	e7e9      	b.n	8004a18 <_fwalk_sglue+0x10>

08004a44 <iprintf>:
 8004a44:	b40f      	push	{r0, r1, r2, r3}
 8004a46:	b507      	push	{r0, r1, r2, lr}
 8004a48:	4906      	ldr	r1, [pc, #24]	@ (8004a64 <iprintf+0x20>)
 8004a4a:	ab04      	add	r3, sp, #16
 8004a4c:	6808      	ldr	r0, [r1, #0]
 8004a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a52:	6881      	ldr	r1, [r0, #8]
 8004a54:	9301      	str	r3, [sp, #4]
 8004a56:	f000 fa3d 	bl	8004ed4 <_vfiprintf_r>
 8004a5a:	b003      	add	sp, #12
 8004a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a60:	b004      	add	sp, #16
 8004a62:	4770      	bx	lr
 8004a64:	20000028 	.word	0x20000028

08004a68 <_puts_r>:
 8004a68:	6a03      	ldr	r3, [r0, #32]
 8004a6a:	b570      	push	{r4, r5, r6, lr}
 8004a6c:	6884      	ldr	r4, [r0, #8]
 8004a6e:	4605      	mov	r5, r0
 8004a70:	460e      	mov	r6, r1
 8004a72:	b90b      	cbnz	r3, 8004a78 <_puts_r+0x10>
 8004a74:	f7ff ffb0 	bl	80049d8 <__sinit>
 8004a78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a7a:	07db      	lsls	r3, r3, #31
 8004a7c:	d405      	bmi.n	8004a8a <_puts_r+0x22>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	0598      	lsls	r0, r3, #22
 8004a82:	d402      	bmi.n	8004a8a <_puts_r+0x22>
 8004a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a86:	f000 f9ae 	bl	8004de6 <__retarget_lock_acquire_recursive>
 8004a8a:	89a3      	ldrh	r3, [r4, #12]
 8004a8c:	0719      	lsls	r1, r3, #28
 8004a8e:	d502      	bpl.n	8004a96 <_puts_r+0x2e>
 8004a90:	6923      	ldr	r3, [r4, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d135      	bne.n	8004b02 <_puts_r+0x9a>
 8004a96:	4621      	mov	r1, r4
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f000 f8c5 	bl	8004c28 <__swsetup_r>
 8004a9e:	b380      	cbz	r0, 8004b02 <_puts_r+0x9a>
 8004aa0:	f04f 35ff 	mov.w	r5, #4294967295
 8004aa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004aa6:	07da      	lsls	r2, r3, #31
 8004aa8:	d405      	bmi.n	8004ab6 <_puts_r+0x4e>
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	059b      	lsls	r3, r3, #22
 8004aae:	d402      	bmi.n	8004ab6 <_puts_r+0x4e>
 8004ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ab2:	f000 f999 	bl	8004de8 <__retarget_lock_release_recursive>
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	bd70      	pop	{r4, r5, r6, pc}
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	da04      	bge.n	8004ac8 <_puts_r+0x60>
 8004abe:	69a2      	ldr	r2, [r4, #24]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	dc17      	bgt.n	8004af4 <_puts_r+0x8c>
 8004ac4:	290a      	cmp	r1, #10
 8004ac6:	d015      	beq.n	8004af4 <_puts_r+0x8c>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	6022      	str	r2, [r4, #0]
 8004ace:	7019      	strb	r1, [r3, #0]
 8004ad0:	68a3      	ldr	r3, [r4, #8]
 8004ad2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	60a3      	str	r3, [r4, #8]
 8004ada:	2900      	cmp	r1, #0
 8004adc:	d1ed      	bne.n	8004aba <_puts_r+0x52>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	da11      	bge.n	8004b06 <_puts_r+0x9e>
 8004ae2:	4622      	mov	r2, r4
 8004ae4:	210a      	movs	r1, #10
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 f85f 	bl	8004baa <__swbuf_r>
 8004aec:	3001      	adds	r0, #1
 8004aee:	d0d7      	beq.n	8004aa0 <_puts_r+0x38>
 8004af0:	250a      	movs	r5, #10
 8004af2:	e7d7      	b.n	8004aa4 <_puts_r+0x3c>
 8004af4:	4622      	mov	r2, r4
 8004af6:	4628      	mov	r0, r5
 8004af8:	f000 f857 	bl	8004baa <__swbuf_r>
 8004afc:	3001      	adds	r0, #1
 8004afe:	d1e7      	bne.n	8004ad0 <_puts_r+0x68>
 8004b00:	e7ce      	b.n	8004aa0 <_puts_r+0x38>
 8004b02:	3e01      	subs	r6, #1
 8004b04:	e7e4      	b.n	8004ad0 <_puts_r+0x68>
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	6022      	str	r2, [r4, #0]
 8004b0c:	220a      	movs	r2, #10
 8004b0e:	701a      	strb	r2, [r3, #0]
 8004b10:	e7ee      	b.n	8004af0 <_puts_r+0x88>
	...

08004b14 <puts>:
 8004b14:	4b02      	ldr	r3, [pc, #8]	@ (8004b20 <puts+0xc>)
 8004b16:	4601      	mov	r1, r0
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	f7ff bfa5 	b.w	8004a68 <_puts_r>
 8004b1e:	bf00      	nop
 8004b20:	20000028 	.word	0x20000028

08004b24 <__sread>:
 8004b24:	b510      	push	{r4, lr}
 8004b26:	460c      	mov	r4, r1
 8004b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b2c:	f000 f8fc 	bl	8004d28 <_read_r>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	bfab      	itete	ge
 8004b34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b36:	89a3      	ldrhlt	r3, [r4, #12]
 8004b38:	181b      	addge	r3, r3, r0
 8004b3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b3e:	bfac      	ite	ge
 8004b40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b42:	81a3      	strhlt	r3, [r4, #12]
 8004b44:	bd10      	pop	{r4, pc}

08004b46 <__swrite>:
 8004b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b4a:	461f      	mov	r7, r3
 8004b4c:	898b      	ldrh	r3, [r1, #12]
 8004b4e:	05db      	lsls	r3, r3, #23
 8004b50:	4605      	mov	r5, r0
 8004b52:	460c      	mov	r4, r1
 8004b54:	4616      	mov	r6, r2
 8004b56:	d505      	bpl.n	8004b64 <__swrite+0x1e>
 8004b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f000 f8d0 	bl	8004d04 <_lseek_r>
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b6e:	81a3      	strh	r3, [r4, #12]
 8004b70:	4632      	mov	r2, r6
 8004b72:	463b      	mov	r3, r7
 8004b74:	4628      	mov	r0, r5
 8004b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7a:	f000 b8f7 	b.w	8004d6c <_write_r>

08004b7e <__sseek>:
 8004b7e:	b510      	push	{r4, lr}
 8004b80:	460c      	mov	r4, r1
 8004b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b86:	f000 f8bd 	bl	8004d04 <_lseek_r>
 8004b8a:	1c43      	adds	r3, r0, #1
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	bf15      	itete	ne
 8004b90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b9a:	81a3      	strheq	r3, [r4, #12]
 8004b9c:	bf18      	it	ne
 8004b9e:	81a3      	strhne	r3, [r4, #12]
 8004ba0:	bd10      	pop	{r4, pc}

08004ba2 <__sclose>:
 8004ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba6:	f000 b89d 	b.w	8004ce4 <_close_r>

08004baa <__swbuf_r>:
 8004baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bac:	460e      	mov	r6, r1
 8004bae:	4614      	mov	r4, r2
 8004bb0:	4605      	mov	r5, r0
 8004bb2:	b118      	cbz	r0, 8004bbc <__swbuf_r+0x12>
 8004bb4:	6a03      	ldr	r3, [r0, #32]
 8004bb6:	b90b      	cbnz	r3, 8004bbc <__swbuf_r+0x12>
 8004bb8:	f7ff ff0e 	bl	80049d8 <__sinit>
 8004bbc:	69a3      	ldr	r3, [r4, #24]
 8004bbe:	60a3      	str	r3, [r4, #8]
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	071a      	lsls	r2, r3, #28
 8004bc4:	d501      	bpl.n	8004bca <__swbuf_r+0x20>
 8004bc6:	6923      	ldr	r3, [r4, #16]
 8004bc8:	b943      	cbnz	r3, 8004bdc <__swbuf_r+0x32>
 8004bca:	4621      	mov	r1, r4
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f000 f82b 	bl	8004c28 <__swsetup_r>
 8004bd2:	b118      	cbz	r0, 8004bdc <__swbuf_r+0x32>
 8004bd4:	f04f 37ff 	mov.w	r7, #4294967295
 8004bd8:	4638      	mov	r0, r7
 8004bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	6922      	ldr	r2, [r4, #16]
 8004be0:	1a98      	subs	r0, r3, r2
 8004be2:	6963      	ldr	r3, [r4, #20]
 8004be4:	b2f6      	uxtb	r6, r6
 8004be6:	4283      	cmp	r3, r0
 8004be8:	4637      	mov	r7, r6
 8004bea:	dc05      	bgt.n	8004bf8 <__swbuf_r+0x4e>
 8004bec:	4621      	mov	r1, r4
 8004bee:	4628      	mov	r0, r5
 8004bf0:	f000 fc9a 	bl	8005528 <_fflush_r>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	d1ed      	bne.n	8004bd4 <__swbuf_r+0x2a>
 8004bf8:	68a3      	ldr	r3, [r4, #8]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	60a3      	str	r3, [r4, #8]
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	6022      	str	r2, [r4, #0]
 8004c04:	701e      	strb	r6, [r3, #0]
 8004c06:	6962      	ldr	r2, [r4, #20]
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d004      	beq.n	8004c18 <__swbuf_r+0x6e>
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	07db      	lsls	r3, r3, #31
 8004c12:	d5e1      	bpl.n	8004bd8 <__swbuf_r+0x2e>
 8004c14:	2e0a      	cmp	r6, #10
 8004c16:	d1df      	bne.n	8004bd8 <__swbuf_r+0x2e>
 8004c18:	4621      	mov	r1, r4
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	f000 fc84 	bl	8005528 <_fflush_r>
 8004c20:	2800      	cmp	r0, #0
 8004c22:	d0d9      	beq.n	8004bd8 <__swbuf_r+0x2e>
 8004c24:	e7d6      	b.n	8004bd4 <__swbuf_r+0x2a>
	...

08004c28 <__swsetup_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	4b29      	ldr	r3, [pc, #164]	@ (8004cd0 <__swsetup_r+0xa8>)
 8004c2c:	4605      	mov	r5, r0
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	460c      	mov	r4, r1
 8004c32:	b118      	cbz	r0, 8004c3c <__swsetup_r+0x14>
 8004c34:	6a03      	ldr	r3, [r0, #32]
 8004c36:	b90b      	cbnz	r3, 8004c3c <__swsetup_r+0x14>
 8004c38:	f7ff fece 	bl	80049d8 <__sinit>
 8004c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c40:	0719      	lsls	r1, r3, #28
 8004c42:	d422      	bmi.n	8004c8a <__swsetup_r+0x62>
 8004c44:	06da      	lsls	r2, r3, #27
 8004c46:	d407      	bmi.n	8004c58 <__swsetup_r+0x30>
 8004c48:	2209      	movs	r2, #9
 8004c4a:	602a      	str	r2, [r5, #0]
 8004c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c50:	81a3      	strh	r3, [r4, #12]
 8004c52:	f04f 30ff 	mov.w	r0, #4294967295
 8004c56:	e033      	b.n	8004cc0 <__swsetup_r+0x98>
 8004c58:	0758      	lsls	r0, r3, #29
 8004c5a:	d512      	bpl.n	8004c82 <__swsetup_r+0x5a>
 8004c5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c5e:	b141      	cbz	r1, 8004c72 <__swsetup_r+0x4a>
 8004c60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c64:	4299      	cmp	r1, r3
 8004c66:	d002      	beq.n	8004c6e <__swsetup_r+0x46>
 8004c68:	4628      	mov	r0, r5
 8004c6a:	f000 f8bf 	bl	8004dec <_free_r>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c78:	81a3      	strh	r3, [r4, #12]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	6063      	str	r3, [r4, #4]
 8004c7e:	6923      	ldr	r3, [r4, #16]
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	89a3      	ldrh	r3, [r4, #12]
 8004c84:	f043 0308 	orr.w	r3, r3, #8
 8004c88:	81a3      	strh	r3, [r4, #12]
 8004c8a:	6923      	ldr	r3, [r4, #16]
 8004c8c:	b94b      	cbnz	r3, 8004ca2 <__swsetup_r+0x7a>
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c98:	d003      	beq.n	8004ca2 <__swsetup_r+0x7a>
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	f000 fc91 	bl	80055c4 <__smakebuf_r>
 8004ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca6:	f013 0201 	ands.w	r2, r3, #1
 8004caa:	d00a      	beq.n	8004cc2 <__swsetup_r+0x9a>
 8004cac:	2200      	movs	r2, #0
 8004cae:	60a2      	str	r2, [r4, #8]
 8004cb0:	6962      	ldr	r2, [r4, #20]
 8004cb2:	4252      	negs	r2, r2
 8004cb4:	61a2      	str	r2, [r4, #24]
 8004cb6:	6922      	ldr	r2, [r4, #16]
 8004cb8:	b942      	cbnz	r2, 8004ccc <__swsetup_r+0xa4>
 8004cba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004cbe:	d1c5      	bne.n	8004c4c <__swsetup_r+0x24>
 8004cc0:	bd38      	pop	{r3, r4, r5, pc}
 8004cc2:	0799      	lsls	r1, r3, #30
 8004cc4:	bf58      	it	pl
 8004cc6:	6962      	ldrpl	r2, [r4, #20]
 8004cc8:	60a2      	str	r2, [r4, #8]
 8004cca:	e7f4      	b.n	8004cb6 <__swsetup_r+0x8e>
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e7f7      	b.n	8004cc0 <__swsetup_r+0x98>
 8004cd0:	20000028 	.word	0x20000028

08004cd4 <memset>:
 8004cd4:	4402      	add	r2, r0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d100      	bne.n	8004cde <memset+0xa>
 8004cdc:	4770      	bx	lr
 8004cde:	f803 1b01 	strb.w	r1, [r3], #1
 8004ce2:	e7f9      	b.n	8004cd8 <memset+0x4>

08004ce4 <_close_r>:
 8004ce4:	b538      	push	{r3, r4, r5, lr}
 8004ce6:	4d06      	ldr	r5, [pc, #24]	@ (8004d00 <_close_r+0x1c>)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	4604      	mov	r4, r0
 8004cec:	4608      	mov	r0, r1
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	f7fb ff99 	bl	8000c26 <_close>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d102      	bne.n	8004cfe <_close_r+0x1a>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	b103      	cbz	r3, 8004cfe <_close_r+0x1a>
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	200006b8 	.word	0x200006b8

08004d04 <_lseek_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	4d07      	ldr	r5, [pc, #28]	@ (8004d24 <_lseek_r+0x20>)
 8004d08:	4604      	mov	r4, r0
 8004d0a:	4608      	mov	r0, r1
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	2200      	movs	r2, #0
 8004d10:	602a      	str	r2, [r5, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	f7fb ffae 	bl	8000c74 <_lseek>
 8004d18:	1c43      	adds	r3, r0, #1
 8004d1a:	d102      	bne.n	8004d22 <_lseek_r+0x1e>
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	b103      	cbz	r3, 8004d22 <_lseek_r+0x1e>
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	bd38      	pop	{r3, r4, r5, pc}
 8004d24:	200006b8 	.word	0x200006b8

08004d28 <_read_r>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4d07      	ldr	r5, [pc, #28]	@ (8004d48 <_read_r+0x20>)
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	4608      	mov	r0, r1
 8004d30:	4611      	mov	r1, r2
 8004d32:	2200      	movs	r2, #0
 8004d34:	602a      	str	r2, [r5, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	f7fb ff58 	bl	8000bec <_read>
 8004d3c:	1c43      	adds	r3, r0, #1
 8004d3e:	d102      	bne.n	8004d46 <_read_r+0x1e>
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	b103      	cbz	r3, 8004d46 <_read_r+0x1e>
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
 8004d48:	200006b8 	.word	0x200006b8

08004d4c <_sbrk_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4d06      	ldr	r5, [pc, #24]	@ (8004d68 <_sbrk_r+0x1c>)
 8004d50:	2300      	movs	r3, #0
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	602b      	str	r3, [r5, #0]
 8004d58:	f7fb ff9a 	bl	8000c90 <_sbrk>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d102      	bne.n	8004d66 <_sbrk_r+0x1a>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	b103      	cbz	r3, 8004d66 <_sbrk_r+0x1a>
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	200006b8 	.word	0x200006b8

08004d6c <_write_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4d07      	ldr	r5, [pc, #28]	@ (8004d8c <_write_r+0x20>)
 8004d70:	4604      	mov	r4, r0
 8004d72:	4608      	mov	r0, r1
 8004d74:	4611      	mov	r1, r2
 8004d76:	2200      	movs	r2, #0
 8004d78:	602a      	str	r2, [r5, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f7fb fde8 	bl	8000950 <_write>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	d102      	bne.n	8004d8a <_write_r+0x1e>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	b103      	cbz	r3, 8004d8a <_write_r+0x1e>
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	200006b8 	.word	0x200006b8

08004d90 <__errno>:
 8004d90:	4b01      	ldr	r3, [pc, #4]	@ (8004d98 <__errno+0x8>)
 8004d92:	6818      	ldr	r0, [r3, #0]
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	20000028 	.word	0x20000028

08004d9c <__libc_init_array>:
 8004d9c:	b570      	push	{r4, r5, r6, lr}
 8004d9e:	4d0d      	ldr	r5, [pc, #52]	@ (8004dd4 <__libc_init_array+0x38>)
 8004da0:	4c0d      	ldr	r4, [pc, #52]	@ (8004dd8 <__libc_init_array+0x3c>)
 8004da2:	1b64      	subs	r4, r4, r5
 8004da4:	10a4      	asrs	r4, r4, #2
 8004da6:	2600      	movs	r6, #0
 8004da8:	42a6      	cmp	r6, r4
 8004daa:	d109      	bne.n	8004dc0 <__libc_init_array+0x24>
 8004dac:	4d0b      	ldr	r5, [pc, #44]	@ (8004ddc <__libc_init_array+0x40>)
 8004dae:	4c0c      	ldr	r4, [pc, #48]	@ (8004de0 <__libc_init_array+0x44>)
 8004db0:	f000 fc66 	bl	8005680 <_init>
 8004db4:	1b64      	subs	r4, r4, r5
 8004db6:	10a4      	asrs	r4, r4, #2
 8004db8:	2600      	movs	r6, #0
 8004dba:	42a6      	cmp	r6, r4
 8004dbc:	d105      	bne.n	8004dca <__libc_init_array+0x2e>
 8004dbe:	bd70      	pop	{r4, r5, r6, pc}
 8004dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc4:	4798      	blx	r3
 8004dc6:	3601      	adds	r6, #1
 8004dc8:	e7ee      	b.n	8004da8 <__libc_init_array+0xc>
 8004dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dce:	4798      	blx	r3
 8004dd0:	3601      	adds	r6, #1
 8004dd2:	e7f2      	b.n	8004dba <__libc_init_array+0x1e>
 8004dd4:	08006010 	.word	0x08006010
 8004dd8:	08006010 	.word	0x08006010
 8004ddc:	08006010 	.word	0x08006010
 8004de0:	08006014 	.word	0x08006014

08004de4 <__retarget_lock_init_recursive>:
 8004de4:	4770      	bx	lr

08004de6 <__retarget_lock_acquire_recursive>:
 8004de6:	4770      	bx	lr

08004de8 <__retarget_lock_release_recursive>:
 8004de8:	4770      	bx	lr
	...

08004dec <_free_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4605      	mov	r5, r0
 8004df0:	2900      	cmp	r1, #0
 8004df2:	d041      	beq.n	8004e78 <_free_r+0x8c>
 8004df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004df8:	1f0c      	subs	r4, r1, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bfb8      	it	lt
 8004dfe:	18e4      	addlt	r4, r4, r3
 8004e00:	f7ff fd52 	bl	80048a8 <__malloc_lock>
 8004e04:	4a1d      	ldr	r2, [pc, #116]	@ (8004e7c <_free_r+0x90>)
 8004e06:	6813      	ldr	r3, [r2, #0]
 8004e08:	b933      	cbnz	r3, 8004e18 <_free_r+0x2c>
 8004e0a:	6063      	str	r3, [r4, #4]
 8004e0c:	6014      	str	r4, [r2, #0]
 8004e0e:	4628      	mov	r0, r5
 8004e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e14:	f7ff bd4e 	b.w	80048b4 <__malloc_unlock>
 8004e18:	42a3      	cmp	r3, r4
 8004e1a:	d908      	bls.n	8004e2e <_free_r+0x42>
 8004e1c:	6820      	ldr	r0, [r4, #0]
 8004e1e:	1821      	adds	r1, r4, r0
 8004e20:	428b      	cmp	r3, r1
 8004e22:	bf01      	itttt	eq
 8004e24:	6819      	ldreq	r1, [r3, #0]
 8004e26:	685b      	ldreq	r3, [r3, #4]
 8004e28:	1809      	addeq	r1, r1, r0
 8004e2a:	6021      	streq	r1, [r4, #0]
 8004e2c:	e7ed      	b.n	8004e0a <_free_r+0x1e>
 8004e2e:	461a      	mov	r2, r3
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	b10b      	cbz	r3, 8004e38 <_free_r+0x4c>
 8004e34:	42a3      	cmp	r3, r4
 8004e36:	d9fa      	bls.n	8004e2e <_free_r+0x42>
 8004e38:	6811      	ldr	r1, [r2, #0]
 8004e3a:	1850      	adds	r0, r2, r1
 8004e3c:	42a0      	cmp	r0, r4
 8004e3e:	d10b      	bne.n	8004e58 <_free_r+0x6c>
 8004e40:	6820      	ldr	r0, [r4, #0]
 8004e42:	4401      	add	r1, r0
 8004e44:	1850      	adds	r0, r2, r1
 8004e46:	4283      	cmp	r3, r0
 8004e48:	6011      	str	r1, [r2, #0]
 8004e4a:	d1e0      	bne.n	8004e0e <_free_r+0x22>
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	6053      	str	r3, [r2, #4]
 8004e52:	4408      	add	r0, r1
 8004e54:	6010      	str	r0, [r2, #0]
 8004e56:	e7da      	b.n	8004e0e <_free_r+0x22>
 8004e58:	d902      	bls.n	8004e60 <_free_r+0x74>
 8004e5a:	230c      	movs	r3, #12
 8004e5c:	602b      	str	r3, [r5, #0]
 8004e5e:	e7d6      	b.n	8004e0e <_free_r+0x22>
 8004e60:	6820      	ldr	r0, [r4, #0]
 8004e62:	1821      	adds	r1, r4, r0
 8004e64:	428b      	cmp	r3, r1
 8004e66:	bf04      	itt	eq
 8004e68:	6819      	ldreq	r1, [r3, #0]
 8004e6a:	685b      	ldreq	r3, [r3, #4]
 8004e6c:	6063      	str	r3, [r4, #4]
 8004e6e:	bf04      	itt	eq
 8004e70:	1809      	addeq	r1, r1, r0
 8004e72:	6021      	streq	r1, [r4, #0]
 8004e74:	6054      	str	r4, [r2, #4]
 8004e76:	e7ca      	b.n	8004e0e <_free_r+0x22>
 8004e78:	bd38      	pop	{r3, r4, r5, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000578 	.word	0x20000578

08004e80 <__sfputc_r>:
 8004e80:	6893      	ldr	r3, [r2, #8]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	b410      	push	{r4}
 8004e88:	6093      	str	r3, [r2, #8]
 8004e8a:	da08      	bge.n	8004e9e <__sfputc_r+0x1e>
 8004e8c:	6994      	ldr	r4, [r2, #24]
 8004e8e:	42a3      	cmp	r3, r4
 8004e90:	db01      	blt.n	8004e96 <__sfputc_r+0x16>
 8004e92:	290a      	cmp	r1, #10
 8004e94:	d103      	bne.n	8004e9e <__sfputc_r+0x1e>
 8004e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e9a:	f7ff be86 	b.w	8004baa <__swbuf_r>
 8004e9e:	6813      	ldr	r3, [r2, #0]
 8004ea0:	1c58      	adds	r0, r3, #1
 8004ea2:	6010      	str	r0, [r2, #0]
 8004ea4:	7019      	strb	r1, [r3, #0]
 8004ea6:	4608      	mov	r0, r1
 8004ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <__sfputs_r>:
 8004eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb0:	4606      	mov	r6, r0
 8004eb2:	460f      	mov	r7, r1
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	18d5      	adds	r5, r2, r3
 8004eb8:	42ac      	cmp	r4, r5
 8004eba:	d101      	bne.n	8004ec0 <__sfputs_r+0x12>
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	e007      	b.n	8004ed0 <__sfputs_r+0x22>
 8004ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec4:	463a      	mov	r2, r7
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	f7ff ffda 	bl	8004e80 <__sfputc_r>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d1f3      	bne.n	8004eb8 <__sfputs_r+0xa>
 8004ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ed4 <_vfiprintf_r>:
 8004ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed8:	460d      	mov	r5, r1
 8004eda:	b09d      	sub	sp, #116	@ 0x74
 8004edc:	4614      	mov	r4, r2
 8004ede:	4698      	mov	r8, r3
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	b118      	cbz	r0, 8004eec <_vfiprintf_r+0x18>
 8004ee4:	6a03      	ldr	r3, [r0, #32]
 8004ee6:	b90b      	cbnz	r3, 8004eec <_vfiprintf_r+0x18>
 8004ee8:	f7ff fd76 	bl	80049d8 <__sinit>
 8004eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004eee:	07d9      	lsls	r1, r3, #31
 8004ef0:	d405      	bmi.n	8004efe <_vfiprintf_r+0x2a>
 8004ef2:	89ab      	ldrh	r3, [r5, #12]
 8004ef4:	059a      	lsls	r2, r3, #22
 8004ef6:	d402      	bmi.n	8004efe <_vfiprintf_r+0x2a>
 8004ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004efa:	f7ff ff74 	bl	8004de6 <__retarget_lock_acquire_recursive>
 8004efe:	89ab      	ldrh	r3, [r5, #12]
 8004f00:	071b      	lsls	r3, r3, #28
 8004f02:	d501      	bpl.n	8004f08 <_vfiprintf_r+0x34>
 8004f04:	692b      	ldr	r3, [r5, #16]
 8004f06:	b99b      	cbnz	r3, 8004f30 <_vfiprintf_r+0x5c>
 8004f08:	4629      	mov	r1, r5
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	f7ff fe8c 	bl	8004c28 <__swsetup_r>
 8004f10:	b170      	cbz	r0, 8004f30 <_vfiprintf_r+0x5c>
 8004f12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f14:	07dc      	lsls	r4, r3, #31
 8004f16:	d504      	bpl.n	8004f22 <_vfiprintf_r+0x4e>
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1c:	b01d      	add	sp, #116	@ 0x74
 8004f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f22:	89ab      	ldrh	r3, [r5, #12]
 8004f24:	0598      	lsls	r0, r3, #22
 8004f26:	d4f7      	bmi.n	8004f18 <_vfiprintf_r+0x44>
 8004f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f2a:	f7ff ff5d 	bl	8004de8 <__retarget_lock_release_recursive>
 8004f2e:	e7f3      	b.n	8004f18 <_vfiprintf_r+0x44>
 8004f30:	2300      	movs	r3, #0
 8004f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f34:	2320      	movs	r3, #32
 8004f36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f3e:	2330      	movs	r3, #48	@ 0x30
 8004f40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80050f0 <_vfiprintf_r+0x21c>
 8004f44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f48:	f04f 0901 	mov.w	r9, #1
 8004f4c:	4623      	mov	r3, r4
 8004f4e:	469a      	mov	sl, r3
 8004f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f54:	b10a      	cbz	r2, 8004f5a <_vfiprintf_r+0x86>
 8004f56:	2a25      	cmp	r2, #37	@ 0x25
 8004f58:	d1f9      	bne.n	8004f4e <_vfiprintf_r+0x7a>
 8004f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8004f5e:	d00b      	beq.n	8004f78 <_vfiprintf_r+0xa4>
 8004f60:	465b      	mov	r3, fp
 8004f62:	4622      	mov	r2, r4
 8004f64:	4629      	mov	r1, r5
 8004f66:	4630      	mov	r0, r6
 8004f68:	f7ff ffa1 	bl	8004eae <__sfputs_r>
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	f000 80a7 	beq.w	80050c0 <_vfiprintf_r+0x1ec>
 8004f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f74:	445a      	add	r2, fp
 8004f76:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f78:	f89a 3000 	ldrb.w	r3, [sl]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 809f 	beq.w	80050c0 <_vfiprintf_r+0x1ec>
 8004f82:	2300      	movs	r3, #0
 8004f84:	f04f 32ff 	mov.w	r2, #4294967295
 8004f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f8c:	f10a 0a01 	add.w	sl, sl, #1
 8004f90:	9304      	str	r3, [sp, #16]
 8004f92:	9307      	str	r3, [sp, #28]
 8004f94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f98:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f9a:	4654      	mov	r4, sl
 8004f9c:	2205      	movs	r2, #5
 8004f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa2:	4853      	ldr	r0, [pc, #332]	@ (80050f0 <_vfiprintf_r+0x21c>)
 8004fa4:	f7fb f91c 	bl	80001e0 <memchr>
 8004fa8:	9a04      	ldr	r2, [sp, #16]
 8004faa:	b9d8      	cbnz	r0, 8004fe4 <_vfiprintf_r+0x110>
 8004fac:	06d1      	lsls	r1, r2, #27
 8004fae:	bf44      	itt	mi
 8004fb0:	2320      	movmi	r3, #32
 8004fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fb6:	0713      	lsls	r3, r2, #28
 8004fb8:	bf44      	itt	mi
 8004fba:	232b      	movmi	r3, #43	@ 0x2b
 8004fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fc6:	d015      	beq.n	8004ff4 <_vfiprintf_r+0x120>
 8004fc8:	9a07      	ldr	r2, [sp, #28]
 8004fca:	4654      	mov	r4, sl
 8004fcc:	2000      	movs	r0, #0
 8004fce:	f04f 0c0a 	mov.w	ip, #10
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fd8:	3b30      	subs	r3, #48	@ 0x30
 8004fda:	2b09      	cmp	r3, #9
 8004fdc:	d94b      	bls.n	8005076 <_vfiprintf_r+0x1a2>
 8004fde:	b1b0      	cbz	r0, 800500e <_vfiprintf_r+0x13a>
 8004fe0:	9207      	str	r2, [sp, #28]
 8004fe2:	e014      	b.n	800500e <_vfiprintf_r+0x13a>
 8004fe4:	eba0 0308 	sub.w	r3, r0, r8
 8004fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8004fec:	4313      	orrs	r3, r2
 8004fee:	9304      	str	r3, [sp, #16]
 8004ff0:	46a2      	mov	sl, r4
 8004ff2:	e7d2      	b.n	8004f9a <_vfiprintf_r+0xc6>
 8004ff4:	9b03      	ldr	r3, [sp, #12]
 8004ff6:	1d19      	adds	r1, r3, #4
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	9103      	str	r1, [sp, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	bfbb      	ittet	lt
 8005000:	425b      	neglt	r3, r3
 8005002:	f042 0202 	orrlt.w	r2, r2, #2
 8005006:	9307      	strge	r3, [sp, #28]
 8005008:	9307      	strlt	r3, [sp, #28]
 800500a:	bfb8      	it	lt
 800500c:	9204      	strlt	r2, [sp, #16]
 800500e:	7823      	ldrb	r3, [r4, #0]
 8005010:	2b2e      	cmp	r3, #46	@ 0x2e
 8005012:	d10a      	bne.n	800502a <_vfiprintf_r+0x156>
 8005014:	7863      	ldrb	r3, [r4, #1]
 8005016:	2b2a      	cmp	r3, #42	@ 0x2a
 8005018:	d132      	bne.n	8005080 <_vfiprintf_r+0x1ac>
 800501a:	9b03      	ldr	r3, [sp, #12]
 800501c:	1d1a      	adds	r2, r3, #4
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	9203      	str	r2, [sp, #12]
 8005022:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005026:	3402      	adds	r4, #2
 8005028:	9305      	str	r3, [sp, #20]
 800502a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005100 <_vfiprintf_r+0x22c>
 800502e:	7821      	ldrb	r1, [r4, #0]
 8005030:	2203      	movs	r2, #3
 8005032:	4650      	mov	r0, sl
 8005034:	f7fb f8d4 	bl	80001e0 <memchr>
 8005038:	b138      	cbz	r0, 800504a <_vfiprintf_r+0x176>
 800503a:	9b04      	ldr	r3, [sp, #16]
 800503c:	eba0 000a 	sub.w	r0, r0, sl
 8005040:	2240      	movs	r2, #64	@ 0x40
 8005042:	4082      	lsls	r2, r0
 8005044:	4313      	orrs	r3, r2
 8005046:	3401      	adds	r4, #1
 8005048:	9304      	str	r3, [sp, #16]
 800504a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800504e:	4829      	ldr	r0, [pc, #164]	@ (80050f4 <_vfiprintf_r+0x220>)
 8005050:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005054:	2206      	movs	r2, #6
 8005056:	f7fb f8c3 	bl	80001e0 <memchr>
 800505a:	2800      	cmp	r0, #0
 800505c:	d03f      	beq.n	80050de <_vfiprintf_r+0x20a>
 800505e:	4b26      	ldr	r3, [pc, #152]	@ (80050f8 <_vfiprintf_r+0x224>)
 8005060:	bb1b      	cbnz	r3, 80050aa <_vfiprintf_r+0x1d6>
 8005062:	9b03      	ldr	r3, [sp, #12]
 8005064:	3307      	adds	r3, #7
 8005066:	f023 0307 	bic.w	r3, r3, #7
 800506a:	3308      	adds	r3, #8
 800506c:	9303      	str	r3, [sp, #12]
 800506e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005070:	443b      	add	r3, r7
 8005072:	9309      	str	r3, [sp, #36]	@ 0x24
 8005074:	e76a      	b.n	8004f4c <_vfiprintf_r+0x78>
 8005076:	fb0c 3202 	mla	r2, ip, r2, r3
 800507a:	460c      	mov	r4, r1
 800507c:	2001      	movs	r0, #1
 800507e:	e7a8      	b.n	8004fd2 <_vfiprintf_r+0xfe>
 8005080:	2300      	movs	r3, #0
 8005082:	3401      	adds	r4, #1
 8005084:	9305      	str	r3, [sp, #20]
 8005086:	4619      	mov	r1, r3
 8005088:	f04f 0c0a 	mov.w	ip, #10
 800508c:	4620      	mov	r0, r4
 800508e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005092:	3a30      	subs	r2, #48	@ 0x30
 8005094:	2a09      	cmp	r2, #9
 8005096:	d903      	bls.n	80050a0 <_vfiprintf_r+0x1cc>
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0c6      	beq.n	800502a <_vfiprintf_r+0x156>
 800509c:	9105      	str	r1, [sp, #20]
 800509e:	e7c4      	b.n	800502a <_vfiprintf_r+0x156>
 80050a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80050a4:	4604      	mov	r4, r0
 80050a6:	2301      	movs	r3, #1
 80050a8:	e7f0      	b.n	800508c <_vfiprintf_r+0x1b8>
 80050aa:	ab03      	add	r3, sp, #12
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	462a      	mov	r2, r5
 80050b0:	4b12      	ldr	r3, [pc, #72]	@ (80050fc <_vfiprintf_r+0x228>)
 80050b2:	a904      	add	r1, sp, #16
 80050b4:	4630      	mov	r0, r6
 80050b6:	f3af 8000 	nop.w
 80050ba:	4607      	mov	r7, r0
 80050bc:	1c78      	adds	r0, r7, #1
 80050be:	d1d6      	bne.n	800506e <_vfiprintf_r+0x19a>
 80050c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050c2:	07d9      	lsls	r1, r3, #31
 80050c4:	d405      	bmi.n	80050d2 <_vfiprintf_r+0x1fe>
 80050c6:	89ab      	ldrh	r3, [r5, #12]
 80050c8:	059a      	lsls	r2, r3, #22
 80050ca:	d402      	bmi.n	80050d2 <_vfiprintf_r+0x1fe>
 80050cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80050ce:	f7ff fe8b 	bl	8004de8 <__retarget_lock_release_recursive>
 80050d2:	89ab      	ldrh	r3, [r5, #12]
 80050d4:	065b      	lsls	r3, r3, #25
 80050d6:	f53f af1f 	bmi.w	8004f18 <_vfiprintf_r+0x44>
 80050da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050dc:	e71e      	b.n	8004f1c <_vfiprintf_r+0x48>
 80050de:	ab03      	add	r3, sp, #12
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	462a      	mov	r2, r5
 80050e4:	4b05      	ldr	r3, [pc, #20]	@ (80050fc <_vfiprintf_r+0x228>)
 80050e6:	a904      	add	r1, sp, #16
 80050e8:	4630      	mov	r0, r6
 80050ea:	f000 f879 	bl	80051e0 <_printf_i>
 80050ee:	e7e4      	b.n	80050ba <_vfiprintf_r+0x1e6>
 80050f0:	08005fd3 	.word	0x08005fd3
 80050f4:	08005fdd 	.word	0x08005fdd
 80050f8:	00000000 	.word	0x00000000
 80050fc:	08004eaf 	.word	0x08004eaf
 8005100:	08005fd9 	.word	0x08005fd9

08005104 <_printf_common>:
 8005104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005108:	4616      	mov	r6, r2
 800510a:	4698      	mov	r8, r3
 800510c:	688a      	ldr	r2, [r1, #8]
 800510e:	690b      	ldr	r3, [r1, #16]
 8005110:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005114:	4293      	cmp	r3, r2
 8005116:	bfb8      	it	lt
 8005118:	4613      	movlt	r3, r2
 800511a:	6033      	str	r3, [r6, #0]
 800511c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005120:	4607      	mov	r7, r0
 8005122:	460c      	mov	r4, r1
 8005124:	b10a      	cbz	r2, 800512a <_printf_common+0x26>
 8005126:	3301      	adds	r3, #1
 8005128:	6033      	str	r3, [r6, #0]
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	0699      	lsls	r1, r3, #26
 800512e:	bf42      	ittt	mi
 8005130:	6833      	ldrmi	r3, [r6, #0]
 8005132:	3302      	addmi	r3, #2
 8005134:	6033      	strmi	r3, [r6, #0]
 8005136:	6825      	ldr	r5, [r4, #0]
 8005138:	f015 0506 	ands.w	r5, r5, #6
 800513c:	d106      	bne.n	800514c <_printf_common+0x48>
 800513e:	f104 0a19 	add.w	sl, r4, #25
 8005142:	68e3      	ldr	r3, [r4, #12]
 8005144:	6832      	ldr	r2, [r6, #0]
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	42ab      	cmp	r3, r5
 800514a:	dc26      	bgt.n	800519a <_printf_common+0x96>
 800514c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005150:	6822      	ldr	r2, [r4, #0]
 8005152:	3b00      	subs	r3, #0
 8005154:	bf18      	it	ne
 8005156:	2301      	movne	r3, #1
 8005158:	0692      	lsls	r2, r2, #26
 800515a:	d42b      	bmi.n	80051b4 <_printf_common+0xb0>
 800515c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005160:	4641      	mov	r1, r8
 8005162:	4638      	mov	r0, r7
 8005164:	47c8      	blx	r9
 8005166:	3001      	adds	r0, #1
 8005168:	d01e      	beq.n	80051a8 <_printf_common+0xa4>
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	6922      	ldr	r2, [r4, #16]
 800516e:	f003 0306 	and.w	r3, r3, #6
 8005172:	2b04      	cmp	r3, #4
 8005174:	bf02      	ittt	eq
 8005176:	68e5      	ldreq	r5, [r4, #12]
 8005178:	6833      	ldreq	r3, [r6, #0]
 800517a:	1aed      	subeq	r5, r5, r3
 800517c:	68a3      	ldr	r3, [r4, #8]
 800517e:	bf0c      	ite	eq
 8005180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005184:	2500      	movne	r5, #0
 8005186:	4293      	cmp	r3, r2
 8005188:	bfc4      	itt	gt
 800518a:	1a9b      	subgt	r3, r3, r2
 800518c:	18ed      	addgt	r5, r5, r3
 800518e:	2600      	movs	r6, #0
 8005190:	341a      	adds	r4, #26
 8005192:	42b5      	cmp	r5, r6
 8005194:	d11a      	bne.n	80051cc <_printf_common+0xc8>
 8005196:	2000      	movs	r0, #0
 8005198:	e008      	b.n	80051ac <_printf_common+0xa8>
 800519a:	2301      	movs	r3, #1
 800519c:	4652      	mov	r2, sl
 800519e:	4641      	mov	r1, r8
 80051a0:	4638      	mov	r0, r7
 80051a2:	47c8      	blx	r9
 80051a4:	3001      	adds	r0, #1
 80051a6:	d103      	bne.n	80051b0 <_printf_common+0xac>
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b0:	3501      	adds	r5, #1
 80051b2:	e7c6      	b.n	8005142 <_printf_common+0x3e>
 80051b4:	18e1      	adds	r1, r4, r3
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	2030      	movs	r0, #48	@ 0x30
 80051ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051be:	4422      	add	r2, r4
 80051c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051c8:	3302      	adds	r3, #2
 80051ca:	e7c7      	b.n	800515c <_printf_common+0x58>
 80051cc:	2301      	movs	r3, #1
 80051ce:	4622      	mov	r2, r4
 80051d0:	4641      	mov	r1, r8
 80051d2:	4638      	mov	r0, r7
 80051d4:	47c8      	blx	r9
 80051d6:	3001      	adds	r0, #1
 80051d8:	d0e6      	beq.n	80051a8 <_printf_common+0xa4>
 80051da:	3601      	adds	r6, #1
 80051dc:	e7d9      	b.n	8005192 <_printf_common+0x8e>
	...

080051e0 <_printf_i>:
 80051e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051e4:	7e0f      	ldrb	r7, [r1, #24]
 80051e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051e8:	2f78      	cmp	r7, #120	@ 0x78
 80051ea:	4691      	mov	r9, r2
 80051ec:	4680      	mov	r8, r0
 80051ee:	460c      	mov	r4, r1
 80051f0:	469a      	mov	sl, r3
 80051f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051f6:	d807      	bhi.n	8005208 <_printf_i+0x28>
 80051f8:	2f62      	cmp	r7, #98	@ 0x62
 80051fa:	d80a      	bhi.n	8005212 <_printf_i+0x32>
 80051fc:	2f00      	cmp	r7, #0
 80051fe:	f000 80d2 	beq.w	80053a6 <_printf_i+0x1c6>
 8005202:	2f58      	cmp	r7, #88	@ 0x58
 8005204:	f000 80b9 	beq.w	800537a <_printf_i+0x19a>
 8005208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800520c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005210:	e03a      	b.n	8005288 <_printf_i+0xa8>
 8005212:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005216:	2b15      	cmp	r3, #21
 8005218:	d8f6      	bhi.n	8005208 <_printf_i+0x28>
 800521a:	a101      	add	r1, pc, #4	@ (adr r1, 8005220 <_printf_i+0x40>)
 800521c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005220:	08005279 	.word	0x08005279
 8005224:	0800528d 	.word	0x0800528d
 8005228:	08005209 	.word	0x08005209
 800522c:	08005209 	.word	0x08005209
 8005230:	08005209 	.word	0x08005209
 8005234:	08005209 	.word	0x08005209
 8005238:	0800528d 	.word	0x0800528d
 800523c:	08005209 	.word	0x08005209
 8005240:	08005209 	.word	0x08005209
 8005244:	08005209 	.word	0x08005209
 8005248:	08005209 	.word	0x08005209
 800524c:	0800538d 	.word	0x0800538d
 8005250:	080052b7 	.word	0x080052b7
 8005254:	08005347 	.word	0x08005347
 8005258:	08005209 	.word	0x08005209
 800525c:	08005209 	.word	0x08005209
 8005260:	080053af 	.word	0x080053af
 8005264:	08005209 	.word	0x08005209
 8005268:	080052b7 	.word	0x080052b7
 800526c:	08005209 	.word	0x08005209
 8005270:	08005209 	.word	0x08005209
 8005274:	0800534f 	.word	0x0800534f
 8005278:	6833      	ldr	r3, [r6, #0]
 800527a:	1d1a      	adds	r2, r3, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6032      	str	r2, [r6, #0]
 8005280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005284:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005288:	2301      	movs	r3, #1
 800528a:	e09d      	b.n	80053c8 <_printf_i+0x1e8>
 800528c:	6833      	ldr	r3, [r6, #0]
 800528e:	6820      	ldr	r0, [r4, #0]
 8005290:	1d19      	adds	r1, r3, #4
 8005292:	6031      	str	r1, [r6, #0]
 8005294:	0606      	lsls	r6, r0, #24
 8005296:	d501      	bpl.n	800529c <_printf_i+0xbc>
 8005298:	681d      	ldr	r5, [r3, #0]
 800529a:	e003      	b.n	80052a4 <_printf_i+0xc4>
 800529c:	0645      	lsls	r5, r0, #25
 800529e:	d5fb      	bpl.n	8005298 <_printf_i+0xb8>
 80052a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052a4:	2d00      	cmp	r5, #0
 80052a6:	da03      	bge.n	80052b0 <_printf_i+0xd0>
 80052a8:	232d      	movs	r3, #45	@ 0x2d
 80052aa:	426d      	negs	r5, r5
 80052ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052b0:	4859      	ldr	r0, [pc, #356]	@ (8005418 <_printf_i+0x238>)
 80052b2:	230a      	movs	r3, #10
 80052b4:	e011      	b.n	80052da <_printf_i+0xfa>
 80052b6:	6821      	ldr	r1, [r4, #0]
 80052b8:	6833      	ldr	r3, [r6, #0]
 80052ba:	0608      	lsls	r0, r1, #24
 80052bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80052c0:	d402      	bmi.n	80052c8 <_printf_i+0xe8>
 80052c2:	0649      	lsls	r1, r1, #25
 80052c4:	bf48      	it	mi
 80052c6:	b2ad      	uxthmi	r5, r5
 80052c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80052ca:	4853      	ldr	r0, [pc, #332]	@ (8005418 <_printf_i+0x238>)
 80052cc:	6033      	str	r3, [r6, #0]
 80052ce:	bf14      	ite	ne
 80052d0:	230a      	movne	r3, #10
 80052d2:	2308      	moveq	r3, #8
 80052d4:	2100      	movs	r1, #0
 80052d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052da:	6866      	ldr	r6, [r4, #4]
 80052dc:	60a6      	str	r6, [r4, #8]
 80052de:	2e00      	cmp	r6, #0
 80052e0:	bfa2      	ittt	ge
 80052e2:	6821      	ldrge	r1, [r4, #0]
 80052e4:	f021 0104 	bicge.w	r1, r1, #4
 80052e8:	6021      	strge	r1, [r4, #0]
 80052ea:	b90d      	cbnz	r5, 80052f0 <_printf_i+0x110>
 80052ec:	2e00      	cmp	r6, #0
 80052ee:	d04b      	beq.n	8005388 <_printf_i+0x1a8>
 80052f0:	4616      	mov	r6, r2
 80052f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80052f6:	fb03 5711 	mls	r7, r3, r1, r5
 80052fa:	5dc7      	ldrb	r7, [r0, r7]
 80052fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005300:	462f      	mov	r7, r5
 8005302:	42bb      	cmp	r3, r7
 8005304:	460d      	mov	r5, r1
 8005306:	d9f4      	bls.n	80052f2 <_printf_i+0x112>
 8005308:	2b08      	cmp	r3, #8
 800530a:	d10b      	bne.n	8005324 <_printf_i+0x144>
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	07df      	lsls	r7, r3, #31
 8005310:	d508      	bpl.n	8005324 <_printf_i+0x144>
 8005312:	6923      	ldr	r3, [r4, #16]
 8005314:	6861      	ldr	r1, [r4, #4]
 8005316:	4299      	cmp	r1, r3
 8005318:	bfde      	ittt	le
 800531a:	2330      	movle	r3, #48	@ 0x30
 800531c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005320:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005324:	1b92      	subs	r2, r2, r6
 8005326:	6122      	str	r2, [r4, #16]
 8005328:	f8cd a000 	str.w	sl, [sp]
 800532c:	464b      	mov	r3, r9
 800532e:	aa03      	add	r2, sp, #12
 8005330:	4621      	mov	r1, r4
 8005332:	4640      	mov	r0, r8
 8005334:	f7ff fee6 	bl	8005104 <_printf_common>
 8005338:	3001      	adds	r0, #1
 800533a:	d14a      	bne.n	80053d2 <_printf_i+0x1f2>
 800533c:	f04f 30ff 	mov.w	r0, #4294967295
 8005340:	b004      	add	sp, #16
 8005342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	f043 0320 	orr.w	r3, r3, #32
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	4833      	ldr	r0, [pc, #204]	@ (800541c <_printf_i+0x23c>)
 8005350:	2778      	movs	r7, #120	@ 0x78
 8005352:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	6831      	ldr	r1, [r6, #0]
 800535a:	061f      	lsls	r7, r3, #24
 800535c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005360:	d402      	bmi.n	8005368 <_printf_i+0x188>
 8005362:	065f      	lsls	r7, r3, #25
 8005364:	bf48      	it	mi
 8005366:	b2ad      	uxthmi	r5, r5
 8005368:	6031      	str	r1, [r6, #0]
 800536a:	07d9      	lsls	r1, r3, #31
 800536c:	bf44      	itt	mi
 800536e:	f043 0320 	orrmi.w	r3, r3, #32
 8005372:	6023      	strmi	r3, [r4, #0]
 8005374:	b11d      	cbz	r5, 800537e <_printf_i+0x19e>
 8005376:	2310      	movs	r3, #16
 8005378:	e7ac      	b.n	80052d4 <_printf_i+0xf4>
 800537a:	4827      	ldr	r0, [pc, #156]	@ (8005418 <_printf_i+0x238>)
 800537c:	e7e9      	b.n	8005352 <_printf_i+0x172>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	f023 0320 	bic.w	r3, r3, #32
 8005384:	6023      	str	r3, [r4, #0]
 8005386:	e7f6      	b.n	8005376 <_printf_i+0x196>
 8005388:	4616      	mov	r6, r2
 800538a:	e7bd      	b.n	8005308 <_printf_i+0x128>
 800538c:	6833      	ldr	r3, [r6, #0]
 800538e:	6825      	ldr	r5, [r4, #0]
 8005390:	6961      	ldr	r1, [r4, #20]
 8005392:	1d18      	adds	r0, r3, #4
 8005394:	6030      	str	r0, [r6, #0]
 8005396:	062e      	lsls	r6, r5, #24
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	d501      	bpl.n	80053a0 <_printf_i+0x1c0>
 800539c:	6019      	str	r1, [r3, #0]
 800539e:	e002      	b.n	80053a6 <_printf_i+0x1c6>
 80053a0:	0668      	lsls	r0, r5, #25
 80053a2:	d5fb      	bpl.n	800539c <_printf_i+0x1bc>
 80053a4:	8019      	strh	r1, [r3, #0]
 80053a6:	2300      	movs	r3, #0
 80053a8:	6123      	str	r3, [r4, #16]
 80053aa:	4616      	mov	r6, r2
 80053ac:	e7bc      	b.n	8005328 <_printf_i+0x148>
 80053ae:	6833      	ldr	r3, [r6, #0]
 80053b0:	1d1a      	adds	r2, r3, #4
 80053b2:	6032      	str	r2, [r6, #0]
 80053b4:	681e      	ldr	r6, [r3, #0]
 80053b6:	6862      	ldr	r2, [r4, #4]
 80053b8:	2100      	movs	r1, #0
 80053ba:	4630      	mov	r0, r6
 80053bc:	f7fa ff10 	bl	80001e0 <memchr>
 80053c0:	b108      	cbz	r0, 80053c6 <_printf_i+0x1e6>
 80053c2:	1b80      	subs	r0, r0, r6
 80053c4:	6060      	str	r0, [r4, #4]
 80053c6:	6863      	ldr	r3, [r4, #4]
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	2300      	movs	r3, #0
 80053cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053d0:	e7aa      	b.n	8005328 <_printf_i+0x148>
 80053d2:	6923      	ldr	r3, [r4, #16]
 80053d4:	4632      	mov	r2, r6
 80053d6:	4649      	mov	r1, r9
 80053d8:	4640      	mov	r0, r8
 80053da:	47d0      	blx	sl
 80053dc:	3001      	adds	r0, #1
 80053de:	d0ad      	beq.n	800533c <_printf_i+0x15c>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	079b      	lsls	r3, r3, #30
 80053e4:	d413      	bmi.n	800540e <_printf_i+0x22e>
 80053e6:	68e0      	ldr	r0, [r4, #12]
 80053e8:	9b03      	ldr	r3, [sp, #12]
 80053ea:	4298      	cmp	r0, r3
 80053ec:	bfb8      	it	lt
 80053ee:	4618      	movlt	r0, r3
 80053f0:	e7a6      	b.n	8005340 <_printf_i+0x160>
 80053f2:	2301      	movs	r3, #1
 80053f4:	4632      	mov	r2, r6
 80053f6:	4649      	mov	r1, r9
 80053f8:	4640      	mov	r0, r8
 80053fa:	47d0      	blx	sl
 80053fc:	3001      	adds	r0, #1
 80053fe:	d09d      	beq.n	800533c <_printf_i+0x15c>
 8005400:	3501      	adds	r5, #1
 8005402:	68e3      	ldr	r3, [r4, #12]
 8005404:	9903      	ldr	r1, [sp, #12]
 8005406:	1a5b      	subs	r3, r3, r1
 8005408:	42ab      	cmp	r3, r5
 800540a:	dcf2      	bgt.n	80053f2 <_printf_i+0x212>
 800540c:	e7eb      	b.n	80053e6 <_printf_i+0x206>
 800540e:	2500      	movs	r5, #0
 8005410:	f104 0619 	add.w	r6, r4, #25
 8005414:	e7f5      	b.n	8005402 <_printf_i+0x222>
 8005416:	bf00      	nop
 8005418:	08005fe4 	.word	0x08005fe4
 800541c:	08005ff5 	.word	0x08005ff5

08005420 <__sflush_r>:
 8005420:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005428:	0716      	lsls	r6, r2, #28
 800542a:	4605      	mov	r5, r0
 800542c:	460c      	mov	r4, r1
 800542e:	d454      	bmi.n	80054da <__sflush_r+0xba>
 8005430:	684b      	ldr	r3, [r1, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	dc02      	bgt.n	800543c <__sflush_r+0x1c>
 8005436:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	dd48      	ble.n	80054ce <__sflush_r+0xae>
 800543c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800543e:	2e00      	cmp	r6, #0
 8005440:	d045      	beq.n	80054ce <__sflush_r+0xae>
 8005442:	2300      	movs	r3, #0
 8005444:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005448:	682f      	ldr	r7, [r5, #0]
 800544a:	6a21      	ldr	r1, [r4, #32]
 800544c:	602b      	str	r3, [r5, #0]
 800544e:	d030      	beq.n	80054b2 <__sflush_r+0x92>
 8005450:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005452:	89a3      	ldrh	r3, [r4, #12]
 8005454:	0759      	lsls	r1, r3, #29
 8005456:	d505      	bpl.n	8005464 <__sflush_r+0x44>
 8005458:	6863      	ldr	r3, [r4, #4]
 800545a:	1ad2      	subs	r2, r2, r3
 800545c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800545e:	b10b      	cbz	r3, 8005464 <__sflush_r+0x44>
 8005460:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005462:	1ad2      	subs	r2, r2, r3
 8005464:	2300      	movs	r3, #0
 8005466:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005468:	6a21      	ldr	r1, [r4, #32]
 800546a:	4628      	mov	r0, r5
 800546c:	47b0      	blx	r6
 800546e:	1c43      	adds	r3, r0, #1
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	d106      	bne.n	8005482 <__sflush_r+0x62>
 8005474:	6829      	ldr	r1, [r5, #0]
 8005476:	291d      	cmp	r1, #29
 8005478:	d82b      	bhi.n	80054d2 <__sflush_r+0xb2>
 800547a:	4a2a      	ldr	r2, [pc, #168]	@ (8005524 <__sflush_r+0x104>)
 800547c:	410a      	asrs	r2, r1
 800547e:	07d6      	lsls	r6, r2, #31
 8005480:	d427      	bmi.n	80054d2 <__sflush_r+0xb2>
 8005482:	2200      	movs	r2, #0
 8005484:	6062      	str	r2, [r4, #4]
 8005486:	04d9      	lsls	r1, r3, #19
 8005488:	6922      	ldr	r2, [r4, #16]
 800548a:	6022      	str	r2, [r4, #0]
 800548c:	d504      	bpl.n	8005498 <__sflush_r+0x78>
 800548e:	1c42      	adds	r2, r0, #1
 8005490:	d101      	bne.n	8005496 <__sflush_r+0x76>
 8005492:	682b      	ldr	r3, [r5, #0]
 8005494:	b903      	cbnz	r3, 8005498 <__sflush_r+0x78>
 8005496:	6560      	str	r0, [r4, #84]	@ 0x54
 8005498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800549a:	602f      	str	r7, [r5, #0]
 800549c:	b1b9      	cbz	r1, 80054ce <__sflush_r+0xae>
 800549e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054a2:	4299      	cmp	r1, r3
 80054a4:	d002      	beq.n	80054ac <__sflush_r+0x8c>
 80054a6:	4628      	mov	r0, r5
 80054a8:	f7ff fca0 	bl	8004dec <_free_r>
 80054ac:	2300      	movs	r3, #0
 80054ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80054b0:	e00d      	b.n	80054ce <__sflush_r+0xae>
 80054b2:	2301      	movs	r3, #1
 80054b4:	4628      	mov	r0, r5
 80054b6:	47b0      	blx	r6
 80054b8:	4602      	mov	r2, r0
 80054ba:	1c50      	adds	r0, r2, #1
 80054bc:	d1c9      	bne.n	8005452 <__sflush_r+0x32>
 80054be:	682b      	ldr	r3, [r5, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0c6      	beq.n	8005452 <__sflush_r+0x32>
 80054c4:	2b1d      	cmp	r3, #29
 80054c6:	d001      	beq.n	80054cc <__sflush_r+0xac>
 80054c8:	2b16      	cmp	r3, #22
 80054ca:	d11e      	bne.n	800550a <__sflush_r+0xea>
 80054cc:	602f      	str	r7, [r5, #0]
 80054ce:	2000      	movs	r0, #0
 80054d0:	e022      	b.n	8005518 <__sflush_r+0xf8>
 80054d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054d6:	b21b      	sxth	r3, r3
 80054d8:	e01b      	b.n	8005512 <__sflush_r+0xf2>
 80054da:	690f      	ldr	r7, [r1, #16]
 80054dc:	2f00      	cmp	r7, #0
 80054de:	d0f6      	beq.n	80054ce <__sflush_r+0xae>
 80054e0:	0793      	lsls	r3, r2, #30
 80054e2:	680e      	ldr	r6, [r1, #0]
 80054e4:	bf08      	it	eq
 80054e6:	694b      	ldreq	r3, [r1, #20]
 80054e8:	600f      	str	r7, [r1, #0]
 80054ea:	bf18      	it	ne
 80054ec:	2300      	movne	r3, #0
 80054ee:	eba6 0807 	sub.w	r8, r6, r7
 80054f2:	608b      	str	r3, [r1, #8]
 80054f4:	f1b8 0f00 	cmp.w	r8, #0
 80054f8:	dde9      	ble.n	80054ce <__sflush_r+0xae>
 80054fa:	6a21      	ldr	r1, [r4, #32]
 80054fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80054fe:	4643      	mov	r3, r8
 8005500:	463a      	mov	r2, r7
 8005502:	4628      	mov	r0, r5
 8005504:	47b0      	blx	r6
 8005506:	2800      	cmp	r0, #0
 8005508:	dc08      	bgt.n	800551c <__sflush_r+0xfc>
 800550a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800550e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005512:	81a3      	strh	r3, [r4, #12]
 8005514:	f04f 30ff 	mov.w	r0, #4294967295
 8005518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800551c:	4407      	add	r7, r0
 800551e:	eba8 0800 	sub.w	r8, r8, r0
 8005522:	e7e7      	b.n	80054f4 <__sflush_r+0xd4>
 8005524:	dfbffffe 	.word	0xdfbffffe

08005528 <_fflush_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	690b      	ldr	r3, [r1, #16]
 800552c:	4605      	mov	r5, r0
 800552e:	460c      	mov	r4, r1
 8005530:	b913      	cbnz	r3, 8005538 <_fflush_r+0x10>
 8005532:	2500      	movs	r5, #0
 8005534:	4628      	mov	r0, r5
 8005536:	bd38      	pop	{r3, r4, r5, pc}
 8005538:	b118      	cbz	r0, 8005542 <_fflush_r+0x1a>
 800553a:	6a03      	ldr	r3, [r0, #32]
 800553c:	b90b      	cbnz	r3, 8005542 <_fflush_r+0x1a>
 800553e:	f7ff fa4b 	bl	80049d8 <__sinit>
 8005542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0f3      	beq.n	8005532 <_fflush_r+0xa>
 800554a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800554c:	07d0      	lsls	r0, r2, #31
 800554e:	d404      	bmi.n	800555a <_fflush_r+0x32>
 8005550:	0599      	lsls	r1, r3, #22
 8005552:	d402      	bmi.n	800555a <_fflush_r+0x32>
 8005554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005556:	f7ff fc46 	bl	8004de6 <__retarget_lock_acquire_recursive>
 800555a:	4628      	mov	r0, r5
 800555c:	4621      	mov	r1, r4
 800555e:	f7ff ff5f 	bl	8005420 <__sflush_r>
 8005562:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005564:	07da      	lsls	r2, r3, #31
 8005566:	4605      	mov	r5, r0
 8005568:	d4e4      	bmi.n	8005534 <_fflush_r+0xc>
 800556a:	89a3      	ldrh	r3, [r4, #12]
 800556c:	059b      	lsls	r3, r3, #22
 800556e:	d4e1      	bmi.n	8005534 <_fflush_r+0xc>
 8005570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005572:	f7ff fc39 	bl	8004de8 <__retarget_lock_release_recursive>
 8005576:	e7dd      	b.n	8005534 <_fflush_r+0xc>

08005578 <__swhatbuf_r>:
 8005578:	b570      	push	{r4, r5, r6, lr}
 800557a:	460c      	mov	r4, r1
 800557c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005580:	2900      	cmp	r1, #0
 8005582:	b096      	sub	sp, #88	@ 0x58
 8005584:	4615      	mov	r5, r2
 8005586:	461e      	mov	r6, r3
 8005588:	da0d      	bge.n	80055a6 <__swhatbuf_r+0x2e>
 800558a:	89a3      	ldrh	r3, [r4, #12]
 800558c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005590:	f04f 0100 	mov.w	r1, #0
 8005594:	bf14      	ite	ne
 8005596:	2340      	movne	r3, #64	@ 0x40
 8005598:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800559c:	2000      	movs	r0, #0
 800559e:	6031      	str	r1, [r6, #0]
 80055a0:	602b      	str	r3, [r5, #0]
 80055a2:	b016      	add	sp, #88	@ 0x58
 80055a4:	bd70      	pop	{r4, r5, r6, pc}
 80055a6:	466a      	mov	r2, sp
 80055a8:	f000 f848 	bl	800563c <_fstat_r>
 80055ac:	2800      	cmp	r0, #0
 80055ae:	dbec      	blt.n	800558a <__swhatbuf_r+0x12>
 80055b0:	9901      	ldr	r1, [sp, #4]
 80055b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80055b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80055ba:	4259      	negs	r1, r3
 80055bc:	4159      	adcs	r1, r3
 80055be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055c2:	e7eb      	b.n	800559c <__swhatbuf_r+0x24>

080055c4 <__smakebuf_r>:
 80055c4:	898b      	ldrh	r3, [r1, #12]
 80055c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055c8:	079d      	lsls	r5, r3, #30
 80055ca:	4606      	mov	r6, r0
 80055cc:	460c      	mov	r4, r1
 80055ce:	d507      	bpl.n	80055e0 <__smakebuf_r+0x1c>
 80055d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	6123      	str	r3, [r4, #16]
 80055d8:	2301      	movs	r3, #1
 80055da:	6163      	str	r3, [r4, #20]
 80055dc:	b003      	add	sp, #12
 80055de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055e0:	ab01      	add	r3, sp, #4
 80055e2:	466a      	mov	r2, sp
 80055e4:	f7ff ffc8 	bl	8005578 <__swhatbuf_r>
 80055e8:	9f00      	ldr	r7, [sp, #0]
 80055ea:	4605      	mov	r5, r0
 80055ec:	4639      	mov	r1, r7
 80055ee:	4630      	mov	r0, r6
 80055f0:	f7ff f8da 	bl	80047a8 <_malloc_r>
 80055f4:	b948      	cbnz	r0, 800560a <__smakebuf_r+0x46>
 80055f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055fa:	059a      	lsls	r2, r3, #22
 80055fc:	d4ee      	bmi.n	80055dc <__smakebuf_r+0x18>
 80055fe:	f023 0303 	bic.w	r3, r3, #3
 8005602:	f043 0302 	orr.w	r3, r3, #2
 8005606:	81a3      	strh	r3, [r4, #12]
 8005608:	e7e2      	b.n	80055d0 <__smakebuf_r+0xc>
 800560a:	89a3      	ldrh	r3, [r4, #12]
 800560c:	6020      	str	r0, [r4, #0]
 800560e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005612:	81a3      	strh	r3, [r4, #12]
 8005614:	9b01      	ldr	r3, [sp, #4]
 8005616:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800561a:	b15b      	cbz	r3, 8005634 <__smakebuf_r+0x70>
 800561c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005620:	4630      	mov	r0, r6
 8005622:	f000 f81d 	bl	8005660 <_isatty_r>
 8005626:	b128      	cbz	r0, 8005634 <__smakebuf_r+0x70>
 8005628:	89a3      	ldrh	r3, [r4, #12]
 800562a:	f023 0303 	bic.w	r3, r3, #3
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	81a3      	strh	r3, [r4, #12]
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	431d      	orrs	r5, r3
 8005638:	81a5      	strh	r5, [r4, #12]
 800563a:	e7cf      	b.n	80055dc <__smakebuf_r+0x18>

0800563c <_fstat_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4d07      	ldr	r5, [pc, #28]	@ (800565c <_fstat_r+0x20>)
 8005640:	2300      	movs	r3, #0
 8005642:	4604      	mov	r4, r0
 8005644:	4608      	mov	r0, r1
 8005646:	4611      	mov	r1, r2
 8005648:	602b      	str	r3, [r5, #0]
 800564a:	f7fb faf8 	bl	8000c3e <_fstat>
 800564e:	1c43      	adds	r3, r0, #1
 8005650:	d102      	bne.n	8005658 <_fstat_r+0x1c>
 8005652:	682b      	ldr	r3, [r5, #0]
 8005654:	b103      	cbz	r3, 8005658 <_fstat_r+0x1c>
 8005656:	6023      	str	r3, [r4, #0]
 8005658:	bd38      	pop	{r3, r4, r5, pc}
 800565a:	bf00      	nop
 800565c:	200006b8 	.word	0x200006b8

08005660 <_isatty_r>:
 8005660:	b538      	push	{r3, r4, r5, lr}
 8005662:	4d06      	ldr	r5, [pc, #24]	@ (800567c <_isatty_r+0x1c>)
 8005664:	2300      	movs	r3, #0
 8005666:	4604      	mov	r4, r0
 8005668:	4608      	mov	r0, r1
 800566a:	602b      	str	r3, [r5, #0]
 800566c:	f7fb faf7 	bl	8000c5e <_isatty>
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	d102      	bne.n	800567a <_isatty_r+0x1a>
 8005674:	682b      	ldr	r3, [r5, #0]
 8005676:	b103      	cbz	r3, 800567a <_isatty_r+0x1a>
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	bd38      	pop	{r3, r4, r5, pc}
 800567c:	200006b8 	.word	0x200006b8

08005680 <_init>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	bf00      	nop
 8005684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005686:	bc08      	pop	{r3}
 8005688:	469e      	mov	lr, r3
 800568a:	4770      	bx	lr

0800568c <_fini>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	bf00      	nop
 8005690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005692:	bc08      	pop	{r3}
 8005694:	469e      	mov	lr, r3
 8005696:	4770      	bx	lr
